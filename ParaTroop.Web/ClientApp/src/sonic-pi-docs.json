{
  "documentation": {
    "synths": {
      "dull_bell": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Dull Bell</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:dull_bell</span></pre></code></p>\n<p>A simple dull discordant bell sound.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pretty_bell": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pretty Bell</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:pretty_bell</span></pre></code></p>\n<p>A pretty bell sound. Works well with short attacks and long decays.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "beep": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sine Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:beep</span></pre></code></p>\n<p>A simple pure sine wave. The sine wave is the simplest, purest sound there is and is the fundamental building block of all noise. The mathematician Fourier demonstrated that any sound could be built out of a number of sine waves (the more complex the sound, the more sine waves needed). Have a play combining a number of sine waves to design your own sounds!</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "sine": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sine Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:sine</span></pre></code></p>\n<p>A simple pure sine wave. The sine wave is the simplest, purest sound there is and is the fundamental building block of all noise. The mathematician Fourier demonstrated that any sound could be built out of a number of sine waves (the more complex the sound, the more sine waves needed). Have a play combining a number of sine waves to design your own sounds!</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "saw": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Saw Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:saw</span></pre></code></p>\n<p>A saw wave with a low pass filter. Great for using with FX such as the built in low pass filter (available via the cutoff arg) due to the complexity and thickness of the sound.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pulse": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pulse Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:pulse</span></pre></code></p>\n<p>A simple pulse wave with a low pass filter. This defaults to a square wave, but the timbre can be changed dramatically by adjusting the pulse_width arg between 0 and 1. The pulse wave is thick and heavy with lower notes and is a great ingredient for bass sounds.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "subpulse": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pulse Wave with sub</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#sub_amp\">sub_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#sub_detune\">sub_detune:</a></td>\n<td class=\"odd\">-12</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:subpulse</span></pre></code></p>\n<p>A pulse wave with a sub sine wave passed through a low pass filter. The pulse wave is thick and heavy with lower notes and is a great ingredient for bass sounds - especially with the sub wave.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"sub_amp\"></a>\n<tr>\n <td class=\"odd key\">sub_amp:</td>\n <td class=\"odd\">\n<p>Amplitude for the additional sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"sub_detune\"></a>\n<tr>\n <td class=\"even key\">sub_detune:</td>\n <td class=\"even\">\n<p>Amount of detune from the note for the additional sine wave. Default is -12</p>\n  <p class=\"properties\">\n   Default: -12\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "square": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Square Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:square</span></pre></code></p>\n<p>A simple square wave with a low pass filter. The square wave is thick and heavy with lower notes and is a great ingredient for bass sounds. If you wish to modulate the width of the square wave see the synth pulse.</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "tri": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Triangle Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:tri</span></pre></code></p>\n<p>A simple triangle wave with a low pass filter.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "dsaw": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Detuned Saw wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#detune\">detune:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:dsaw</span></pre></code></p>\n<p>A pair of detuned saw waves passed through a low pass filter. Two saw waves with slightly different frequencies generates a nice thick sound which is the basis for a lot of famous synth sounds. Thicken the sound by increasing the detune value, or create an octave-playing synth by choosing a detune of 12 (12 MIDI notes is an octave).</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"detune\"></a>\n<tr>\n <td class=\"even key\">detune:</td>\n <td class=\"even\">\n<p>Distance (in MIDI notes) between components of sound. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 create a thick sound. Larger values such as 0.5 make the tuning sound strange. Even bigger values such as 5 create chord-like sounds.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "dpulse": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Detuned Pulse Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#detune\">detune:</a></td>\n<td class=\"odd\">0.1</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#dpulse_width\">dpulse_width:</a></td>\n<td class=\"odd\">pulse_width</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:dpulse</span></pre></code></p>\n<p>A pair of detuned pulse waves passed through a low pass filter. Two pulse waves with slightly different frequencies generates a nice thick sound which can be used as a basis for some nice bass sounds. Thicken the sound by increasing the detune value, or create an octave-playing synth by choosing a detune of 12 (12 MIDI notes is an octave). Each pulse wave can also have individual widths (although the default is for the detuned pulse to mirror the width of the main pulse).</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"detune\"></a>\n<tr>\n <td class=\"even key\">detune:</td>\n <td class=\"even\">\n<p>Distance (in MIDI notes) between components of sound. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 create a thick sound. Larger values such as 0.5 make the tuning sound strange. Even bigger values such as 5 create chord-like sounds.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"odd key\">pulse_width:</td>\n <td class=\"odd\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"dpulse_width\"></a>\n<tr>\n <td class=\"even key\">dpulse_width:</td>\n <td class=\"even\">\n<p>The width of the second detuned pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: pulse_width\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "dtri": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Detuned Triangle Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#detune\">detune:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:dtri</span></pre></code></p>\n<p>A pair of detuned triangle waves passed through a low pass filter. Two pulse waves with slightly different frequencies generates a nice thick sound which can be used as a basis for some nice bass sounds. Thicken the sound by increasing the detune value, or create an octave-playing synth by choosing a detune of 12 (12 MIDI notes is an octave).</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"detune\"></a>\n<tr>\n <td class=\"even key\">detune:</td>\n <td class=\"even\">\n<p>Distance (in MIDI notes) between components of sound. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 create a thick sound. Larger values such as 0.5 make the tuning sound strange. Even bigger values such as 5 create chord-like sounds.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "fm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Basic FM synthesis</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#divisor\">divisor:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#depth\">depth:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:fm</span></pre></code></p>\n<p>A sine wave with a fundamental frequency which is modulated at audio rate by another sine wave with a specific modulation, division and depth. Useful for generating a wide range of sounds by playing with the divisor and depth params. Great for deep powerful bass and crazy 70s sci-fi sounds.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"divisor\"></a>\n<tr>\n <td class=\"even key\">divisor:</td>\n <td class=\"even\">\n<p>Modifies the frequency of the modulator oscillator relative to the carrier. Don’t worry too much about what this means - just try different numbers out!</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"depth\"></a>\n<tr>\n <td class=\"odd key\">depth:</td>\n <td class=\"odd\">\n<p>Modifies the depth of the carrier wave used to modify fundamental frequency. Don’t worry too much about what this means - just try different numbers out!</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_fm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Basic FM synthesis with frequency modulation.</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#divisor\">divisor:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#depth\">depth:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_fm</span></pre></code></p>\n<p>The FM synth modulating between two notes - the duration of the modulation can be modified using the mod_phase arg, the range (number of notes jumped between) by the mod_range arg and the width of the jumps by the mod_width param. The FM synth is a sine wave with a fundamental frequency which is modulated at audio rate by another sine wave with a specific modulation, division and depth. Useful for generating a wide range of sounds by playing with the <code>:divisor</code> and <code>:depth</code> params. Great for deep powerful bass and crazy 70s sci-fi sounds.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"divisor\"></a>\n<tr>\n <td class=\"even key\">divisor:</td>\n <td class=\"even\">\n<p>Modifies the frequency of the modulator oscillator relative to the carrier. Don’t worry too much about what this means - just try different numbers out!</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"depth\"></a>\n<tr>\n <td class=\"odd key\">depth:</td>\n <td class=\"odd\">\n<p>Modifies the depth of the carrier wave used to modify fundamental frequency. Don’t worry too much about what this means - just try different numbers out!</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_saw": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Saw Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_saw</span></pre></code></p>\n<p>A saw wave passed through a low pass filter which modulates between two separate notes via a variety of control waves.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_dsaw": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Detuned Saw Waves</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#detune\">detune:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_dsaw</span></pre></code></p>\n<p>A pair of detuned saw waves (see the dsaw synth) which are modulated between two fixed notes at a given rate.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"detune\"></a>\n<tr>\n <td class=\"even key\">detune:</td>\n <td class=\"even\">\n<p>Distance (in MIDI notes) between components of sound. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 create a thick sound. Larger values such as 0.5 make the tuning sound strange. Even bigger values such as 5 create chord-like sounds.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_sine": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Sine Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_sine</span></pre></code></p>\n<p>A sine wave passed through a low pass filter which modulates between two separate notes via a variety of control waves.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_beep": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Sine Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_beep</span></pre></code></p>\n<p>A sine wave passed through a low pass filter which modulates between two separate notes via a variety of control waves.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_tri": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Triangle Wave</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_tri</span></pre></code></p>\n<p>A triangle wave passed through a low pass filter which modulates between two separate notes via a variety of control waves.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mod_pulse": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Modulated Pulse</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_phase\">mod_phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#mod_range\">mod_range:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#mod_pulse_width\">mod_pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#mod_phase_offset\">mod_phase_offset:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#mod_invert_wave\">mod_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mod_wave\">mod_wave:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:mod_pulse</span></pre></code></p>\n<p>A pulse wave with a low pass filter modulating between two notes via a variety of control waves (see mod_wave: arg). The pulse wave defaults to a square wave, but the timbre can be changed dramatically by adjusting the pulse_width arg between 0 and 1.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase\"></a>\n<tr>\n <td class=\"even key\">mod_phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of oscillations between the two notes. Time it takes to switch between the notes.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"mod_range\"></a>\n<tr>\n <td class=\"odd key\">mod_range:</td>\n <td class=\"odd\">\n<p>The size of gap between modulation notes. A gap of 12 is one octave.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_pulse_width\"></a>\n<tr>\n <td class=\"even key\">mod_pulse_width:</td>\n <td class=\"even\">\n<p>The width of the modulated pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Only valid if mod wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_phase_offset\"></a>\n<tr>\n <td class=\"odd key\">mod_phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"mod_invert_wave\"></a>\n<tr>\n <td class=\"even key\">mod_invert_wave:</td>\n <td class=\"even\">\n<p>Invert mod waveform (i.e. flip it on the y axis). 0=normal wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mod_wave\"></a>\n<tr>\n <td class=\"odd key\">mod_wave:</td>\n <td class=\"odd\">\n<p>Wave shape of mod wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "chiplead": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Chip Lead</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">60</td>\n<td class=\"even\"><a href=\"#note_resolution\">note_resolution:</a></td>\n<td class=\"odd\">0.1</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr><tr><td class=\"even\"><a href=\"#width\">width:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:chiplead</span></pre></code></p>\n<p>A slightly clipped square (pulse) wave with phases of 12.5%, 25% or 50% modelled after the 2A03 chip found in voices 1 and 2 of the NES games console. This can be used for retro sounding leads and harmonised lines. This also adds an opt ‘note_resolution’ which locks the note slide to certain pitches which are multiples of the step size. This allows for emulation of the sweep setting on the 2A03.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 60\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"note_resolution\"></a>\n<tr>\n <td class=\"odd key\">note_resolution:</td>\n <td class=\"odd\">\n<p>Locks down the note resolution to be multiples of this (MIDI) number. For example, a <code>note_resolution:</code> of 1 will only allow semitones to be played. When used in conjunction with <code>note_slide:</code> produces a staircase of notes rather than a continuous line which is how things were on the NES. Set to 0 to disable. This wasn’t a feature of this triangle (bass) channel on the original chip but some emulators have added it in since.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"width\"></a>\n<tr>\n <td class=\"even key\">width:</td>\n <td class=\"even\">\n<p>Which of the three pulse_widths to use - 0 =&gt; 12.5%, 1 =&gt; 25%, 2 =&gt; 50%</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1, 2]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "chipbass": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Chip Bass</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">60</td>\n<td class=\"even\"><a href=\"#note_resolution\">note_resolution:</a></td>\n<td class=\"odd\">0.1</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:chipbass</span></pre></code></p>\n<p>A 16 step triangle wave modelled after the 2A03 chip found in voice 3 of the NES games console. This can be used for retro sounding basslines. For complete authenticity with the 2A03 bear in mind that the triangle channel on that chip didn’t have a volume control.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 60\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"note_resolution\"></a>\n<tr>\n <td class=\"odd key\">note_resolution:</td>\n <td class=\"odd\">\n<p>Locks down the note resolution to be multiples of this (MIDI) number. For example, a <code>note_resolution:</code> of 1 will only allow semitones to be played. When used in conjunction with <code>note_slide:</code> produces a staircase of notes rather than a continuous line which is how things were on the NES. Set to 0 to disable. This wasn’t a feature of this triangle (bass) channel on the original chip but some emulators have added it in since.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "tb303": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>TB-303 Emulation</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">120</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff_min\">cutoff_min:</a></td>\n<td class=\"odd\">30</td>\n<td class=\"even\"><a href=\"#cutoff_attack\">cutoff_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#cutoff_decay\">cutoff_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#cutoff_sustain\">cutoff_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff_release\">cutoff_release:</a></td>\n<td class=\"odd\">release</td>\n<td class=\"even\"><a href=\"#cutoff_attack_level\">cutoff_attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#cutoff_decay_level\">cutoff_decay_level:</a></td>\n<td class=\"odd\">cutoff_sustain_level</td>\n<td class=\"even\"><a href=\"#cutoff_sustain_level\">cutoff_sustain_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.9</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:tb303</span></pre></code></p>\n<p>Emulation of the classic Roland TB-303 Bass Line synthesiser. Overdrive the res (i.e. use very large values) for that classic late 80s acid sound.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>The maximum cutoff value as a MIDI note</p>\n  <p class=\"properties\">\n   Default: 120\n   <br/>Must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_min\"></a>\n<tr>\n <td class=\"even key\">cutoff_min:</td>\n <td class=\"even\">\n<p>The minimum cutoff value.</p>\n  <p class=\"properties\">\n   Default: 30\n   <br/>Must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_attack\"></a>\n<tr>\n <td class=\"odd key\">cutoff_attack:</td>\n <td class=\"odd\">\n<p>Attack time for cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope’s attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_decay\"></a>\n<tr>\n <td class=\"even key\">cutoff_decay:</td>\n <td class=\"even\">\n<p>Decay time for cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope’s decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_sustain\"></a>\n<tr>\n <td class=\"odd key\">cutoff_sustain:</td>\n <td class=\"odd\">\n<p>Amount of time for cutoff value to remain at sustain level in beats. Default value is set to match amp envelope’s sustain value.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_release\"></a>\n<tr>\n <td class=\"even key\">cutoff_release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from cutoff sustain value to cutoff min value. Default value is set to match amp envelope’s release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_attack_level\"></a>\n<tr>\n <td class=\"odd key\">cutoff_attack_level:</td>\n <td class=\"odd\">\n<p>The peak cutoff (value of cutoff at peak of attack) as a value between 0 and 1 where 0 is the :cutoff_min and 1 is the :cutoff value</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_decay_level\"></a>\n<tr>\n <td class=\"even key\">cutoff_decay_level:</td>\n <td class=\"even\">\n<p>The level of cutoff after the decay phase as a value between 0 and 1 where 0 is the :cutoff_min and 1 is the :cutoff value</p>\n  <p class=\"properties\">\n   Default: cutoff_sustain_level\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_sustain_level\"></a>\n<tr>\n <td class=\"odd key\">cutoff_sustain_level:</td>\n <td class=\"odd\">\n<p>The sustain cutoff (value of cutoff at sustain time) as a value between 0 and 1 where 0 is the :cutoff_min and 1 is the :cutoff value.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.9\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"odd key\">wave:</td>\n <td class=\"odd\">\n<p>Wave type - 0 saw, 1 pulse, 2 triangle. Different waves will produce different sounds.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1, 2]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "supersaw": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Supersaw</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">130</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.7</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:supersaw</span></pre></code></p>\n<p>Thick swirly saw waves sparkling and moving about to create a rich trancy sound.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "hoover": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Hoover</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0.05</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">130</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:hoover</span></pre></code></p>\n<p>Classic early 90’s rave synth - ‘a sort of slurry chorussy synth line like the classic Dominator by Human Resource’. Based on Dan Stowell’s implementation in SuperCollider and Daniel Turczanski’s port to Overtone. Works really well with portamento (see docs for the ‘control’ method).</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0.05\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "prophet": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>The Prophet</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.7</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:prophet</span></pre></code></p>\n<p>Dark and swirly, this synth uses Pulse Width Modulation (PWM) to create a timbre which continually moves around. This effect is created using the pulse ugen which produces a variable width square wave. We then control the width of the pulses using a variety of LFOs - sin-osc and lf-tri in this case. We use a number of these LFO modulated pulse ugens with varying LFO type and rate (and phase in some cases) to provide the LFO with a different starting point. We then mix all these pulses together to create a thick sound and then feed it through a resonant low pass filter (rlpf). For extra bass, one of the pulses is an octave lower (half the frequency) and its LFO has a little bit of randomisation thrown into its frequency component for that extra bit of variety.</p>\n\n<p>Synth design adapted from:\nThe Prophet Speaks (page 2)\nSteal This Sound,  Mitchell Sigman</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "zawa": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Zawa</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.9</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">3</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#range\">range:</a></td>\n<td class=\"odd\">24</td>\n<td class=\"even\"><a href=\"#disable_wave\">disable_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:zawa</span></pre></code></p>\n<p>Saw wave with oscillating timbre. Produces moving saw waves with a unique character controllable with the control oscillator (usage similar to mod synths).</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.9\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of timbre modulation.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"odd key\">phase_offset:</td>\n <td class=\"odd\">\n<p>Initial phase offset of the sync wave (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"even key\">wave:</td>\n <td class=\"even\">\n<p>Wave shape controlling freq sync saw wave. 0=saw wave, 1=pulse, 2=triangle wave and 3=sine wave.</p>\n  <p class=\"properties\">\n   Default: 3\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"odd key\">invert_wave:</td>\n <td class=\"odd\">\n<p>Invert sync freq control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"range\"></a>\n<tr>\n <td class=\"even key\">range:</td>\n <td class=\"even\">\n<p>Range of the associated sync saw in MIDI notes from the main note. Modifies timbre.</p>\n  <p class=\"properties\">\n   Default: 24\n   <br/>Must be a value between 0 and 90 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"disable_wave\"></a>\n<tr>\n <td class=\"odd key\">disable_wave:</td>\n <td class=\"odd\">\n<p>Enable and disable sync control wave (setting to 1 will stop timbre movement).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"even key\">pulse_width:</td>\n <td class=\"even\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "dark_ambience": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Dark Ambience</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.7</td>\n<td class=\"even\"><a href=\"#detune1\">detune1:</a></td>\n<td class=\"odd\">12</td>\n<td class=\"even\"><a href=\"#detune2\">detune2:</a></td>\n<td class=\"odd\">24</td>\n<td class=\"even\"><a href=\"#noise\">noise:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#ring\">ring:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#room\">room:</a></td>\n<td class=\"odd\">70</td>\n<td class=\"even\"><a href=\"#reverb_time\">reverb_time:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:dark_ambience</span></pre></code></p>\n<p>A slow rolling bass with a sparkle of light trying to escape the darkness. Great for an ambient sound.</p>\n\n<p class=\"introduced\">Introduced in v2.4</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"detune1\"></a>\n<tr>\n <td class=\"odd key\">detune1:</td>\n <td class=\"odd\">\n<p>Distance (in MIDI notes) between the main note and the second component of sound. Affects thickness, sense of tuning and harmony.</p>\n  <p class=\"properties\">\n   Default: 12\n   <br/>Can not be changed once set\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"detune2\"></a>\n<tr>\n <td class=\"even key\">detune2:</td>\n <td class=\"even\">\n<p>Distance (in MIDI notes) between the main note and the third component of sound. Affects thickness, sense of tuning and harmony. Tiny values such as 0.1 create a thick sound.</p>\n  <p class=\"properties\">\n   Default: 24\n   <br/>Can not be changed once set\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"noise\"></a>\n<tr>\n <td class=\"odd key\">noise:</td>\n <td class=\"odd\">\n<p>Noise source. Has a subtle effect on the timbre of the sound. 0=pink noise (the default), 1=brown noise, 2=white noise, 3=clip noise and 4=grey noise</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1, 2, 3, 4]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"ring\"></a>\n<tr>\n <td class=\"even key\">ring:</td>\n <td class=\"even\">\n<p>Amount of ring in the sound. Lower values create a more rough sound, higher values produce a sound with more focus.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>Must be a value between 0.1 and 50 inclusively\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"room\"></a>\n<tr>\n <td class=\"odd key\">room:</td>\n <td class=\"odd\">\n<p>Room size in squared metres used to calculate the reverb.</p>\n  <p class=\"properties\">\n   Default: 70\n   <br/>Must be a value greater than or equal to 0.1,must be a value less than or equal to 300\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"reverb_time\"></a>\n<tr>\n <td class=\"even key\">reverb_time:</td>\n <td class=\"even\">\n<p>How long in beats the reverb should go on for.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "growl": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Growl</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0.1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">130</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.7</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:growl</span></pre></code></p>\n<p>A deep rumbling growl with a bright sine shining through at higher notes.</p>\n\n<p class=\"introduced\">Introduced in v2.4</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "hollow": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Hollow</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">90</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.99</td>\n<td class=\"even\"><a href=\"#noise\">noise:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:hollow</span></pre></code></p>\n<p>A hollow breathy sound constructed from random noise</p>\n\n<p class=\"introduced\">Introduced in v2.4</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 90\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Only functional if a cutoff value is specified. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.99\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"noise\"></a>\n<tr>\n <td class=\"odd key\">noise:</td>\n <td class=\"odd\">\n<p>Noise source. Has a subtle effect on the timbre of the sound. 0=pink noise, 1=brown noise (the default), 2=white noise, 3=clip noise and 4=grey noise</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3, 4]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"even\">\n<p>Normalise the audio (make quieter parts of the synth’s sound louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "blade": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Blade Runner style strings</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr><tr><td class=\"even\"><a href=\"#vibrato_rate\">vibrato_rate:</a></td>\n<td class=\"odd\">6</td>\n<td class=\"even\"><a href=\"#vibrato_depth\">vibrato_depth:</a></td>\n<td class=\"odd\">0.15</td>\n<td class=\"even\"><a href=\"#vibrato_delay\">vibrato_delay:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#vibrato_onset\">vibrato_onset:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:blade</span></pre></code></p>\n<p>Straight from the 70s, evoking the mists of Blade Runner, this simple electro-style string synth is based on filtered saw waves and a variable vibrato.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"vibrato_rate\"></a>\n<tr>\n <td class=\"even key\">vibrato_rate:</td>\n <td class=\"even\">\n<p>Number of wobbles per second. For realism this should be between 6 and 8, maybe even faster for really high notes.</p>\n  <p class=\"properties\">\n   Default: 6\n   <br/>Must be a value greater than or equal to 0.0,must be a value less than or equal to 20.0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"vibrato_depth\"></a>\n<tr>\n <td class=\"odd key\">vibrato_depth:</td>\n <td class=\"odd\">\n<p>Amount of variation around the central note. 1 is the sensible maximum (but you can go up to 5 if you want a special effect), 0 would mean no vibrato. Works well around 0.15 but you can experiment.</p>\n  <p class=\"properties\">\n   Default: 0.15\n   <br/>Must be a value greater than or equal to 0.0,must be a value less than or equal to 5.0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"vibrato_delay\"></a>\n<tr>\n <td class=\"even key\">vibrato_delay:</td>\n <td class=\"even\">\n<p>How long in seconds before the vibrato kicks in.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"vibrato_onset\"></a>\n<tr>\n <td class=\"odd key\">vibrato_onset:</td>\n <td class=\"odd\">\n<p>How long in seconds before the vibrato reaches full power.</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "piano": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>SynthPiano</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#vel\">vel:</a></td>\n<td class=\"odd\">0.2</td>\n</tr><tr><td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#hard\">hard:</a></td>\n<td class=\"odd\">0.5</td>\n</tr><tr><td class=\"even\"><a href=\"#stereo_width\">stereo_width:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:piano</span></pre></code></p>\n<p>A basic piano synthesiser. Note that due to the plucked nature of this synth the envelope opts such as <code>attack:</code>, <code>sustain:</code> and <code>release:</code> do not work as expected. They can only shorten the natural length of the note, not prolong it.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, 56.5, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code>.</p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater,must be a value less than 231\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"vel\"></a>\n<tr>\n <td class=\"odd key\">vel:</td>\n <td class=\"odd\">\n<p>Velocity of keypress.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. With the piano synth, this opt can only have the effect of shortening the attack phase, not prolonging it.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level). With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"hard\"></a>\n<tr>\n <td class=\"odd key\">hard:</td>\n <td class=\"odd\">\n<p>Hardness of keypress.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"stereo_width\"></a>\n<tr>\n <td class=\"even key\">stereo_width:</td>\n <td class=\"even\">\n<p>Width of the stereo effect (which makes low notes sound towards the left, high notes towards the right). 0 to 1.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "rodeo": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>SynthRodeo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0.8</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#use_chorus\">use_chorus:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#use_compressor\">use_compressor:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">72</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:rodeo</span></pre></code></p>\n<p>Classic 70’s electric piano sound, with built-in compressor and chorus.</p>\n\n<p class=\"introduced\">Introduced in v3.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0.8\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"use_chorus\"></a>\n<tr>\n <td class=\"even key\">use_chorus:</td>\n <td class=\"even\">\n<p>Enable the chorus effect (on by default).</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"use_compressor\"></a>\n<tr>\n <td class=\"odd key\">use_compressor:</td>\n <td class=\"odd\">\n<p>Enable the compressor (on by default).</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 72\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "kalimba": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>SynthKalimba</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">4</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#clickiness\">clickiness:</a></td>\n<td class=\"odd\">0.1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:kalimba</span></pre></code></p>\n<p>A synthesised kalimba (a type of African thumb piano). Note that due to the plucked nature of this synth the envelope opts such as <code>attack:</code>, <code>sustain:</code> and <code>release:</code> do not work as expected. They can only shorten the natural length of the note, not prolong it. Note the default envelope is longer than usual - sustain: 4 and release: 1</p>\n\n<p class=\"introduced\">Introduced in v3.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. With the kalimba synth, this opt can only have the effect of shortening the attack phase, not prolonging it.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level). With the kalimba synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. With the kalimba synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 4\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. With the kalimba synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"clickiness\"></a>\n<tr>\n <td class=\"even key\">clickiness:</td>\n <td class=\"even\">\n<p>Ratio of percussive click to melodic note in the sound. A low clickiness like 0.1 works well - higher values might give the impression that the instrument is being played harder. Very high values (towards 1) will be louder!</p>\n  <p class=\"properties\">\n   Default: 0.1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pluck": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>SynthPluck</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#noise_amp\">noise_amp:</a></td>\n<td class=\"odd\">0.8</td>\n<td class=\"even\"><a href=\"#max_delay_time\">max_delay_time:</a></td>\n<td class=\"odd\">0.125</td>\n</tr><tr><td class=\"even\"><a href=\"#pluck_decay\">pluck_decay:</a></td>\n<td class=\"odd\">30</td>\n<td class=\"even\"><a href=\"#coef\">coef:</a></td>\n<td class=\"odd\">0.3</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:pluck</span></pre></code></p>\n<p>A basic plucked string synthesiser that uses Karplus-Strong synthesis. Note that due to the plucked nature of this synth the envelope opts such as <code>attack:</code>, <code>sustain:</code> and <code>release:</code> do not work as expected. They can only shorten the natural length of the note, not prolong it. Also, the <code>note:</code> opt will only honour whole tones.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code>. Note that the piano synth can only play whole tones such as 60 and does not handle floats such as 60.3</p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level). With the piano synth, this opt can only have the effect of controlling the amp within the natural duration of the note and can not prolong the sound.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"noise_amp\"></a>\n<tr>\n <td class=\"even key\">noise_amp:</td>\n <td class=\"even\">\n<p>Amplitude of source (pink) noise.</p>\n  <p class=\"properties\">\n   Default: 0.8\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"max_delay_time\"></a>\n<tr>\n <td class=\"odd key\">max_delay_time:</td>\n <td class=\"odd\">\n<p>Maximum length of the delay line buffer.</p>\n  <p class=\"properties\">\n   Default: 0.125\n   <br/>Must be a value between 0.125 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"pluck_decay\"></a>\n<tr>\n <td class=\"even key\">pluck_decay:</td>\n <td class=\"even\">\n<p>How long the pluck takes to stabilise on a note. This doesn’t have a dramatic effect on the sound.</p>\n  <p class=\"properties\">\n   Default: 30\n   <br/>Must be a value between 1 and 100 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"coef\"></a>\n<tr>\n <td class=\"odd key\">coef:</td>\n <td class=\"odd\">\n<p>Coefficient of the internal OnePole filter. Values around zero are resonant and bright, values towards 1 sound more dampened and cutoff. It’s a little bit like playing nearer the soundhole/fingerboard for values near zero and more toward the bridge for values approaching one, although this isn’t an exact comparison.</p>\n  <p class=\"properties\">\n   Default: 0.3\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "tech_saws": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>TechSaws</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">52</td>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">130</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.7</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:tech_saws</span></pre></code></p>\n<p>Slightly modified supersaw implementation based on http://sccode.org/1-4YS</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Note to play. Either a MIDI number or a symbol representing a note. For example: <code>30</code>, <code>52</code>, <code>:C</code>, <code>:C2</code>, <code>:Eb4</code>, or <code>:Ds3</code></p>\n  <p class=\"properties\">\n   Default: 52\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp\"></a>\n<tr>\n <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"odd key\">attack_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"odd key\">sustain_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "sound_in": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sound In</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#input\">input:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:sound_in</span></pre></code></p>\n<p>Treat sound card input as a synth. If your audio card has inputs, you may use this synth to feed the incoming audio into Sonic Pi. This synth will read in a single mono audio stream - for example from a standard microphone or guitar. See <code>:sound_in_stereo</code> for a similar synth capable of reading in a stereo signal.</p>\n\n<p>As with all Sonic Pi synths, there is a default envelope which determines the duration of the lifetime of the synth. Therefore, to get a continuous stream of audio, you need to place consecutive calls to this synth in iteration or a <code>live_loop</code>. For example:</p>\n\n<p><code>\nlive_loop :playback do\n</code></p>\n\n<p><code>\n   synth :sound_in, sustain: 8\n</code></p>\n\n<p><code>\n   sleep 8\n</code></p>\n\n<p><code>\nend\n</code></p>\n\n<p>Note that if the microphone and speaker are close together (on a laptop or in a small room) you will potentially get a harsh feedback sound.</p>\n\n<p>Also, note that audio in isn’t yet supported on Raspberry Pi.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"input\"></a>\n<tr>\n <td class=\"even key\">input:</td>\n <td class=\"even\">\n<p>Sound card input channel to obtain audio from. Indexing starts at 1 so input 1 represents the first channel, and channel 2 can be represented by <code>input: 2</code></p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 1\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "sound_in_stereo": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sound In Stereo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#input\">input:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:sound_in_stereo</span></pre></code></p>\n<p>Treat sound card input as a synth. If your audio card has inputs, you may use this synth to feed the incoming audio into Sonic Pi. This synth will read in a stereo audio stream - for example from a stereo microphone or external stereo keyboard. See <code>:sound_in</code> for a similar synth capable of reading in a mono signal. The stereo input is expected to be on consecutive sound card channels.</p>\n\n<p>As with all Sonic Pi synths, there is a default envelope which determines the duration of the lifetime of the synth. Therefore, to get a continuous stream of audio, you need to place consecutive calls to this synth in iteration or a <code>live_loop</code>. For example:</p>\n\n<p><code>\nlive_loop :playback do\n</code></p>\n\n<p><code>\n   synth :sound_in_stereo, sustain: 8\n</code></p>\n\n<p><code>\n   sleep 8\n</code></p>\n\n<p><code>\nend\n</code></p>\n\n<p>Note that if the microphone and speaker are close together (on a laptop or in a small room) you will potentially get a harsh feedback sound.</p>\n\n<p>Also, note that audio in isn’t yet supported on Raspberry Pi.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"input\"></a>\n<tr>\n <td class=\"even key\">input:</td>\n <td class=\"even\">\n<p>First of two consecutive sound card input channels to obtain audio from. Indexing starts at 1 so input 1 represents the first channel, and channel 2 can be represented by <code>input: 2</code></p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 1\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "noise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:noise</span></pre></code></p>\n<p>Noise that contains equal amounts of energy at every frequency - comparable to radio static. Useful for generating percussive sounds such as snares and hand claps. Also useful for simulating wind or sea effects.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pnoise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pink Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:pnoise</span></pre></code></p>\n<p>Noise whose spectrum falls off in power by 3 dB per octave. Useful for generating percussive sounds such as snares and hand claps. Also useful for simulating wind or sea effects.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "bnoise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Brown Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:bnoise</span></pre></code></p>\n<p>Noise whose spectrum falls off in power by 6 dB per octave. Useful for generating percussive sounds such as snares and hand claps. Also useful for simulating wind or sea effects.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "gnoise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Grey Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:gnoise</span></pre></code></p>\n<p>Generates noise which results from flipping random bits in a word. The spectrum is emphasised towards lower frequencies. Useful for generating percussive sounds such as snares and hand claps. Also useful for simulating wind or sea effects.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "cnoise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Clip Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">110</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:cnoise</span></pre></code></p>\n<p>Generates noise whose values are either -1 or 1. This produces the maximum energy for the least peak to peak amplitude. Useful for generating percussive sounds such as snares and hand claps. Also useful for simulating wind or sea effects.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 110\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "chipnoise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Chip Noise</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n</tr><tr><td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#freq_band\">freq_band:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>use_synth <span class=\"symbol\">:chipnoise</span></pre></code></p>\n<p>Generates noise whose values are either -1 or 1 (like a pulse or square wave) with one of 16 particular frequencies. This is similar to the noise channel on the 2A03 chip used in the NES games console, although it lacks the same Pseudo-Random Number Generator (PRNG) and doesn’t implement the 2A03’s lesser used noise mode. The amplitude envelope defaults to moving by step to keep that 16 bit feel and this synth also has a slight soft clipping to better imitate the original sound of the device. Use for retro effects, hand claps, snare drums and hi-hats.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"odd key\">pan:</td>\n <td class=\"odd\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently. Full length of sound is attack + decay + sustain + release.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [1, 2, 3, 4, 6, 7]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"freq_band\"></a>\n<tr>\n <td class=\"even key\">freq_band:</td>\n <td class=\"even\">\n<p>Which of the 16 frequency bands to use, from 0 to 15. These range from 220Hz to 225kHz as on the original chip. This arg will accept floats but round to the nearest integer to allow for sweeping through the 16 set points with envelopes.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 15 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n"
    },
    "fx": {
      "bitcrusher": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Bitcrusher</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#sample_rate\">sample_rate:</a></td>\n<td class=\"odd\">10000</td>\n<td class=\"even\"><a href=\"#bits\">bits:</a></td>\n<td class=\"odd\">8</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:bitcrusher</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Creates lo-fi output by decimating and deconstructing the incoming audio by lowering both the sample rate and bit depth. The default sample rate for CD audio is 44100, so use values less than that for that crunchy chip-tune sound full of artefacts and bitty distortion. Similarly, the default bit depth for CD audio is 16, so use values less than that for lo-fi sound.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"sample_rate\"></a>\n<tr>\n <td class=\"even key\">sample_rate:</td>\n <td class=\"even\">\n<p>The sample rate the audio will be resampled at. This represents the number of times per second the audio is sampled. The higher the sample rate, the closer to the original the sound will be, the lower the more low-fi it will sound. The highest sample rate is 44100 (full quality) and the lowest is ~100 (extremely low quality). Try values in between such as 1000, 3000, 8000…</p>\n  <p class=\"properties\">\n   Default: 10000\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"bits\"></a>\n<tr>\n <td class=\"odd key\">bits:</td>\n <td class=\"odd\">\n<p>The bit depth of the resampled audio. Lower bit depths make the audio sound grainy and less defined. The highest bit depth is 16 (full quality) and the lowest is 1 (lowest quality).</p>\n  <p class=\"properties\">\n   Default: 8\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "krush": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>krush</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#gain\">gain:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:krush</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Krush that sound!</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"gain\"></a>\n<tr>\n <td class=\"even key\">gain:</td>\n <td class=\"even\">\n<p>Amount of crushing to serve</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"odd key\">cutoff:</td>\n <td class=\"odd\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "reverb": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reverb</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">0.4</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#room\">room:</a></td>\n<td class=\"odd\">0.6</td>\n<td class=\"even\"><a href=\"#damp\">damp:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:reverb</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Make the incoming signal sound more spacious or distant as if it were played in a large room or cave. Signal may also be dampened by reducing the amplitude of the higher frequencies.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 0.4\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"room\"></a>\n<tr>\n <td class=\"even key\">room:</td>\n <td class=\"even\">\n<p>The room size - a value between 0 (no reverb) and 1 (maximum reverb).</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"damp\"></a>\n<tr>\n <td class=\"odd key\">damp:</td>\n <td class=\"odd\">\n<p>High frequency dampening - a value between 0 (no dampening) and 1 (maximum dampening)</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "gverb": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>GVerb</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#spread\">spread:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#damp\">damp:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#pre_damp\">pre_damp:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#dry\">dry:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#room\">room:</a></td>\n<td class=\"odd\">10</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">3</td>\n<td class=\"even\"><a href=\"#ref_level\">ref_level:</a></td>\n<td class=\"odd\">0.7</td>\n<td class=\"even\"><a href=\"#tail_level\">tail_level:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:gverb</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Make the incoming signal sound more spacious or distant as if it were played in a large room or cave. Similar to reverb but with a more spacious feel.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"spread\"></a>\n<tr>\n <td class=\"even key\">spread:</td>\n <td class=\"even\">\n<p>Stereo spread. Amount of stereo spread the reverb has over the left and right channels. A value of 0 means no spread at all - left and right stereo values of the incoming signal are preserved. A value of 1 means full spread - the left and right channels are fully mixed within the reverb - bleeding into each other.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"damp\"></a>\n<tr>\n <td class=\"odd key\">damp:</td>\n <td class=\"odd\">\n<p>High frequency rolloff. 0 is no damping (the reverb will ring out more) and 1 dampens the reverb signal completely</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_damp\"></a>\n<tr>\n <td class=\"even key\">pre_damp:</td>\n <td class=\"even\">\n<p>High frequency rolloff of input signal. 0 is no damping (the reverb will ring out more) and 1 dampens the reverb signal completely</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"dry\"></a>\n<tr>\n <td class=\"odd key\">dry:</td>\n <td class=\"odd\">\n<p>Amount of original dry signal present in the effect. This is distinct from mix.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"room\"></a>\n<tr>\n <td class=\"even key\">room:</td>\n <td class=\"even\">\n<p>The room size in squared metres</p>\n  <p class=\"properties\">\n   Default: 10\n   <br/>Must be a value greater than or equal to 1\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Time for reverberation to complete in seconds</p>\n  <p class=\"properties\">\n   Default: 3\n   <br/>Must be a value greater than 0\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"ref_level\"></a>\n<tr>\n <td class=\"even key\">ref_level:</td>\n <td class=\"even\">\n<p>Reflection level</p>\n  <p class=\"properties\">\n   Default: 0.7\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"tail_level\"></a>\n<tr>\n <td class=\"odd key\">tail_level:</td>\n <td class=\"odd\">\n<p>Tail level amount</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "level": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Level Amplifier</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:level</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Amplitude modifier. All FX have their own amp built in, so it may be the case that you don’t specifically need an isolated amp FX. However, it is useful to be able to control the overall amplitude of a number of running synths. All sounds created in the FX block will have their amplitudes multipled by the amp level of this FX. For example, use an amp of 0 to silence all internal synths.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "mono": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Mono</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:mono</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Sum left and right channels. Useful with stereo samples that you need as a mono sound, or for use with panslicer.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "autotuner": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Autotuner</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#note\">note:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#formant_ratio\">formant_ratio:</a></td>\n<td class=\"odd\">1.0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:autotuner</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Autotune/phase vocoder effect. Used without any arguments, it tries to detect the pitch and shift it to the nearest exact note. This can help with out of tune singing, but it’s also an interesting effect in its own right. When used with the note: arg, it tries to shift the input to match that note instead. This gives that classic “robot singing” sound that people associate with vocoders. This can then be changed using the control method to create new melodies.</p>\n\n<p><code>\nwith_fx :autotuner do |c|\n</code></p>\n\n<p><code>\n  sample \"~/Downloads/acappella.wav\" # any sample with a voice is good\n</code></p>\n\n<p><code>\n  sleep 4\n</code></p>\n\n<p><code>\n  # listen to standard auto-tune behaviour for 4 seconds\n</code></p>\n\n<p><code>\n  64.times do\n</code></p>\n\n<p><code>\n     # now start changing note: to get robot voice behaviour\n</code></p>\n\n<p><code>\n     control c, note: (scale :a2, :minor_pentatonic, num_octaves: 2).choose\n</code></p>\n\n<p><code>\n     sleep 0.5\n</code></p>\n\n<p><code>\n  end\n</code></p>\n\n<p><code>\nend\n</code></p>\n\n<p class=\"introduced\">Introduced in v3.2</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"note\"></a>\n<tr>\n <td class=\"even key\">note:</td>\n <td class=\"even\">\n<p>Midi note to shift pitch to. The quality of the sound depends on how stable the pitch of the input is.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 127 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"formant_ratio\"></a>\n<tr>\n <td class=\"odd key\">formant_ratio:</td>\n <td class=\"odd\">\n<p>This effect separates pitched content of an input from the formant sounds (percussive, non-pitched sounds like “ssss” and “ttttt”). Changing the formant ratio shifts the non-pitched sounds - lower pitched formants (0.5) sound like someone with a deep voice, higher values (e.g. 2.0 and above) sound like a high pitched voice.</p>\n  <p class=\"properties\">\n   Default: 1.0\n   <br/>Must be a value between 0 and 10 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "echo": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Echo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#max_phase\">max_phase:</a></td>\n<td class=\"odd\">2</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:echo</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Standard echo with variable phase duration (time between echoes) and decay (length of echo fade out). If you wish to have a phase duration longer than 2s, you need to specify the longest phase duration you’d like with the arg max_phase. Be warned, echo FX with very long phases can consume a lot of memory and take longer to initialise.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The time between echoes in beats.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>The time it takes for the echoes to fade away in beats.</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"max_phase\"></a>\n<tr>\n <td class=\"even key\">max_phase:</td>\n <td class=\"even\">\n<p>The maximum phase duration in beats.</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be greater than zero\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "slicer": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Slicer</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#amp_min\">amp_min:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#amp_max\">amp_max:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr><tr><td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#probability\">probability:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#prob_pos\">prob_pos:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#seed\">seed:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth\">smooth:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth_up\">smooth_up:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#smooth_down\">smooth_down:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:slicer</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Modulates the amplitude of the input signal with a specific control wave and phase duration. With the default pulse wave, slices the signal in and out, with the triangle wave, fades the signal in and out and with the saw wave, phases the signal in and then dramatically out. Control wave may be inverted with the arg invert_wave for more variety.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the resulting effect.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The phase duration (in beats) of the slices</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"amp_min\"></a>\n<tr>\n <td class=\"odd key\">amp_min:</td>\n <td class=\"odd\">\n<p>Minimum amplitude of the slicer</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp_max\"></a>\n<tr>\n <td class=\"even key\">amp_max:</td>\n <td class=\"even\">\n<p>Maximum amplitude of the slicer</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"odd key\">pulse_width:</td>\n <td class=\"odd\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"even key\">phase_offset:</td>\n <td class=\"even\">\n<p>Initial phase offset.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"odd key\">wave:</td>\n <td class=\"odd\">\n<p>Control waveform used to modulate the amplitude. 0=saw, 1=pulse, 2=tri, 3=sine</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"even key\">invert_wave:</td>\n <td class=\"even\">\n<p>Invert control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"probability\"></a>\n<tr>\n <td class=\"odd key\">probability:</td>\n <td class=\"odd\">\n<p>Probability (as a value between 0 and 1) that a given slice will be replaced by the value of the  prob_pos opt (which defaults to 0, i.e. silence)</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"prob_pos\"></a>\n<tr>\n <td class=\"even key\">prob_pos:</td>\n <td class=\"even\">\n<p>Position of the slicer that will be jumped to when the probability test passes as a value between 0 and 1</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"seed\"></a>\n<tr>\n <td class=\"odd key\">seed:</td>\n <td class=\"odd\">\n<p>Seed value for rand num generator used for probability test</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"smooth\"></a>\n<tr>\n <td class=\"even key\">smooth:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next. Allows you to round off harsh edges in the slicer wave which may cause clicks.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_up\"></a>\n<tr>\n <td class=\"odd key\">smooth_up:</td>\n <td class=\"odd\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going up. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_down\"></a>\n<tr>\n <td class=\"even key\">smooth_down:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going down. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "panslicer": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pan Slicer</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#amp_min\">amp_min:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#amp_max\">amp_max:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr><tr><td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#probability\">probability:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#prob_pos\">prob_pos:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#seed\">seed:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth\">smooth:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth_up\">smooth_up:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#smooth_down\">smooth_down:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pan_min\">pan_min:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#pan_max\">pan_max:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:panslicer</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Slice the pan automatically from left to right. Behaves similarly to slicer and wobble FX but modifies stereo panning of sound in left and right speakers. Default slice wave form is square (hard slicing between left and right) however other wave forms can be set with the <code>wave:</code> opt.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the resulting effect.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The phase duration (in beats) of the slices</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"amp_min\"></a>\n<tr>\n <td class=\"odd key\">amp_min:</td>\n <td class=\"odd\">\n<p>write me</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Can not be changed once set\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"amp_max\"></a>\n<tr>\n <td class=\"even key\">amp_max:</td>\n <td class=\"even\">\n<p>write me</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Can not be changed once set\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"odd key\">pulse_width:</td>\n <td class=\"odd\">\n<p>The width of the pulse wave as a value between 0 and 1. A width of 0.5 will produce a square wave. Different values will change the timbre of the sound. Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 exclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"even key\">phase_offset:</td>\n <td class=\"even\">\n<p>Initial phase offset.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"odd key\">wave:</td>\n <td class=\"odd\">\n<p>Control waveform used to modulate the amplitude. 0=saw, 1=pulse, 2=tri, 3=sine</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"even key\">invert_wave:</td>\n <td class=\"even\">\n<p>Invert control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"probability\"></a>\n<tr>\n <td class=\"odd key\">probability:</td>\n <td class=\"odd\">\n<p>Probability (as a value between 0 and 1) that a given slice will be replaced by the value of the  prob_pos opt (which defaults to 0, i.e. silence)</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"prob_pos\"></a>\n<tr>\n <td class=\"even key\">prob_pos:</td>\n <td class=\"even\">\n<p>Position of the slicer that will be jumped to when the probability test passes as a value between 0 and 1</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"seed\"></a>\n<tr>\n <td class=\"odd key\">seed:</td>\n <td class=\"odd\">\n<p>Seed value for rand num generator used for probability test</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"smooth\"></a>\n<tr>\n <td class=\"even key\">smooth:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next. Allows you to round off harsh edges in the slicer wave which may cause clicks.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_up\"></a>\n<tr>\n <td class=\"odd key\">smooth_up:</td>\n <td class=\"odd\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going up. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_down\"></a>\n<tr>\n <td class=\"even key\">smooth_down:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going down. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan_min\"></a>\n<tr>\n <td class=\"odd key\">pan_min:</td>\n <td class=\"odd\">\n<p>Minimum pan value (-1 is the left speaker only)</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan_max\"></a>\n<tr>\n <td class=\"even key\">pan_max:</td>\n <td class=\"even\">\n<p>Maximum pan value (+1 is the right speaker only)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "wobble": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Wobble</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#cutoff_min\">cutoff_min:</a></td>\n<td class=\"odd\">60</td>\n<td class=\"even\"><a href=\"#cutoff_max\">cutoff_max:</a></td>\n<td class=\"odd\">120</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.8</td>\n</tr><tr><td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pulse_width\">pulse_width:</a></td>\n<td class=\"odd\">0.5</td>\n</tr><tr><td class=\"even\"><a href=\"#filter\">filter:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#probability\">probability:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#prob_pos\">prob_pos:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#seed\">seed:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#smooth\">smooth:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth_up\">smooth_up:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#smooth_down\">smooth_down:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:wobble</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Versatile wobble FX. Will repeatedly modulate a range of filters (rlpf, rhpf) between two cutoff values using a range of control wave forms (saw, pulse, tri, sine). You may alter the phase duration of the wobble, and the resonance of the filter. Combines well with the dsaw synth for crazy dub wobbles. Cutoff value is at cutoff_min at the start of phase</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The phase duration (in beats) for filter modulation cycles</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_min\"></a>\n<tr>\n <td class=\"odd key\">cutoff_min:</td>\n <td class=\"odd\">\n<p>Minimum (MIDI) note that filter will move to whilst wobbling. Choose a lower note for a higher range of movement. Full range of movement is the distance between cutoff_max and cutoff_min</p>\n  <p class=\"properties\">\n   Default: 60\n   <br/>Must be zero or greater,must be a value less than 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_max\"></a>\n<tr>\n <td class=\"even key\">cutoff_max:</td>\n <td class=\"even\">\n<p>Maximum (MIDI) note that filter will move to whilst wobbling. Choose a higher note for a higher range of movement. Full range of movement is the distance between cutoff_max and cutoff_min</p>\n  <p class=\"properties\">\n   Default: 120\n   <br/>Must be zero or greater,must be a value less than 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.8\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"even key\">phase_offset:</td>\n <td class=\"even\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"odd key\">wave:</td>\n <td class=\"odd\">\n<p>Wave shape of wobble. Use 0 for saw wave, 1 for pulse, 2 for triangle wave and 3 for a sine wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1, 2, 3]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"even key\">invert_wave:</td>\n <td class=\"even\">\n<p>Invert control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"pulse_width\"></a>\n<tr>\n <td class=\"odd key\">pulse_width:</td>\n <td class=\"odd\">\n<p>Only valid if wave is type pulse.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"filter\"></a>\n<tr>\n <td class=\"even key\">filter:</td>\n <td class=\"even\">\n<p>Filter used for wobble effect. Use 0 for a resonant low pass filter or 1 for a resonant high pass filter</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"probability\"></a>\n<tr>\n <td class=\"odd key\">probability:</td>\n <td class=\"odd\">\n<p>Probability (as a value between 0 and 1) that a given wobble will be replaced by the value of the  prob_pos opt (which defaults to 0, i.e. min_cutoff)</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"prob_pos\"></a>\n<tr>\n <td class=\"even key\">prob_pos:</td>\n <td class=\"even\">\n<p>Position of the wobble that will be jumped to when the probability test passes as a value between 0 and 1</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"seed\"></a>\n<tr>\n <td class=\"odd key\">seed:</td>\n <td class=\"odd\">\n<p>Seed value for rand num generator used for probability test</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"smooth\"></a>\n<tr>\n <td class=\"even key\">smooth:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next. Allows you to round off harsh edges in the slicer wave which may cause clicks.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_up\"></a>\n<tr>\n <td class=\"odd key\">smooth_up:</td>\n <td class=\"odd\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going up. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"smooth_down\"></a>\n<tr>\n <td class=\"even key\">smooth_down:</td>\n <td class=\"even\">\n<p>Amount of time in seconds to transition from the current value to the next only when the value is going down. This smoothing happens before the main smooth mechanism.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "ixi_techno": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Techno from IXI Lang</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">4</td>\n<td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#cutoff_min\">cutoff_min:</a></td>\n<td class=\"odd\">60</td>\n<td class=\"even\"><a href=\"#cutoff_max\">cutoff_max:</a></td>\n<td class=\"odd\">120</td>\n</tr><tr><td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.8</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:ixi_techno</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Moving resonant low pass filter between min and max cutoffs. Great for sweeping effects across long synths or samples.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The phase duration (in beats) for filter modulation cycles</p>\n  <p class=\"properties\">\n   Default: 4\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"odd key\">phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_min\"></a>\n<tr>\n <td class=\"even key\">cutoff_min:</td>\n <td class=\"even\">\n<p>Minimum (MIDI) note that filter will move to whilst wobbling. Choose a lower note for a higher range of movement. Full range of movement is the distance between cutoff_max and cutoff_min</p>\n  <p class=\"properties\">\n   Default: 60\n   <br/>Must be zero or greater,must be a value less than 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff_max\"></a>\n<tr>\n <td class=\"odd key\">cutoff_max:</td>\n <td class=\"odd\">\n<p>Maximum (MIDI) note that filter will move to whilst wobbling. Choose a higher note for a higher range of movement. Full range of movement is the distance between cutoff_max and cutoff_min</p>\n  <p class=\"properties\">\n   Default: 120\n   <br/>Must be zero or greater,must be a value less than 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"even key\">res:</td>\n <td class=\"even\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.8\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "compressor": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Compressor</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:compressor</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it’s quiet. Useful for ensuring the containing signal doesn’t overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"even\">\n<p>Threshold value determining the break point between slope_below and slope_above.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"odd key\">clamp_time:</td>\n <td class=\"odd\">\n<p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"even\">\n<p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"odd key\">slope_below:</td>\n <td class=\"odd\">\n<p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will attenuate and smaller values will magnify the signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"even\">\n<p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "whammy": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Whammy</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#transpose\">transpose:</a></td>\n<td class=\"odd\">12</td>\n<td class=\"even\"><a href=\"#max_delay_time\">max_delay_time:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#deltime\">deltime:</a></td>\n<td class=\"odd\">0.05</td>\n<td class=\"even\"><a href=\"#grainsize\">grainsize:</a></td>\n<td class=\"odd\">0.075</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:whammy</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>A cheap sounding transposition effect, with a slightly robotic edge. Good for adding alien sounds and harmonies to everything from beeps to guitar samples. It’s similar to pitch shift although not as smooth sounding.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"transpose\"></a>\n<tr>\n <td class=\"even key\">transpose:</td>\n <td class=\"even\">\n<p>This is how much to transpose the input, expressed as a midi pitch.</p>\n  <p class=\"properties\">\n   Default: 12\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"max_delay_time\"></a>\n<tr>\n <td class=\"odd key\">max_delay_time:</td>\n <td class=\"odd\">\n<p>The max delay time to be used for the effect. This shouldn’t need to be adjusted.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"deltime\"></a>\n<tr>\n <td class=\"even key\">deltime:</td>\n <td class=\"even\">\n<p>The delay time to be used for the effect. This shouldn’t need to be adjusted.</p>\n  <p class=\"properties\">\n   Default: 0.05\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"grainsize\"></a>\n<tr>\n <td class=\"odd key\">grainsize:</td>\n <td class=\"odd\">\n<p>The size of the initial grain used for transposition. This shouldn’t need to be adjusted.</p>\n  <p class=\"properties\">\n   Default: 0.075\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "rlpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Resonant Low Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:rlpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are higher than the cutoff point (typically the crunchy fizzy harmonic overtones) and keeps the lower parts (typically the bass/mid of the sound). The resonant part of the resonant low pass filter emphasises/resonates the frequencies around the cutoff point. The amount of emphasis is controlled by the res opt with a higher res resulting in greater resonance. High amounts of resonance (rq ~1) can create a whistling sound around the cutoff frequency.</p>\n\n<p>Choose a higher cutoff to keep more of the high frequencies/treble of the sound and a lower cutoff to make the sound more dull and only keep the bass.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nrlpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised Resonant Low Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nrlpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are higher than the cutoff point (typically the crunchy fizzy harmonic overtones) and keeps the lower parts (typically the bass/mid of the sound). The resonant part of the resonant low pass filter emphasises/resonates the frequencies around the cutoff point. The amount of emphasis is controlled by the res opt with a higher res resulting in greater resonance. High amounts of resonance (rq ~1) can create a whistling sound around the cutoff frequency.</p>\n\n<p>Choose a higher cutoff to keep more of the high frequencies/treble of the sound and a lower cutoff to make the sound more dull and only keep the bass.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "rhpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Resonant High Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:rhpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are lower than the cutoff point (typically the bass of the sound) and keeps the higher parts (typically the crunchy fizzy harmonic overtones). The resonant part of the resonant high pass filter emphasises/resonates the frequencies around the cutoff point. The amount of emphasis is controlled by the res opt with a higher res resulting in greater resonance. High amounts of resonance (rq ~1) can create a whistling sound around the cutoff frequency.</p>\n\n<p>Choose a lower cutoff to keep more of the bass/mid and a higher cutoff to make the sound more light and crispy.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nrhpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised Resonant High Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nrhpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are lower than the cutoff point (typically the bass of the sound) and keeps the higher parts (typically the crunchy fizzy harmonic overtones). The resonant part of the resonant high pass filter emphasises/resonates the frequencies around the cutoff point. The amount of emphasis is controlled by the res opt with a higher res resulting in greater resonance. High amounts of resonance (rq ~1) can create a whistling sound around the cutoff frequency.</p>\n\n<p>Choose a lower cutoff to keep more of the bass/mid and a higher cutoff to make the sound more light and crispy.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "hpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>High Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:hpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are lower than the cutoff point (typically the bass of the sound) and keeps the higher parts (typically the crunchy fizzy harmonic overtones). Choose a lower cutoff to keep more of the bass/mid and a higher cutoff to make the sound more light and crispy.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nhpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised High Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nhpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>A high pass filter chained to a normaliser. Ensures that the signal is both filtered by a standard high pass filter and then normalised to ensure the amplitude of the final output is constant. A high pass filter will reduce the amplitude of the resulting signal (as some of the sound has been filtered out) the normaliser can compensate for this loss (although will also have the side effect of flattening all dynamics). See doc for hpf.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "lpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Low Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:lpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Dampens the parts of the signal that are higher than the cutoff point (typically the crunchy fizzy harmonic overtones) and keeps the lower parts (typically the bass/mid of the sound). Choose a higher cutoff to keep more of the high frequencies/treble of the sound and a lower cutoff to make the sound more dull and only keep the bass.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nlpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised Low Pass Filter.</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#cutoff\">cutoff:</a></td>\n<td class=\"odd\">100</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nlpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>A low pass filter chained to a normaliser. Ensures that the signal is both filtered by a standard low pass filter and then normalised to ensure the amplitude of the final output is constant. A low pass filter will reduce the amplitude of the resulting signal (as some of the sound has been filtered out) the normaliser can compensate for this loss (although will also have the side effect of flattening all dynamics). See doc for lpf.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"cutoff\"></a>\n<tr>\n <td class=\"even key\">cutoff:</td>\n <td class=\"even\">\n<p>MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "normaliser": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normaliser</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#level\">level:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:normaliser</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Raise or lower amplitude of sound to a specified level. Evens out the amplitude of incoming sound across the frequency spectrum by flattening all dynamics.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"level\"></a>\n<tr>\n <td class=\"even key\">level:</td>\n <td class=\"even\">\n<p>The peak output amplitude level at which to normalise the input.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "distortion": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Distortion</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#distort\">distort:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:distortion</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Distorts the signal reducing clarity in favour of raw crunchy noise.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"distort\"></a>\n<tr>\n <td class=\"even key\">distort:</td>\n <td class=\"even\">\n<p>Amount of distortion to be applied (as a value between 0 and 1)</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value greater than or equal to 0,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pan": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pan</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:pan</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Specify where in the stereo field the sound should be heard. A value of -1 for pan will put the sound in the left speaker, a value of 1 will put the sound in the right speaker and values in between will shift the sound accordingly.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "bpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Band Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#centre\">centre:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.6</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:bpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Combines low pass and high pass filters to only allow a ‘band’ of frequencies through. If the band is very narrow (a low res value like 0.0001) then the BPF will reduce the original sound, almost down to a single frequency (controlled by the centre opt).</p>\n\n<p>With higher values for res we can simulate other filters e.g. telephone lines, by cutting off low and high frequencies.</p>\n\n<p>Use FX <code>:band_eq</code> with a negative db for the opposite effect - to attenuate a given band of frequencies.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"centre\"></a>\n<tr>\n <td class=\"even key\">centre:</td>\n <td class=\"even\">\n<p>Centre frequency for the filter as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nbpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised Band Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#centre\">centre:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.6</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nbpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Like the Band Pass Filter but normalised. The normaliser is useful here as some volume is lost when filtering the original signal.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"centre\"></a>\n<tr>\n <td class=\"even key\">centre:</td>\n <td class=\"even\">\n<p>Centre frequency for the filter as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "rbpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Resonant Band Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#centre\">centre:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:rbpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Like the Band Pass Filter but with a resonance (slight volume boost) around the target frequency. This can produce an interesting whistling effect, especially when used with larger values for the res opt.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"centre\"></a>\n<tr>\n <td class=\"even key\">centre:</td>\n <td class=\"even\">\n<p>Centre frequency for the filter as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "nrbpf": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Normalised Resonant Band Pass Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#centre\">centre:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:nrbpf</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Like the Band Pass Filter but normalised, with a resonance (slight volume boost) around the target frequency. This can produce an interesting whistling effect, especially when used with larger values for the res opt.</p>\n\n<p>The normaliser is useful here as some volume is lost when filtering the original signal.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"centre\"></a>\n<tr>\n <td class=\"even key\">centre:</td>\n <td class=\"even\">\n<p>Centre frequency for the filter as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Filter resonance as a value between 0 and 1. Large amounts of resonance (a res: near 1) can create a whistling sound around the cutoff frequency. Smaller values produce less resonance.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "band_eq": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Band EQ Filter</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#freq\">freq:</a></td>\n<td class=\"odd\">100</td>\n<td class=\"even\"><a href=\"#res\">res:</a></td>\n<td class=\"odd\">0.6</td>\n<td class=\"even\"><a href=\"#db\">db:</a></td>\n<td class=\"odd\">0.6</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:band_eq</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Attenuate or Boost a frequency band</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"freq\"></a>\n<tr>\n <td class=\"even key\">freq:</td>\n <td class=\"even\">\n<p>Centre frequency of the band in MIDI.</p>\n  <p class=\"properties\">\n   Default: 100\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"res\"></a>\n<tr>\n <td class=\"odd key\">res:</td>\n <td class=\"odd\">\n<p>Width of the band as a value between 0 and 1</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be zero or greater,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"db\"></a>\n<tr>\n <td class=\"even key\">db:</td>\n <td class=\"even\">\n<p>Amount of boost or attenuation of the frequency band. A positive value boosts frequencies in the band, a negative value attenuates them.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "tanh": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Hyperbolic Tangent</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#krunch\">krunch:</a></td>\n<td class=\"odd\">5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:tanh</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Forces all audio through a hyperbolic tangent function which has the effect of acting like distorted limiter. It works by folding loud signals back in on itself. The louder the input signal, the more folding occurs - resulting in increased strange harmonics and distortion. This folding also has the effect of limiting the outgoing signal, therefore to increase the output amplitude use the <code>amp:</code> opt and to increase the folding/distortion use the <code>pre_amp:</code> opt.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"krunch\"></a>\n<tr>\n <td class=\"even key\">krunch:</td>\n <td class=\"even\">\n<p>Higher values progressively destroy the sound. Achieved through a balanced manipulation of pre_amp and amp such that the tanh is pushed harder with higher krunch values yet the overall amplitude stays similar.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "pitch_shift": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pitch shift</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:pitch_shift</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Changes the pitch of a signal without affecting tempo. Does this mainly through the pitch parameter which takes a midi number to transpose by. You can also play with the other params to produce some interesting textures and sounds.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"even\">\n<p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.</p>\n\n<p>The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>Must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"even\">\n<p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to “soften up” the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"odd key\">time_dis:</td>\n <td class=\"odd\">\n<p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won’t have an effect if it’s larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>Must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "ring_mod": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ring Modulator</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#freq\">freq:</a></td>\n<td class=\"odd\">30</td>\n<td class=\"even\"><a href=\"#mod_amp\">mod_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:ring_mod</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Attack of the Daleks! Ring mod is a classic effect often used on soundtracks to evoke robots or aliens as it sounds hollow or metallic. We take a ‘carrier’ signal (a sine wave controlled by the freq opt) and modulate its amplitude using the signal given inside the fx block. This produces a wide variety of sounds - the best way to learn is to experiment!</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"freq\"></a>\n<tr>\n <td class=\"even key\">freq:</td>\n <td class=\"even\">\n<p>Frequency of the carrier signal (as a midi note).</p>\n  <p class=\"properties\">\n   Default: 30\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mod_amp\"></a>\n<tr>\n <td class=\"odd key\">mod_amp:</td>\n <td class=\"odd\">\n<p>Amplitude of the modulation</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "octaver": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Octaver</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#super_amp\">super_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#sub_amp\">sub_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#subsub_amp\">subsub_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:octaver</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>This effect adds three pitches based on the input sound. The first is the original sound transposed up an octave (super_amp), the second is the original sound transposed down an octave (sub_amp) and the third is the original sound transposed down two octaves (subsub_amp).</p>\n\n<p>The way the transpositions are done adds some distortion/fuzz, particularly to the lower octaves, whilst the upper octave has a ‘cheap’ quality. This effect is often used in guitar effects pedals but it can work with other sounds too. There’s a great description of the science behind this on Wikipedia here: https://en.wikipedia.org/wiki/Octave_effect</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"super_amp\"></a>\n<tr>\n <td class=\"even key\">super_amp:</td>\n <td class=\"even\">\n<p>Volume of the signal 1 octave above the input</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"sub_amp\"></a>\n<tr>\n <td class=\"odd key\">sub_amp:</td>\n <td class=\"odd\">\n<p>Volume of the signal 1 octave below the input</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"subsub_amp\"></a>\n<tr>\n <td class=\"even key\">subsub_amp:</td>\n <td class=\"even\">\n<p>Volume of the signal 2 octaves below the input</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "vowel": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Vowel</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#vowel_sound\">vowel_sound:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#voice\">voice:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:vowel</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>This effect filters the input to match a human voice singing a certain vowel sound. Human singing voice sounds are easily achieved with a source of a saw wave with a little vibrato.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"vowel_sound\"></a>\n<tr>\n <td class=\"even key\">vowel_sound:</td>\n <td class=\"even\">\n<p>1,2,3,4,5 =&gt; A,E,I,O,U</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be one of the following values: [1, 2, 3, 4, 5]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"voice\"></a>\n<tr>\n <td class=\"odd key\">voice:</td>\n <td class=\"odd\">\n<p>0,1,2,3,4 =&gt; Soprano,Alto,Counter Tenor, Tenor, Bass</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1, 2, 3, 4]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "flanger": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Flanger</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">4</td>\n<td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">4</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#stereo_invert_wave\">stereo_invert_wave:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#delay\">delay:</a></td>\n<td class=\"odd\">5</td>\n<td class=\"even\"><a href=\"#max_delay\">max_delay:</a></td>\n<td class=\"odd\">20</td>\n<td class=\"even\"><a href=\"#depth\">depth:</a></td>\n<td class=\"odd\">5</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#feedback\">feedback:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#invert_flange\">invert_flange:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:flanger</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Mix the incoming signal with a copy of itself which has a rate modulating faster and slower than the original. Creates a swirling/whooshing effect.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of flanger modulation.</p>\n  <p class=\"properties\">\n   Default: 4\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"odd key\">phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"even key\">wave:</td>\n <td class=\"even\">\n<p>Wave type - 0 saw, 1 pulse, 2 triangle, 3 sine, 4 cubic. Different waves will produce different flanging modulation effects.</p>\n  <p class=\"properties\">\n   Default: 4\n   <br/>Must be one of the following values: [0, 1, 2, 3, 4]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"odd key\">invert_wave:</td>\n <td class=\"odd\">\n<p>Invert flanger control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"stereo_invert_wave\"></a>\n<tr>\n <td class=\"even key\">stereo_invert_wave:</td>\n <td class=\"even\">\n<p>Make the flanger control waveform in the left ear an inversion of the control waveform in the right ear. 0=uninverted wave, 1=inverted wave. This happens after the standard wave inversion with param :invert_wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"delay\"></a>\n<tr>\n <td class=\"odd key\">delay:</td>\n <td class=\"odd\">\n<p>Amount of delay time between original and flanged version of audio.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"max_delay\"></a>\n<tr>\n <td class=\"even key\">max_delay:</td>\n <td class=\"even\">\n<p>Max delay time. Used to set internal buffer size.</p>\n  <p class=\"properties\">\n   Default: 20\n   <br/>Must be zero or greater\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"depth\"></a>\n<tr>\n <td class=\"odd key\">depth:</td>\n <td class=\"odd\">\n<p>Flange depth - greater depths produce a more prominent effect.</p>\n  <p class=\"properties\">\n   Default: 5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Flange decay time in ms</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"feedback\"></a>\n<tr>\n <td class=\"odd key\">feedback:</td>\n <td class=\"odd\">\n<p>Amount of feedback.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"invert_flange\"></a>\n<tr>\n <td class=\"even key\">invert_flange:</td>\n <td class=\"even\">\n<p>Invert flanger signal. 0=no inversion, 1=inverted signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "eq": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>EQ</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#low_shelf\">low_shelf:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#low_shelf_note\">low_shelf_note:</a></td>\n<td class=\"odd\">43.349957</td>\n<td class=\"even\"><a href=\"#low_shelf_slope\">low_shelf_slope:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#low\">low:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#low_note\">low_note:</a></td>\n<td class=\"odd\">59.2130948</td>\n<td class=\"even\"><a href=\"#low_q\">low_q:</a></td>\n<td class=\"odd\">0.6</td>\n<td class=\"even\"><a href=\"#mid\">mid:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#mid_note\">mid_note:</a></td>\n<td class=\"odd\">83.2130948</td>\n</tr><tr><td class=\"even\"><a href=\"#mid_q\">mid_q:</a></td>\n<td class=\"odd\">0.6</td>\n<td class=\"even\"><a href=\"#high\">high:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#high_note\">high_note:</a></td>\n<td class=\"odd\">104.9013539</td>\n<td class=\"even\"><a href=\"#high_q\">high_q:</a></td>\n<td class=\"odd\">0.6</td>\n</tr><tr><td class=\"even\"><a href=\"#high_shelf\">high_shelf:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#high_shelf_note\">high_shelf_note:</a></td>\n<td class=\"odd\">114.2326448</td>\n<td class=\"even\"><a href=\"#high_shelf_slope\">high_shelf_slope:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:eq</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Basic parametric EQ</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low_shelf\"></a>\n<tr>\n <td class=\"even key\">low_shelf:</td>\n <td class=\"even\">\n<p>Gain - boost or cut the centre frequency. The low shelf defines the characteristics of the lowest part of the eq FX. A value of 0 will neither boost or cut the low_shelf frequencies. A value of 1 will boost by 15 dB and a value of -1 will cut/attenuate by -15 dB.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low_shelf_note\"></a>\n<tr>\n <td class=\"odd key\">low_shelf_note:</td>\n <td class=\"odd\">\n<p>Centre frequency of low shelf in MIDI notes.</p>\n  <p class=\"properties\">\n   Default: 43.349957\n   <br/>Must be a value greater than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low_shelf_slope\"></a>\n<tr>\n <td class=\"even key\">low_shelf_slope:</td>\n <td class=\"even\">\n<p>Low shelf boost/cut slope. When set to 1 (the default), the shelf slope is as steep as it can be and remain monotonically increasing or decreasing gain with frequency.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 0,must be a value less than or equal to 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low\"></a>\n<tr>\n <td class=\"odd key\">low:</td>\n <td class=\"odd\">\n<p>Gain - boost or cut the centre frequency of the bass part of the sound. The low shelf defines the characteristics of the bass of the eq FX. A value of 0 will neither boost or cut the bass frequencies. A value of 1 will boost by 15 dB and a value of -1 will cut/attenuate by -15 dB.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low_note\"></a>\n<tr>\n <td class=\"even key\">low_note:</td>\n <td class=\"even\">\n<p>Centre frequency of the low eq parameter in MIDI notes.</p>\n  <p class=\"properties\">\n   Default: 59.2130948\n   <br/>Must be a value greater than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"low_q\"></a>\n<tr>\n <td class=\"odd key\">low_q:</td>\n <td class=\"odd\">\n<p>The Q factor for the low eq parameter.</p>\n\n<p>The Q factor controls the width of frequencies that will be affected by the low parameter of this eq FX. A low Q factor gives a wide bandwidth affecting a larger range of frequencies. A high Q factor will give a narrow bandwidth affecting a much smaller range of frequencies.</p>\n\n<p>Here’s a list of various Q factors and an approximate corresponding frequency width:</p>\n\n<p>0.7     -&gt; 2 octaves\n1       -&gt; 1 1/3 octaves\n1.4     -&gt; 1 octave\n2.8     -&gt; 1/2 octave\n4.3     -&gt; 1/3 octave\n8.6     -&gt; 1/6 octave</p>\n\n<p>A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be a value greater than or equal to 0.001,must be a value less than or equal to 100\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mid\"></a>\n<tr>\n <td class=\"even key\">mid:</td>\n <td class=\"even\">\n<p>Gain - boost or cut the centre frequency of the middle part of the sound. The mid shelf defines the characteristics of the bass of the eq FX. A value of 0 will neither boost or cut the bass frequencies. A value of 1 will boost by 15 dB and a value of -1 will cut/attenuate by -15 dB.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mid_note\"></a>\n<tr>\n <td class=\"odd key\">mid_note:</td>\n <td class=\"odd\">\n<p>Centre frequency of the mid eq parameter in MIDI notes.</p>\n  <p class=\"properties\">\n   Default: 83.2130948\n   <br/>Must be a value greater than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mid_q\"></a>\n<tr>\n <td class=\"even key\">mid_q:</td>\n <td class=\"even\">\n<p>The Q factor for the mid eq parameter.</p>\n\n<p>The Q factor controls the width of frequencies that will be affected by the mid parameter of this eq FX. A mid Q factor gives a wide bandwidth affecting a larger range of frequencies. A high Q factor will give a narrow bandwidth affecting a much smaller range of frequencies.</p>\n\n<p>Here’s a list of various Q factors and an approximate corresponding frequency width:</p>\n\n<p>0.7     -&gt; 2 octaves\n1       -&gt; 1 1/3 octaves\n1.4     -&gt; 1 octave\n2.8     -&gt; 1/2 octave\n4.3     -&gt; 1/3 octave\n8.6     -&gt; 1/6 octave</p>\n\n<p>A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be a value greater than or equal to 0.001,must be a value less than or equal to 100\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high\"></a>\n<tr>\n <td class=\"odd key\">high:</td>\n <td class=\"odd\">\n<p>Gain - boost or cut the centre frequency of the high part of the sound. The high shelf defines the characteristics of the treble of the eq FX. A value of 0 will neither boost or cut the treble frequencies. A value of 1 will boost by 15 dB and a value of -1 will cut/attenuate by -15 dB.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high_note\"></a>\n<tr>\n <td class=\"even key\">high_note:</td>\n <td class=\"even\">\n<p>Centre frequency of the high eq parameter in MIDI notes.</p>\n  <p class=\"properties\">\n   Default: 104.9013539\n   <br/>Must be a value greater than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high_q\"></a>\n<tr>\n <td class=\"odd key\">high_q:</td>\n <td class=\"odd\">\n<p>The Q factor for the high eq parameter.</p>\n\n<p>The Q factor controls the width of frequencies that will be affected by the high parameter of this eq FX. A high Q factor gives a wide bandwidth affecting a larger range of frequencies. A high Q factor will give a narrow bandwidth affecting a much smaller range of frequencies.</p>\n\n<p>Here’s a list of various Q factors and an approximate corresponding frequency width:</p>\n\n<p>0.7     -&gt; 2 octaves\n1       -&gt; 1 1/3 octaves\n1.4     -&gt; 1 octave\n2.8     -&gt; 1/2 octave\n4.3     -&gt; 1/3 octave\n8.6     -&gt; 1/6 octave</p>\n\n<p>A decent range of Q factors for naturally sounding boosts/cuts is 0.6 to 1.</p>\n  <p class=\"properties\">\n   Default: 0.6\n   <br/>Must be a value greater than or equal to 0.001,must be a value less than or equal to 100\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high_shelf\"></a>\n<tr>\n <td class=\"even key\">high_shelf:</td>\n <td class=\"even\">\n<p>Gain - boost or cut the centre frequency. The high shelf defines the characteristics of the highest part of the eq FX. A value of 0 will neither boost or cut the high_shelf frequencies. A value of 1 will boost by 15 dB and a value of -1 will cut/attenuate by -15 dB.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high_shelf_note\"></a>\n<tr>\n <td class=\"odd key\">high_shelf_note:</td>\n <td class=\"odd\">\n<p>Centre frequency of high shelf in MIDI notes.</p>\n  <p class=\"properties\">\n   Default: 114.2326448\n   <br/>Must be a value greater than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"high_shelf_slope\"></a>\n<tr>\n <td class=\"even key\">high_shelf_slope:</td>\n <td class=\"even\">\n<p>High shelf boost/cut slope. When set to 1 (the default), the shelf slope is as steep as it can be and remain monotonically increasing or decreasing gain with frequency.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value greater than or equal to 0,must be a value less than or equal to 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "tremolo": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Tremolo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">4</td>\n<td class=\"even\"><a href=\"#phase_offset\">phase_offset:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#wave\">wave:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#invert_wave\">invert_wave:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#depth\">depth:</a></td>\n<td class=\"odd\">0.5</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:tremolo</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Modulate the volume of the sound.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>Phase duration in beats of tremolo modulation.</p>\n  <p class=\"properties\">\n   Default: 4\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"phase_offset\"></a>\n<tr>\n <td class=\"odd key\">phase_offset:</td>\n <td class=\"odd\">\n<p>Initial modulation phase offset (a value between 0 and 1).</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n<a name=\"wave\"></a>\n<tr>\n <td class=\"even key\">wave:</td>\n <td class=\"even\">\n<p>Wave type - 0 saw, 1 pulse, 2 triangle, 3 sine, 4 cubic. Different waves will produce different tremolo modulation effects.</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>Must be one of the following values: [0, 1, 2, 3, 4]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"invert_wave\"></a>\n<tr>\n <td class=\"odd key\">invert_wave:</td>\n <td class=\"odd\">\n<p>Invert tremolo control waveform (i.e. flip it on the y axis). 0=uninverted wave, 1=inverted wave.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>Must be one of the following values: [0, 1]\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"depth\"></a>\n<tr>\n <td class=\"even key\">depth:</td>\n <td class=\"even\">\n<p>Tremolo depth - greater depths produce a more prominent effect.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "record": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Record</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#buffer\">buffer:</a></td>\n<td class=\"odd\"></td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:record</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Recorder!</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"buffer\"></a>\n<tr>\n <td class=\"even key\">buffer:</td>\n <td class=\"even\">\n<p>The buffer to record into. Must either be a buffer object, buffer name, list of buffer name and size or the buffer id as a number.</p>\n  <p class=\"properties\">\n   Default: \n   <br/>Must be a buffer description. such as a buffer, :foo, \"foo\", or [:foo, 4]\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "sound_out": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sound Out</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#output\">output:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mode\">mode:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:sound_out</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Outputs a mono signal to a soundcard output of your choice. By default will mix the incoming stereo signal (generated within the FX block) into a single mono channel. However, with the <code>mode:</code> opt, it is possible to alternatively send either the incoming left or right channel out directly.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"output\"></a>\n<tr>\n <td class=\"even key\">output:</td>\n <td class=\"even\">\n<p>Sound card output to send audio to. Indexing starts at 1, so the third output is output 3.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mode\"></a>\n<tr>\n <td class=\"odd key\">mode:</td>\n <td class=\"odd\">\n<p>Output mixing mode. 0 is a mixed-down mono version of the stereo input, 1 is the left channel only, 2 is the right channel only.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "sound_out_stereo": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sound Out Stereo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#output\">output:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mode\">mode:</a></td>\n<td class=\"odd\">0</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:sound_out_stereo</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Outputs a two-channel stereo signal to two consecutive soundcard outputs of your choice. By default will route the left and right channels of the incoming stereo signal (generated within the FX block) into separate left and right output channels. However, with the <code>mode:</code> opt, it is possible to alternatively cross over the channels or mix the incoming stereo channels into a single mono output and duplicate that on both left and right output channels.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"output\"></a>\n<tr>\n <td class=\"even key\">output:</td>\n <td class=\"even\">\n<p>First of two consecutive sound card outputs to send audio to. Indexing starts at 1 and two outputs are used. Therefore an output of 2 will send audio to both outputs 2 and 3</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n<a name=\"mode\"></a>\n<tr>\n <td class=\"odd key\">mode:</td>\n <td class=\"odd\">\n<p>Output mixing mode. Mode 0 is standard - left audio on the first channel, right on the second. Mode 1 is inverse - right audio on the first channel, left on the second. Mode 2 is mono - a mixed mono version of both channels is sent to both audio outputs.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>May be changed whilst playing\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "ping_pong": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ping Pong Echo</h1>\n\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#mix\">mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_mix\">pre_mix:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#phase\">phase:</a></td>\n<td class=\"odd\">0.25</td>\n<td class=\"even\"><a href=\"#feedback\">feedback:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#max_phase\">max_phase:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan_start\">pan_start:</a></td>\n<td class=\"odd\">1</td>\n</tr></table></p>\n\n<p class=\"usage\"><code><pre>with_fx <span class=\"symbol\">:ping_pong</span> <span class=\"keyword\">do</span>\n  play <span class=\"number\">50</span>\n<span class=\"keyword\">end</span></pre></code></p>\n<p>Echo FX with each delayed echo swapping between left and right channels. Has variable phase duration (time between echoes) and feedback (proportion of sound fed into each echo). If you wish to have a phase duration longer than 1s, you need to specify the longest phase duration you’d like with the arg max_phase. Be warned, <code>:ping_pong</code> FX with very long phases can consume a lot of memory and take longer to initialise. Also, large values for feedback will cause the echo to last for a very long time.</p>\n\n<p>Note: sliding the <code>phase:</code> opt with <code>phase_slide:</code> will also cause each echo during the slide to change in pitch, in much the same way that a sample’s pitch changes when altering its rate.</p>\n\n<p class=\"introduced\">Introduced in v3.2</p>\n\n<h2>Options</h2>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won’t make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"mix\"></a>\n<tr>\n <td class=\"odd key\">mix:</td>\n <td class=\"odd\">\n<p>The amount (percentage) of FX present in the resulting sound represented as a value between 0 and 1. For example, a mix of 0 means that only the original sound is heard, a mix of 1 means that only the FX is heard (typically the default) and a mix of 0.5 means that half the original and half of the FX is heard.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between 0 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_mix\"></a>\n<tr>\n <td class=\"even key\">pre_mix:</td>\n <td class=\"even\">\n<p>The amount (percentage) of the original signal that is fed into the internal FX system as a value between 0 and 1. With a pre_mix: of 0 the FX is completely bypassed unlike a mix: of 0 where the internal FX is still being fed the original signal but the output of the FX is ignored. The difference between the two is subtle but important and is evident when the FX has a residual component such as echo or reverb. When switching mix: from 0 to 1, the residual component of the FX’s output from previous audio is present in the output signal. With pre_mix: there is no residual component of the previous audio in the output signal.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"odd key\">pre_amp:</td>\n <td class=\"odd\">\n<p>Amplification applied to the input signal immediately before it is passed to the FX.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"phase\"></a>\n<tr>\n <td class=\"even key\">phase:</td>\n <td class=\"even\">\n<p>The time between echoes in beats.</p>\n  <p class=\"properties\">\n   Default: 0.25\n   <br/>Must be greater than zero\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"feedback\"></a>\n<tr>\n <td class=\"odd key\">feedback:</td>\n <td class=\"odd\">\n<p>Proportion of sound fed into each successive echo from the previous one.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>Must be greater than zero,must be a value less than 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"max_phase\"></a>\n<tr>\n <td class=\"even key\">max_phase:</td>\n <td class=\"even\">\n<p>The maximum phase duration in beats.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be greater than zero\n   <br/>Can not be changed once set\n   <br/>Scaled with current BPM value\n  </p>\n </td>\n</tr>\n<a name=\"pan_start\"></a>\n<tr>\n <td class=\"odd key\">pan_start:</td>\n <td class=\"odd\">\n<p>Starting position of sound in the stereo field. With headphones on, this means how much of the sound starts in the left ear, and how much starts in the right ear. With a value of -1, the sound starts completely in the left ear, a value of 0 starts the sound equally in both ears, and a value of 1 starts the sound completely in the right ear. Values in between -1 and 1 move the sound accordingly. Each echo will swap between left and right at the same distance away from 0 (the centre) that this <code>pan_start:</code> opt is set to. For example, with a value of -1, the sound starts completely in the left ear, and the echoes after this will swap between fully right and fully left (1 and -1). With a value of 0, since the sound starts in the centre of the stereo field, each echo also stays in the centre, meaning the panning effect is cancelled out.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>Must be a value between -1 and 1 inclusively\n   <br/>Can not be changed once set\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n"
    },
    "samples": {
      "Drum Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Drum Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_heavy_kick\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_heavy_kick</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_mid_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_mid_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_mid_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_mid_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_lo_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_lo_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_lo_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_lo_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_hi_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_hi_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_tom_hi_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_tom_hi_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_splash_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_splash_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_splash_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_splash_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_snare_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_snare_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_snare_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_snare_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cymbal_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cymbal_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cymbal_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cymbal_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cymbal_open\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cymbal_open</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cymbal_closed\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cymbal_closed</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cymbal_pedal\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cymbal_pedal</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_bass_soft\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_bass_soft</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_bass_hard\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_bass_hard</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_cowbell\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_cowbell</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/drum_roll\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:drum_roll</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Electric Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Electric Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_triangle\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_triangle</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_snare\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_snare</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_lo_snare\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_lo_snare</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_hi_snare\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_hi_snare</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_mid_snare\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_mid_snare</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_cymbal\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_cymbal</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_soft_kick\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_soft_kick</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_filt_snare\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_filt_snare</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_fuzz_tom\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_fuzz_tom</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_chime\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_chime</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_bong\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_bong</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_twang\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_twang</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_wood\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_wood</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_pop\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_pop</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_beep\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_beep</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_blip\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_blip</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_blip2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_blip2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_ping\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_ping</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_bell\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_bell</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_flip\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_flip</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_tick\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_tick</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_hollow_kick\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_hollow_kick</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_twip\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_twip</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_plip\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_plip</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/elec_blup\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:elec_blup</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Sounds featuring guitars": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Sounds featuring guitars</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/guit_harmonics\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:guit_harmonics</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/guit_e_fifths\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:guit_e_fifths</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/guit_e_slide\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:guit_e_slide</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/guit_em9\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:guit_em9</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Miscellaneous Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Miscellaneous Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/misc_burp\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:misc_burp</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/misc_crow\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:misc_crow</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/misc_cineboom\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:misc_cineboom</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Percussive Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Percussive Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_bell\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_bell</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_bell2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_bell2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_snap\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_snap</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_snap2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_snap2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_swash\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_swash</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_till\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_till</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_door\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_door</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_impact1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_impact1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_impact2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_impact2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/perc_swoosh\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:perc_swoosh</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Ambient Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Ambient Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_soft_buzz\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_soft_buzz</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_swoosh\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_swoosh</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_drone\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_drone</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_glass_hum\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_glass_hum</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_glass_rub\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_glass_rub</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_haunted_hum\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_haunted_hum</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_piano\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_piano</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_lunar_land\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_lunar_land</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_dark_woosh\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_dark_woosh</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_choir\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_choir</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/ambi_sauna\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:ambi_sauna</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Bass Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Bass Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_hit_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_hit_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_hard_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_hard_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_thick_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_thick_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_drop_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_drop_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_woodsy_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_woodsy_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_voxy_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_voxy_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_voxy_hit_c\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_voxy_hit_c</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bass_dnb_f\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bass_dnb_f</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Snare Drums": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Snare Drums</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/sn_dub\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:sn_dub</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/sn_dolf\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:sn_dolf</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/sn_zome\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:sn_zome</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/sn_generic\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:sn_generic</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Bass Drums": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Bass Drums</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_ada\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_ada</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_pure\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_pure</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_808\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_808</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_zum\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_zum</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_gas\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_gas</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_sone\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_sone</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_haus\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_haus</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_zome\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_zome</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_boom\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_boom</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_klub\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_klub</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_fat\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_fat</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_tek\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_tek</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/bd_mehackit\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:bd_mehackit</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Sounds for Looping": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Sounds for Looping</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_industrial\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_industrial</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_compus\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_compus</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_amen\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_amen</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_amen_full\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_amen_full</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_garzul\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_garzul</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_mika\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_mika</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_breakbeat\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_breakbeat</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_safari\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_safari</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_tabla\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_tabla</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_3d_printer\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_3d_printer</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_drone_g_97\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_drone_g_97</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_electric\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_electric</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_mehackit1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_mehackit1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_mehackit2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_mehackit2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_perc1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_perc1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_perc2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_perc2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/loop_weirdo\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:loop_weirdo</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Sounds of a Tabla Drum": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Sounds of a Tabla Drum</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tas1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tas1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tas2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tas2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tas3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tas3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ke1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ke1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ke2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ke2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ke3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ke3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_na\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_na</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_na_o\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_na_o</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tun1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tun1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tun2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tun2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_tun3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_tun3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_te1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_te1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_te2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_te2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_te_ne\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_te_ne</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_te_m\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_te_m</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe4\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe4</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe5\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe5</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe6\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe6</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe7\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe7</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_ghe8\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_ghe8</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_dhec\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_dhec</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_na_s\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_na_s</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/tabla_re\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:tabla_re</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Glitchy Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Glitchy Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_bass_g\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_bass_g</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_perc1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_perc1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_perc2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_perc2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_perc3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_perc3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_perc4\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_perc4</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_perc5\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_perc5</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_robot1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_robot1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/glitch_robot2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:glitch_robot2</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Vinyl sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Vinyl sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/vinyl_backspin\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:vinyl_backspin</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/vinyl_rewind\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:vinyl_rewind</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/vinyl_scratch\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:vinyl_scratch</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/vinyl_hiss\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:vinyl_hiss</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n",
      "Mehackit Sounds": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n\n<h1>Mehackit Sounds</h1>\n<table>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_phone1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_phone1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_phone2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_phone2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_phone3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_phone3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_phone4\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_phone4</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot1\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot1</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot2\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot2</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot3\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot3</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot4\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot4</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot5\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot5</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot6\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot6</span> </pre></code></p></td>\n</tr>\n<tr style=\"vertical-align: middle;padding:5px\">\n<td><a href=\"sonicpi://play-sample/mehackit_robot7\"><img src=\":/images/play.png\" width=\"15\" height=\"16\"></a></td>\n<td><p class=\"usage\"><code><pre> sample <span class=\"symbol\">:mehackit_robot7</span> </pre></code></p></td>\n</tr>\n</table>\n<p><table class=\"arguments\"><tr>\n<td class=\"even\"><a href=\"#amp\">amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pre_amp\">pre_amp:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#pan\">pan:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#attack\">attack:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#decay\">decay:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#sustain\">sustain:</a></td>\n<td class=\"odd\">-1</td>\n<td class=\"even\"><a href=\"#release\">release:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#lpf\">lpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_attack\">lpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#lpf_decay\">lpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#lpf_sustain\">lpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#lpf_release\">lpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_init_level\">lpf_init_level:</a></td>\n<td class=\"odd\">lpf_min</td>\n<td class=\"even\"><a href=\"#lpf_attack_level\">lpf_attack_level:</a></td>\n<td class=\"odd\">lpf_decay_level</td>\n<td class=\"even\"><a href=\"#lpf_decay_level\">lpf_decay_level:</a></td>\n<td class=\"odd\">lpf_sustain_level</td>\n<td class=\"even\"><a href=\"#lpf_sustain_level\">lpf_sustain_level:</a></td>\n<td class=\"odd\">lpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#lpf_release_level\">lpf_release_level:</a></td>\n<td class=\"odd\">lpf</td>\n<td class=\"even\"><a href=\"#lpf_env_curve\">lpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#lpf_min\">lpf_min:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf\">hpf:</a></td>\n<td class=\"odd\">-1</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_attack\">hpf_attack:</a></td>\n<td class=\"odd\">attack</td>\n<td class=\"even\"><a href=\"#hpf_sustain\">hpf_sustain:</a></td>\n<td class=\"odd\">sustain</td>\n<td class=\"even\"><a href=\"#hpf_decay\">hpf_decay:</a></td>\n<td class=\"odd\">decay</td>\n<td class=\"even\"><a href=\"#hpf_release\">hpf_release:</a></td>\n<td class=\"odd\">release</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_init_level\">hpf_init_level:</a></td>\n<td class=\"odd\">130</td>\n<td class=\"even\"><a href=\"#hpf_attack_level\">hpf_attack_level:</a></td>\n<td class=\"odd\">hpf_decay_level</td>\n<td class=\"even\"><a href=\"#hpf_decay_level\">hpf_decay_level:</a></td>\n<td class=\"odd\">hpf_sustain_level</td>\n<td class=\"even\"><a href=\"#hpf_sustain_level\">hpf_sustain_level:</a></td>\n<td class=\"odd\">hpf_release_level</td>\n</tr><tr><td class=\"even\"><a href=\"#hpf_release_level\">hpf_release_level:</a></td>\n<td class=\"odd\">hpf</td>\n<td class=\"even\"><a href=\"#hpf_env_curve\">hpf_env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#hpf_max\">hpf_max:</a></td>\n<td class=\"odd\">200</td>\n<td class=\"even\"><a href=\"#attack_level\">attack_level:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#decay_level\">decay_level:</a></td>\n<td class=\"odd\">sustain_level</td>\n<td class=\"even\"><a href=\"#sustain_level\">sustain_level:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#env_curve\">env_curve:</a></td>\n<td class=\"odd\">2</td>\n<td class=\"even\"><a href=\"#rate\">rate:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#start\">start:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#finish\">finish:</a></td>\n<td class=\"odd\">1</td>\n<td class=\"even\"><a href=\"#norm\">norm:</a></td>\n<td class=\"odd\">0</td>\n<td class=\"even\"><a href=\"#pitch\">pitch:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#window_size\">window_size:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#pitch_dis\">pitch_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#time_dis\">time_dis:</a></td>\n<td class=\"odd\">0.0</td>\n<td class=\"even\"><a href=\"#compress\">compress:</a></td>\n<td class=\"odd\">0</td>\n</tr><tr><td class=\"even\"><a href=\"#threshold\">threshold:</a></td>\n<td class=\"odd\">0.2</td>\n<td class=\"even\"><a href=\"#clamp_time\">clamp_time:</a></td>\n<td class=\"odd\">0.01</td>\n<td class=\"even\"><a href=\"#slope_above\">slope_above:</a></td>\n<td class=\"odd\">0.5</td>\n<td class=\"even\"><a href=\"#slope_below\">slope_below:</a></td>\n<td class=\"odd\">1</td>\n</tr><tr><td class=\"even\"><a href=\"#relax_time\">relax_time:</a></td>\n<td class=\"odd\">0.01</td>\n</tr></table></p>\n<p><table class=\"details\">\n<a name=\"amp\"></a>\n<tr>\n <td class=\"even key\">amp:</td>\n <td class=\"odd\">\n  <p>The amplitude of the sound. Typically a value between 0 and 1. Higher amplitudes may be used, but won't make the sound louder, they will just reduce the quality of all the sounds currently being played (due to compression.)</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pre_amp\"></a>\n<tr>\n <td class=\"even key\">pre_amp:</td>\n <td class=\"odd\">\n  <p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pan\"></a>\n<tr>\n <td class=\"even key\">pan:</td>\n <td class=\"odd\">\n  <p>Position of sound in stereo. With headphones on, this means how much of the sound is in the left ear, and how much is in the right ear. With a value of -1, the sound is completely in the left ear, a value of 0 puts the sound equally in both ears and a value of 1 puts the sound in the right ear. Values in between -1 and 1 move the sound accordingly.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between -1 and 1 inclusively\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack\"></a>\n<tr>\n <td class=\"even key\">attack:</td>\n <td class=\"odd\">\n  <p>Duration of the attack phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay\"></a>\n<tr>\n <td class=\"even key\">decay:</td>\n <td class=\"odd\">\n  <p>Duration of the decay phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain\"></a>\n<tr>\n <td class=\"even key\">sustain:</td>\n <td class=\"odd\">\n  <p>Duration of the sustain phase of the envelope. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"release\"></a>\n<tr>\n <td class=\"even key\">release:</td>\n <td class=\"odd\">\n  <p>Duration of the release phase of the envelope.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf\"></a>\n<tr>\n <td class=\"even key\">lpf:</td>\n <td class=\"odd\">\n  <p>Low pass filter cutoff value. A MIDI note representing the highest frequencies allowed to be present in the sound. A low value like 30 makes the sound round and dull, a high value like 100 makes the sound buzzy and crispy.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 131\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack\"></a>\n<tr>\n <td class=\"even key\">lpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for low pass filter envelope. Amount of time (in beats) for sound to reach attack_level value. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay\"></a>\n<tr>\n <td class=\"even key\">lpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for low pass filter envelope. Amount of time (in beats) for sound to move from `lpf_attack_level:` to the `lpf_sustain_level:`. This envelope is bypassed if no lpf env opts are specified.  Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for low pass filter envelope value to remain at sustain level in beats. This envelope is bypassed if no lpf env opts are specified.  When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release\"></a>\n<tr>\n <td class=\"even key\">lpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from `lpf_sustain_level:` to `lpf_release_level:`. This envelope is bypassed if no lpf env opts are specified. </p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"lpf_init_level\"></a>\n<tr>\n <td class=\"even key\">lpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_min\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak low pass filter envelope value after the attack phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is match the `lpf_decay_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">lpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the decay phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_sustain_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The level of the low pass filter envelope after the sustain phase as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_release_level:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_release_level\"></a>\n<tr>\n <td class=\"even key\">lpf_release_level:</td>\n <td class=\"odd\">\n  <p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.</p>\n  <p class=\"properties\">\n   Default: lpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"lpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">lpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"lpf_min\"></a>\n<tr>\n <td class=\"even key\">lpf_min:</td>\n <td class=\"odd\">\n  <p>The minimum low pass filter value.</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf\"></a>\n<tr>\n <td class=\"even key\">hpf:</td>\n <td class=\"odd\">\n  <p>High pass filter cutoff value. A MIDI note representing the lowest frequencies allowed to be present in the sound. A high value like 100 makes the sound thin and whispy, a low value like 40 removes just the lower bass components of the sound.</p>\n  <p class=\"properties\">\n   Default: -1\n   <br/>must be zero or greater,must be a value less than 119\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack\"></a>\n<tr>\n <td class=\"even key\">hpf_attack:</td>\n <td class=\"odd\">\n  <p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full hpf cutoff value. Default value is set to match amp envelope's attack value.</p>\n  <p class=\"properties\">\n   Default: attack\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain:</td>\n <td class=\"odd\">\n  <p>Amount of time for hpf cutoff value to remain at hpf sustain level in beats. When -1 (the default) will auto-stretch.</p>\n  <p class=\"properties\">\n   Default: sustain\n   <br/>must either be a positive value or -1\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay\"></a>\n<tr>\n <td class=\"even key\">hpf_decay:</td>\n <td class=\"odd\">\n  <p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full hpf cutoff value (cutoff attack level) to the hpf cutoff sustain level. Default value is set to match amp envelope's decay value.</p>\n  <p class=\"properties\">\n   Default: decay\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release\"></a>\n<tr>\n <td class=\"even key\">hpf_release:</td>\n <td class=\"odd\">\n  <p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.</p>\n  <p class=\"properties\">\n   Default: release\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"hpf_init_level\"></a>\n<tr>\n <td class=\"even key\">hpf_init_level:</td>\n <td class=\"odd\">\n  <p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130</p>\n  <p class=\"properties\">\n   Default: 130\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_attack_level\"></a>\n<tr>\n <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"odd\">\n  <p>The peak hpf cutoff (value of hpf cutoff at peak of attack) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_decay_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_decay_level\"></a>\n<tr>\n <td class=\"even key\">hpf_decay_level:</td>\n <td class=\"odd\">\n  <p>The level of hpf cutoff after the decay phase as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_sustain_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_sustain_level\"></a>\n<tr>\n <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf_release_level\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_release_level\"></a>\n<tr>\n <td class=\"even key\">hpf_release_level:</td>\n <td class=\"odd\">\n  <p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note.</p>\n  <p class=\"properties\">\n   Default: hpf\n   <br/>must be a value between 0 and 130 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"hpf_env_curve\"></a>\n<tr>\n <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"hpf_max\"></a>\n<tr>\n <td class=\"even key\">hpf_max:</td>\n <td class=\"odd\">\n  <p>The maximum high pass filter value.</p>\n  <p class=\"properties\">\n   Default: 200\n   <br/>must be a value less than or equal to 130\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"attack_level\"></a>\n<tr>\n <td class=\"even key\">attack_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after attack phase and immediately before decay phase</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"decay_level\"></a>\n<tr>\n <td class=\"even key\">decay_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n  <p class=\"properties\">\n   Default: sustain_level\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"sustain_level\"></a>\n<tr>\n <td class=\"even key\">sustain_level:</td>\n <td class=\"odd\">\n  <p>Amplitude level reached after decay phase and immediately before release phase.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be zero or greater\n  </p>\n </td>\n</tr>\n<a name=\"env_curve\"></a>\n<tr>\n <td class=\"even key\">env_curve:</td>\n <td class=\"odd\">\n  <p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n  <p class=\"properties\">\n   Default: 2\n   <br/>must be one of the following values: [1, 2, 3, 4, 6, 7]\n  </p>\n </td>\n</tr>\n<a name=\"rate\"></a>\n<tr>\n <td class=\"even key\">rate:</td>\n <td class=\"odd\">\n  <p>Rate with which to play back - default is 1. Playing the sample at rate 2 will play it back at double the normal speed. This will have the effect of doubling the frequencies in the sample and halving the playback time. Use rates lower than 1 to slow the sample down. Negative rates will play the sample in reverse.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must not be zero\n  </p>\n </td>\n</tr>\n<a name=\"start\"></a>\n<tr>\n <td class=\"even key\">start:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to start playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"finish\"></a>\n<tr>\n <td class=\"even key\">finish:</td>\n <td class=\"odd\">\n  <p>A fraction (between 0 and 1) representing where in the sample to finish playback. 1 represents the end of the sample, 0.5 half-way through etc.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>must be a value between 0 and 1 inclusively\n  </p>\n </td>\n</tr>\n<a name=\"norm\"></a>\n<tr>\n <td class=\"even key\">norm:</td>\n <td class=\"odd\">\n  <p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"pitch\"></a>\n<tr>\n <td class=\"even key\">pitch:</td>\n <td class=\"odd\">\n  <p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be a value greater than or equal to -72,must be a value less than or equal to 24\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"window_size\"></a>\n<tr>\n <td class=\"even key\">window_size:</td>\n <td class=\"odd\">\n  <p>Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed.\n\n  The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be a value greater than 5.0e-05\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"pitch_dis\"></a>\n<tr>\n <td class=\"even key\">pitch_dis:</td>\n <td class=\"odd\">\n  <p>Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the pitch param)</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"time_dis\"></a>\n<tr>\n <td class=\"even key\">time_dis:</td>\n <td class=\"odd\">\n  <p>Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.</p>\n  <p class=\"properties\">\n   Default: 0.0\n   <br/>must be a value greater than or equal to 0\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"compress\"></a>\n<tr>\n <td class=\"even key\">compress:</td>\n <td class=\"odd\">\n  <p>Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n  <p class=\"properties\">\n   Default: 0\n   <br/>must be one of the following values: [0, 1]\n  </p>\n </td>\n</tr>\n<a name=\"threshold\"></a>\n<tr>\n <td class=\"even key\">threshold:</td>\n <td class=\"odd\">\n  <p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.2\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"clamp_time\"></a>\n<tr>\n <td class=\"even key\">clamp_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_above\"></a>\n<tr>\n <td class=\"even key\">slope_above:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.5\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"slope_below\"></a>\n<tr>\n <td class=\"even key\">slope_below:</td>\n <td class=\"odd\">\n  <p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 1\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n<a name=\"relax_time\"></a>\n<tr>\n <td class=\"even key\">relax_time:</td>\n <td class=\"odd\">\n  <p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the compress: opt.</p>\n  <p class=\"properties\">\n   Default: 0.01\n   <br/>must be zero or greater\n   <br/>May be changed whilst playing\n   <br/><a href=\"#slide\">Has slide options to shape changes</a>\n  </p>\n </td>\n</tr>\n</table></p>\n<a name=slide></a>\n<h2>Slide Options</h2>\n<p>Any parameter that is slidable has three additional options named _slide, _slide_curve, and _slide_shape.  For example, 'amp' is slidable, so you can also set amp_slide, amp_slide_curve, and amp_slide_shape with the following effects:</p>\n<p><table class=\"details\">\n<tr>\n <td class=\"even key\">_slide:</td>\n <td class=\"even\">\n  <p>Amount of time (in beats) for the parameter value to change. A long parameter_slide value means that the parameter takes a long time to slide from the previous value to the new value. A parameter_slide of 0 means that the parameter instantly changes to the new value.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"odd key\">_slide_shape:</td>\n <td class=\"odd\">\n  <p>Shape of curve. 0: step, 1: linear, 3: sine, 4: welch, 5: custom (use *_slide_curve: opt e.g. amp_slide_curve:), 6: squared, 7: cubed. </p>\n  <p class=\"properties\">\n   Default: 5\n  </p>\n </td>\n</tr>\n<tr>\n <td class=\"even key\">_slide_curve:</td>\n <td class=\"even\">\n  <p>Shape of the slide curve (only honoured if slide shape is 5). 0 means linear and positive and negative numbers curve the segment up and down respectively.</p>\n  <p class=\"properties\">\n   Default: 0\n  </p>\n </td>\n</tr>\n</table></p>\n</body>\n"
    },
    "lang": {
      "octs": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring of octaves</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">octs</span>  start <span class=\"info\">(note)</span>, num_octaves <span class=\"info\">(pos_int)</span></pre></code></p>\n<p>Create a ring of successive octaves starting at <code>start</code> for <code>num_octaves</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(octs 60, 2) \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 60, 72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(octs :e3, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 52, 64, 76)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "midi_notes": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring buffer of midi note numbers</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">midi_notes</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new immutable ring buffer of notes from args. Indexes wrap around positively and negatively. Final ring consists only of MIDI numbers and nil.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(midi_notes :d3, :d4, :d5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 50, 62, 74)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(midi_notes :d3, 62,  nil)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 50, 62, nil)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rest?": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Determine if note or args is a rest</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rest?</span>  note_or_args <span class=\"info\">(number_symbol_or_map)</span></pre></code></p>\n<p>Given a note or an args map, returns true if it represents a rest and false if otherwise</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs rest? nil\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# true\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs rest? :r\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# true\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs rest? :rest\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# true\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs rest? 60\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# false\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs rest? {}\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# false\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs rest? {note: :rest}\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# true\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs rest? {note: nil}\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# true\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs rest? {note: 50}\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# false\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "pitch_to_ratio": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Relative MIDI pitch to frequency ratio</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">pitch_to_ratio</span>  pitch <span class=\"info\">(midi_number)</span></pre></code></p>\n<p>Convert a midi note to a ratio which when applied to a frequency will scale the frequency by the number of semitones. Useful for changing the pitch of a sample by using it as a way of generating the rate.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\npitch_to_ratio 12\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 2.0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\npitch_to_ratio 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 1.05946\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\npitch_to_ratio -12\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nsample :ambi_choir, rate: pitch_to_ratio(3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Plays :ambi_choir 3 semitones above default.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n(range 0, 16).each do |n|                 \n  sample :ambi_choir, rate: pitch_to_ratio(n)\n  sleep 0.5                               \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Play a chromatic scale of semitones\n# For each note in the range 0-&gt;16\n# play :ambi_choir at the relative pitch\n# and wait between notes\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "ratio_to_pitch": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Relative frequency ratio to MIDI pitch</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">ratio_to_pitch</span>  ratio <span class=\"info\">(number)</span></pre></code></p>\n<p>Convert a frequency ratio to a midi note which when added to a note will transpose the note to match the frequency ratio.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nratio_to_pitch 2\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 12.0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nratio_to_pitch 0.5\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; -12.0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "midi_to_hz": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>MIDI to Hz conversion</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">midi_to_hz</span>  note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>Convert a midi note to hz</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nmidi_to_hz(60)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 261.6256\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "hz_to_midi": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Hz to MIDI conversion</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">hz_to_midi</span>  freq <span class=\"info\">(number)</span></pre></code></p>\n<p>Convert a frequency in hz to a midi note. Note that the result isn’t an integer and there is a potential for some very minor rounding errors.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nhz_to_midi(261.63)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 60.0003\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_cent_tuning!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Global Cent tuning</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_cent_tuning!</span>  cent_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Globally tune Sonic Pi to play with another external instrument.</p>\n\n<p>Uniformly tunes your music by shifting all notes played by the specified number of cents. To shift up by a cent use a cent tuning of 1. To shift down use negative numbers. One semitone consists of 100 cents.</p>\n\n<p>See <code>use_cent_tuning</code> for setting the cent tuning value locally for a specific thread or <code>live_loop</code>. This is a global value and will shift the tuning for <em>all</em> notes. It will also persist for the entire session.</p>\n\n<p>Important note: the cent tuning set by <code>set_cent_tuning!</code> is independent of any thread-local cent tuning values set by <code>use_cent_tuning</code> or <code>with_cent_tuning</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nset_cent_tuning! 1\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50\n \n# Plays note 50.01\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_cent_tuning": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Cent tuning</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_cent_tuning</span>  cent_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Uniformly tunes your music by shifting all notes played by the specified number of cents. To shift up by a cent use a cent tuning of 1. To shift down use negative numbers. One semitone consists of 100 cents.</p>\n\n<p>See <code>with_cent_tuning</code> for setting the cent tuning value only for a specific <code>do</code>/<code>end</code> block. To transpose entire semitones see <code>use_transpose</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nuse_cent_tuning 1\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50\n \n# Plays note 50.01\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_cent_tuning": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level cent tuning</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_cent_tuning</span>  cent_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Similar to <code>use_cent_tuning</code> except only applies cent shift to code within supplied <code>do</code>/<code>end</code> block. Previous cent tuning value is restored after block. One semitone consists of 100 cents. To transpose entire semitones see <code>with_transpose</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_cent_tuning 1\nplay 50\n\nwith_cent_tuning 2 do\n  play 50\nend\n\n\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Plays note 50.01\n \n \n# Plays note 50.02\n \n \n# Original cent tuning value is restored\n# Plays note 50.01\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_octave": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Note octave transposition</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_octave</span>  octave_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Transposes your music by shifting all notes played by the specified number of octaves. To shift up by an octave use a transpose of 1. To shift down use negative numbers. See <code>with_octave</code> for setting the octave shift only for a specific <code>do</code>/<code>end</code> block. For transposing the notes within the octave range see <code>use_transpose</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nuse_octave 1\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50\n \n# Plays note 62\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nplay 62\nuse_octave -1\nplay 62\nuse_octave 2\nplay 62\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You may change the transposition multiple times:\n# Plays note 62\n \n# Plays note 50\n \n# Plays note 86\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_octave": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block level octave transposition</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_octave</span>  octave_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Transposes your music by shifting all notes played by the specified number of octaves within the specified block. To shift up by an octave use a transpose of 1. To shift down use negative numbers. For transposing the notes within the octave range see <code>with_transpose</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nsleep 1\nwith_octave 1 do\n play 50\nend\nsleep 1\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50\n \n \n# Plays note 62\n \n \n# Plays note 50\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_transpose": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Note transposition</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_transpose</span>  note_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Transposes your music by shifting all notes played by the specified amount. To shift up by a semitone use a transpose of 1. To shift down use negative numbers. See <code>with_transpose</code> for setting the transpose value only for a specific <code>do</code>/<code>end</code> block. To transpose entire octaves see <code>use_octave</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nuse_transpose 1\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50\n \n# Plays note 51\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nplay 62\nuse_transpose -12\nplay 62\nuse_transpose 3\nplay 62\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You may change the transposition multiple times:\n# Plays note 62\n \n# Plays note 50\n \n# Plays note 65\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_transpose": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level note transposition</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_transpose</span>  note_shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Similar to use_transpose except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous transpose value is restored after block. To transpose entire octaves see <code>with_octave</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_transpose 3\nplay 62\n\nwith_transpose 12 do\n  play 50\n  sleep 1\n  play 72\nend\n\n\nplay 80\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Plays note 65\n \n \n# Plays note 62\n \n# Plays note 84\n \n \n# Original transpose value is restored\n# Plays note 83\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_tuning": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Use alternative tuning systems</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_tuning</span>  tuning <span class=\"info\">(symbol)</span>, fundamental_note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>In most music we make semitones by dividing the octave into 12 equal parts, which is known as equal temperament. However there are lots of other ways to tune the 12 notes. This method adjusts each midi note into the specified tuning system. Because the ratios between notes aren’t always equal, be careful to pick a centre note that is in the key of the music you’re making for the best sound. Currently available tunings are <code>:just</code>, <code>:pythagorean</code>, <code>:meantone</code> and the default of <code>:equal</code></p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay :e4\nuse_tuning :just, :c\nplay :e4\n\nplay 64\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 64\n \n# Plays note 63.8631\n# transparently changes midi notes too\n# Plays note 63.8631\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nplay 64\nuse_tuning :just\nplay 64\nuse_tuning :equal\nplay 64\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You may change the tuning multiple times:\n# Plays note 64\n \n# Plays note 63.8631\n \n# Plays note 64\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_tuning": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level tuning modification</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_tuning</span>  tuning <span class=\"info\">(symbol)</span>, fundamental_note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>Similar to use_tuning except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous tuning value is restored after block.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_tuning :equal, :c\nplay :e4\nwith_tuning :just, :c do\n  play :e4\n  sleep 1\n  play :c4\nend\n\nplay :e4\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Plays note 64\n \n# Plays note 63.8631\n \n# Plays note 60\n \n# Original tuning value is restored\n# Plays note 64\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_transpose": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current transposition</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_transpose</span>  </pre></code></p>\n<p>Returns the current transpose value.</p>\n\n<p>This can be set via the fns <code>use_transpose</code> and <code>with_transpose</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_transpose\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current transpose value\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_cent_tuning": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current cent shift</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_cent_tuning</span>  </pre></code></p>\n<p>Returns the cent shift value.</p>\n\n<p>This can be set via the fns <code>use_cent_tuning</code> and <code>with_cent_tuning</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_cent_tuning\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current cent shift\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_octave": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current octave shift</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_octave</span>  </pre></code></p>\n<p>Returns the octave shift value.</p>\n\n<p>This can be set via the fns <code>use_octave</code> and <code>with_octave</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_octave\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current octave shift\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "note": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Describe note</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">note</span>  note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>Takes a midi note, a symbol (e.g. <code>:C</code>) or a string (e.g. <code>\"C\"</code>) and resolves it to a midi note. You can also pass an optional <code>octave:</code> parameter to get the midi note for a given octave. Please note - <code>octave:</code> param overrides any octave specified in a symbol i.e. <code>:c3</code>. If the note is <code>nil</code>, <code>:r</code> or <code>:rest</code>, then <code>nil</code> is returned (<code>nil</code> represents a rest)</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">octave:</td>\n <td class=\"even\">\n<p>The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nputs note(60)\nputs note(:C)\nputs note(:C4)\nputs note(&#39;C&#39;)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# These all return 60 which is the midi number for middle C (octave 4)\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs note(60, octave: 2)\n\n\nputs note(:C, octave: 2)\nputs note(:C4, octave: 2)\nputs note(&#39;C&#39;, octave: 2)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# returns 60 - octave param has no effect if we pass in a number\n \n \n# These all return 36 which is the midi number for C2 (two octaves below middle C)\n \n# note the octave param overrides any octaves specified in a symbol\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "note_range": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get a range of notes</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">note_range</span>  low_note <span class=\"info\">(note)</span>, high_note <span class=\"info\">(note)</span></pre></code></p>\n<p>Produces a ring of all the notes between a low note and a high note. By default this is chromatic (all the notes) but can be filtered with a pitches: argument. This opens the door to arpeggiator style sequences and other useful patterns. If you try to specify only pitches which aren’t in the range it will raise an error - you have been warned!</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">pitches:</td>\n <td class=\"even\">\n<p>An array of notes (symbols or ints) to filter on. Octave information is ignored.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(note_range :c4, :c5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# =&gt; (ring 60,61,62,63,64,65,66,67,68,69,70,71,72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(note_range :c4, :c5, pitches: (chord :c, :major))\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# =&gt; (ring 60,64,67,72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(note_range :c4, :c6, pitches: (chord :c, :major))\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# =&gt; (ring 60,64,67,72,76,79,84)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(note_range :c4, :c5, pitches: (scale :c, :major))\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# =&gt; (ring 60,62,64,65,67,69,71,72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(note_range :c4, :c5, pitches: [:c4, :g2])\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# =&gt; (ring 60,67,72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nlive_loop :arpeggiator do\n \n  play (note_range :c4, :c5, pitches: (chord :c, :major)).tick\n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n# try changing the chord\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "note_info": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get note info</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">note_info</span>  note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>Returns an instance of <code>SonicPi::Note</code>. Please note - <code>octave:</code> param overrides any octave specified in a symbol i.e. <code>:c3</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">octave:</td>\n <td class=\"even\">\n<p>The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4</p>\n\n </td>\n</tr>\n</table></p><h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs note_info(:C, octave: 2)\n\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# returns #&lt;SonicPi::Note :C2&gt;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "degree": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Convert a degree into a note</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">degree</span>  degree <span class=\"info\">(symbol_or_number)</span>, tonic <span class=\"info\">(symbol)</span>, scale <span class=\"info\">(symbol)</span></pre></code></p>\n<p>For a given scale and tonic it takes a symbol/string/number and resolves it to a midi note. The degree can be either a decimal number or a roman numeral (if it’s a string or symbol), and may optionally be prefixed an augmentation (<code>a</code>/<code>d</code> for an augmented/diminished interval, <code>aa</code>/<code>dd</code> for double augmented/diminished or <code>p</code> for a perfect (unchanged) interval).</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay degree(:iii, :D3, :major)\nplay degree(3, :C3, :minor)\nplay degree(&#39;d5&#39;, :B3, :major)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# major third up from :D3\n# minor third up from :C3\n# diminished fifth up from :B3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nchrd = []\n[:i, :iii, :v, :dvii, :dix, :Axi, :xiii].each do |d| \n  chrd.append (degree d, :Fs, :major) \nend\nplay chrd \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n# for each degree in the chord\n# add the corresponding note\n \n# play an F# 13+11-9 chord, using roman numeral symbols\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nchrd = []\n[&#39;1&#39;, &#39;3&#39;, &#39;5&#39;, &#39;d7&#39;, &#39;d9&#39;, &#39;A11&#39;, &#39;13&#39;].each do |d|\n  chrd.append (degree d, :Fs, :major)\nend\nplay chrd \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n# the same chord as above, but using decimal number strings\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "scale": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create scale</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">scale</span>  tonic <span class=\"info\">(symbol)</span>, name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Creates a ring of MIDI note numbers when given a tonic note and a scale name. Also takes an optional <code>num_octaves:</code> parameter (octave <code>1</code> is the default). If only passed the scale name, the tonic defaults to 0. See examples.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">num_octaves:</td>\n <td class=\"even\">\n<p>The number of octaves you’d like the scale to consist of. More octaves means a larger scale. Default is 1.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs (scale :C, :major)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# returns the following ring of MIDI note numbers: (ring 60, 62, 64, 65, 67, 69, 71, 72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nplay_pattern (scale :C, :major)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# anywhere you can use a list or ring of notes, you can also use scale\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nplay_pattern (scale :C, :major, num_octaves: 2)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# you can use the :num_octaves parameter to get more notes\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs (scale 50, :minor)\nputs (scale 50.1, :minor)\nputs (scale :minor)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Scales can start with any note:\n#=&gt; (ring 50, 52, 53, 55, 57, 58, 60, 62)\n#=&gt; (ring 50.1, 52.1, 53.1, 55.1, 57.1, 58.1, 60.1, 62.1)\n#=&gt; (ring 0, 2, 3, 5, 7, 8, 10, 12)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :scale_player do\n  play (scale :Eb3, :super_locrian).tick, release: 0.1\n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# scales are also rings\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :scaled_sample do\n  sample :bass_trance_c, rpitch: (scale 0, :minor).tick\n  sleep 1\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# scales starting with 0 are useful in combination with sample&#39;s rpitch:\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n(scale :C, :diatonic)\n(scale :C, :ionian)\n(scale :C, :major)\n(scale :C, :dorian)\n(scale :C, :phrygian)\n(scale :C, :lydian)\n(scale :C, :mixolydian)\n(scale :C, :aeolian)\n(scale :C, :minor)\n(scale :C, :locrian)\n(scale :C, :hex_major6)\n(scale :C, :hex_dorian)\n(scale :C, :hex_phrygian)\n(scale :C, :hex_major7)\n(scale :C, :hex_sus)\n(scale :C, :hex_aeolian)\n(scale :C, :minor_pentatonic)\n(scale :C, :yu)\n(scale :C, :major_pentatonic)\n(scale :C, :gong)\n(scale :C, :egyptian)\n(scale :C, :shang)\n(scale :C, :jiao)\n(scale :C, :zhi)\n(scale :C, :ritusen)\n(scale :C, :whole_tone)\n(scale :C, :whole)\n(scale :C, :chromatic)\n(scale :C, :harmonic_minor)\n(scale :C, :melodic_minor_asc)\n(scale :C, :hungarian_minor)\n(scale :C, :octatonic)\n(scale :C, :messiaen1)\n(scale :C, :messiaen2)\n(scale :C, :messiaen3)\n(scale :C, :messiaen4)\n(scale :C, :messiaen5)\n(scale :C, :messiaen6)\n(scale :C, :messiaen7)\n(scale :C, :super_locrian)\n(scale :C, :hirajoshi)\n(scale :C, :kumoi)\n(scale :C, :neapolitan_major)\n(scale :C, :bartok)\n(scale :C, :bhairav)\n(scale :C, :locrian_major)\n(scale :C, :ahirbhairav)\n(scale :C, :enigmatic)\n(scale :C, :neapolitan_minor)\n(scale :C, :pelog)\n(scale :C, :augmented2)\n(scale :C, :scriabin)\n(scale :C, :harmonic_major)\n(scale :C, :melodic_minor_desc)\n(scale :C, :romanian_minor)\n(scale :C, :hindu)\n(scale :C, :iwato)\n(scale :C, :melodic_minor)\n(scale :C, :diminished2)\n(scale :C, :marva)\n(scale :C, :melodic_major)\n(scale :C, :indian)\n(scale :C, :spanish)\n(scale :C, :prometheus)\n(scale :C, :diminished)\n(scale :C, :todi)\n(scale :C, :leading_whole)\n(scale :C, :augmented)\n(scale :C, :purvi)\n(scale :C, :chinese)\n(scale :C, :lydian_minor)\n(scale :C, :blues_major)\n(scale :C, :blues_minor)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Sonic Pi supports a large range of scales:\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "chord_degree": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Construct chords of stacked thirds, based on scale degrees</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">chord_degree</span>  degree <span class=\"info\">(symbol_or_number)</span>, tonic <span class=\"info\">(symbol)</span>, scale <span class=\"info\">(symbol)</span>, number_of_notes <span class=\"info\">(number)</span></pre></code></p>\n<p>In music we build chords from scales. For example, a C major chord is made by taking the 1st, 3rd and 5th notes of the C major scale (C, E and G). If you do this on a piano you might notice that you play one, skip one, play one, skip one etc. If we use the same spacing and start from the second note in C major (which is a D), we get a D minor chord which is the 2nd, 4th and 6th notes in C major (D, F and A). We can move this pattern all the way up or down the scale to get different types of chords. <code>chord_degree</code> is a helper method that returns a ring of midi note numbers when given a degree (starting point in a scale) which is a symbol <code>:i</code>, <code>:ii</code>, <code>:iii</code>, <code>:iv</code>, <code>:v</code>, <code>:vi</code>, <code>:vii</code> or a number <code>1</code>-<code>7</code>. The second argument is the tonic note of the scale, the third argument is the scale type and finally the fourth argument is number of notes to stack up in the chord. If we choose 4 notes from degree <code>:i</code> of the C major scale, we take the 1st, 3rd, 5th and 7th notes of the scale to get a C major 7 chord.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">invert:</td>\n <td class=\"even\">\n<p>Apply the specified num inversions to chord. See the fn <code>chord_invert</code>.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs (chord_degree :i, :A3, :major)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# returns a ring of midi notes - (ring 57, 61, 64, 68) - an A major 7 chord\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay (chord_degree :i, :A3, :major, 3)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay (chord_degree :ii, :A3, :major, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Chord ii in A major is a B minor chord\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay (chord_degree :iii, :A3, :major, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Chord iii in A major is a C# minor chord\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay (chord_degree :iv, :A3, :major, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Chord iv in A major is a D major chord\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay (chord_degree :i, :C4, :major, 4)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Taking four notes is the default. This gives us 7th chords - here it plays a C major 7\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay (chord_degree :i, :C4, :major, 5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Taking five notes gives us 9th chords - here it plays a C major 9 chord\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay (chord_degree :i, :C4, :major, 3, invert: 1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play the first inversion of chord i in C major - (ring 64, 67, 72)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "chord": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create chord</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">chord</span>  tonic <span class=\"info\">(symbol)</span>, name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Creates an immutable ring of Midi note numbers when given a tonic note and a chord type. If only passed a chord type, will default the tonic to 0. See examples.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">invert:</td>\n <td class=\"even\">\n<p>Apply the specified num inversions to chord. See the fn <code>chord_invert</code>.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">num_octaves:</td>\n <td class=\"odd\">\n<p>Create an arpeggio of the chord over n octaves</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs (chord :e, :minor)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# returns a ring of midi notes - (ring 64, 67, 71)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nplay (chord :e, :minor)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play all the notes together\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nplay (chord :e3, :minor, invert: 0)\nplay (chord :e3, :minor, invert: 1)\nplay (chord :e3, :minor, invert: 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Chord inversions (see the fn chord_invert)\n# Play the basic :e3, :minor chord - (ring 52, 55, 59)\n# Play the first inversion of :e3, :minor - (ring 55, 59, 64)\n# Play the first inversion of :e3, :minor - (ring 59, 64, 67)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs (chord :minor)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You can create a chord without a tonic:\n#=&gt; (ring 0, 3, 7)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :arp do\n  play chord(:e, :minor, num_octaves: 2).tick, release: 0.1\n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# chords are great for arpeggiators\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n(chord :C, &#39;1&#39;)\n(chord :C, &#39;5&#39;)\n(chord :C, &#39;+5&#39;)\n(chord :C, &#39;m+5&#39;)\n(chord :C, :sus2)\n(chord :C, :sus4)\n(chord :C, &#39;6&#39;)\n(chord :C, :m6)\n(chord :C, &#39;7sus2&#39;)\n(chord :C, &#39;7sus4&#39;)\n(chord :C, &#39;7-5&#39;)\n(chord :C, &#39;m7-5&#39;)\n(chord :C, &#39;7+5&#39;)\n(chord :C, &#39;m7+5&#39;)\n(chord :C, &#39;9&#39;)\n(chord :C, :m9)\n(chord :C, &#39;m7+9&#39;)\n(chord :C, :maj9)\n(chord :C, &#39;9sus4&#39;)\n(chord :C, &#39;6*9&#39;)\n(chord :C, &#39;m6*9&#39;)\n(chord :C, &#39;7-9&#39;)\n(chord :C, &#39;m7-9&#39;)\n(chord :C, &#39;7-10&#39;)\n(chord :C, &#39;9+5&#39;)\n(chord :C, &#39;m9+5&#39;)\n(chord :C, &#39;7+5-9&#39;)\n(chord :C, &#39;m7+5-9&#39;)\n(chord :C, &#39;11&#39;)\n(chord :C, :m11)\n(chord :C, :maj11)\n(chord :C, &#39;11+&#39;)\n(chord :C, &#39;m11+&#39;)\n(chord :C, &#39;13&#39;)\n(chord :C, :m13)\n(chord :C, :add2)\n(chord :C, :add4)\n(chord :C, :add9)\n(chord :C, :add11)\n(chord :C, :add13)\n(chord :C, :madd2)\n(chord :C, :madd4)\n(chord :C, :madd9)\n(chord :C, :madd11)\n(chord :C, :madd13)\n(chord :C, :major)\n(chord :C, :M)\n(chord :C, :minor)\n(chord :C, :m)\n(chord :C, :major7)\n(chord :C, :dom7)\n(chord :C, &#39;7&#39;)\n(chord :C, :M7)\n(chord :C, :minor7)\n(chord :C, :m7)\n(chord :C, :augmented)\n(chord :C, :a)\n(chord :C, :diminished)\n(chord :C, :dim)\n(chord :C, :i)\n(chord :C, :diminished7)\n(chord :C, :dim7)\n(chord :C, :i7)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sonic Pi supports a large range of chords\n# Notice that the more exotic ones have to be surrounded by &#39; quotes\n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "chord_invert": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Chord inversion</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">chord_invert</span>  notes <span class=\"info\">(list)</span>, shift <span class=\"info\">(number)</span></pre></code></p>\n<p>Given a set of notes, apply a number of inversions indicated by the <code>shift</code> parameter. Inversions being an increase to notes if <code>shift</code> is positive or decreasing the notes if <code>shift</code> is negative.</p>\n\n<p>An inversion is simply rotating the chord and shifting the wrapped notes up or down an octave. For example, consider the chord :e3, :minor - <code>(ring 52, 55, 59)</code>. When we invert it once, we rotate the notes around to <code>(ring 55, 59, 52)</code>. However, because note 52 is wrapped round, it’s shifted up an octave (12 semitones) so the actual first inversion of the chord :e3, :minor is <code>(ring 55, 59, 52 + 12)</code> or <code>(ring 55, 59, 64)</code>.</p>\n\n<p>Note that it’s also possible to directly invert chords on creation with the <code>invert:</code> opt - <code>(chord :e3, :minor, invert: 2)</code></p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay (chord_invert (chord :A3, &quot;M&quot;), 0)\nsleep 1\nplay (chord_invert (chord :A3, &quot;M&quot;), 1)\nsleep 1\nplay (chord_invert (chord :A3, &quot;M&quot;), 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#No inversion     - (ring 57, 61, 64)\n \n#First inversion  - (ring 61, 64, 69)\n \n#Second inversion - (ring 64, 69, 73)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "scale_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>All scale names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">scale_names</span>  </pre></code></p>\n<p>Returns a ring containing all scale names known to Sonic Pi</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs scale_names\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt;  prints a list of all the scales\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "chord_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>All chord names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">chord_names</span>  </pre></code></p>\n<p>Returns a ring containing all chord names known to Sonic Pi</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs chord_names\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt;  prints a list of all the chords\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "live_audio": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>A named audio stream live from your soundcard</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">live_audio</span>  name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Create a named synthesiser which works similar to <code>play</code>, <code>sample</code> or <code>synth</code>. Rather than synthesising the sound mathematically or playing back recorded audio, it streams audio live from your sound card.</p>\n\n<p>However, unlike <code>play</code>, <code>sample</code> and <code>synth</code>, which allow multiple similar synths to play at the same time (i.e. a chord) only one <code>live_audio</code> synth of a given name may exist in the system at any one time. This is similar to <code>live_loop</code> where only one live loop of each name may exist at any one time. See examples for further information.</p>\n\n<p>An additional difference is that <code>live_audio</code> will create an infinitely long synth rather than be timed to an envelope like the standard <code>synth</code> and <code>sample</code> synths. This is particularly suitable for working with continuous incoming audio streams where the source of the audio is unknown (for example, it may be a guitar, an analog synth or an electronic violin). If the source is continuous, then it may not be suited to being stitched together by successive enveloped calls to something like: <code>synth :sound_in, attack: 0, sustain: 4, release: 0</code>. If we were to <code>live_loop</code> this with a <code>sleep 4</code> to match the sustain duration, we would get something that emulated a continuous stream, but for certain inputs you’ll hear clicking at the seams between each successive call to <code>synth</code> where the final part of the audio signal from the previous synth doesn’t precisely match up with the start of the signal in the next synth due to very minor timing differences.</p>\n\n<p>Another important feature of <code>live_audio</code> is that it will automatically move an existing <code>live_audio</code> synth into the current FX context. This means you can live code the FX chain around the live stream and it will update automatically. See examples.</p>\n\n<p>To stop a <code>live_audio</code> synth, use the <code>:stop</code> arg: <code>live_audio :foo, :stop</code>.\n.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">input:</td>\n <td class=\"even\">\n<p>The audio card input to read audio from.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">stereo:</td>\n <td class=\"odd\">\n<p>If set to truthy value (true, 1) will read from two consecutive audio card inputs.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_audio :foo \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic usage\n# Play whatever audio is coming into the sound card on input 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_audio :foo, input: 3 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Specify an input\n# Play whatever audio is coming into the sound card on input 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_audio :foo, input: 3, stereo: true \n                                        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Work with stereo input\n# Play whatever audio is coming into the sound card on inputs 3 and 4\n# as a stereo stream\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_audio :guitar    \n\nsleep 2               \n\nwith_fx :reverb do\n  live_audio :guitar  \nend\n\nsleep 2               \n\nlive_audio :guitar    \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Switching audio contexts (i.e. changing FX)\n# Play whatever audio is coming into the sound card on input 1\n \n# Wait for 2 seconds then...\n \n \n# Add reverb to the audio from input 1\n \n \n# Wait for another 2 seconds then...\n \n# Remove the reverb from input 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nlive_loop :foo do\n  with_fx [:reverb, :distortion, :echo].choose do  \n    live_audio :voice                              \n  end                                              \n  sleep 8\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Working with live_loops\n \n \n# chooses a new FX each time round the live loop\n# the audio stream from input 1 will be moved to the\n# new FX and the old FX will complete and finish as normal.\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nlive_audio :foo           \nlive_audio :bar, input: 2 \n\nsleep 3                   \n\nlive_audio :foo, :stop    \n                          \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Stopping\n \n#=&gt; start playing audio from input 1\n#=&gt; start playing audio from input 2\n \n#=&gt; wait for 3s...\n \n#=&gt; stop playing audio from input 1\n#=&gt; (live_audio :bar is still playing)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "scsynth_info": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Return information about the internal SuperCollider sound server</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">scsynth_info</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Create a map of information about the running audio synthesiser SuperCollider.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs scsynth_info \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n                           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt;  (map sample_rate: 44100.0,\n#         sample_dur: 2.2675736545352265e-05,\n#         radians_per_sample: 0.00014247585204429924,\n#         control_rate: 689.0625,\n#         control_dur: 0.001451247138902545,\n#         subsample_offset: 0.0,\n#         num_output_busses: 16.0,\n#         num_input_busses: 16.0,\n#         num_audio_busses: 1024.0,\n#         num_control_busses: 4096.0,\n#         num_buffers: 4096.0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_free": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Free a sample on the synth server</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_free</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Frees the memory and resources consumed by loading the sample on the server. Subsequent calls to <code>sample</code> and friends will re-load the sample on the server.</p>\n\n<p>You may also specify the same set of source and filter pre-args available to <code>sample</code> itself. <code>sample_free</code> will then free all matching samples. See <code>sample</code>’s docs for more information.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\nsleep 2\nsample :loop_amen\nsleep 2\nsample_free :loop_amen\nsample :loop_amen\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# The Amen break is now loaded into memory and played\n \n# The Amen break is not loaded but played from memory\n \n# The Amen break is freed from memory\n# the Amen break is re-loaded and played\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs sample_info(:loop_amen).to_i\nputs sample_info(:loop_amen).to_i\n                                 \nsample_free :loop_amen\nputs sample_info(:loop_amen).to_i\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# This returns the buffer id of the sample i.e. 1\n# The buffer id remains constant whilst the sample\n# is loaded in memory\n \n# The Amen break is re-loaded and gets a *new* id.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\nsample :ambi_lunar_land\nsleep 2\nsample_free :loop_amen, :ambi_lunar_land\nsample :loop_amen                       \nsample :ambi_lunar_land                 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n# re-loads and plays amen\n# re-loads and plays lunar land\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ndir = &quot;/path/to/sample/dir&quot;\nsample_free dir\nsample_free dir, 1\nsample_free dir, :foo\nsample_free dir, /[Bb]ar/\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Using source and filter pre-args\n \n# frees any loaded samples in &quot;/path/to/sample/dir&quot;\n# frees sample with index 1 in &quot;/path/to/sample/dir&quot;\n# frees sample with name &quot;foo&quot; in &quot;/path/to/sample/dir&quot;\n# frees sample which matches regex /[Bb]ar/ in &quot;/path/to/sample/dir&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "buffer": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Initialise or return named buffer</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">buffer</span>  symbol <span class=\"info\">(name)</span>, number <span class=\"info\">(duration)</span></pre></code></p>\n<p>Initialise or return a named buffer with a specific duration (defaults to 8 beats). Useful for working with the <code>:record</code> FX. If the buffer is requested with a different duration, then a new buffer will be initialised and the old one recycled.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nbuffer(:foo)\nb = buffer(:foo)\nputs b.duration \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# load a 8s buffer and name it :foo\n# return cached buffer and bind it to b\n#=&gt; 8.0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nbuffer(:foo, 16)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# load a 16s buffer and name it :foo\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120\nbuffer(:foo, 16)\n                \n                \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# load a 8s buffer and name it :foo\n# (this isn&#39;t 16s as the BPM has been\n# doubled from the default of 60)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nbuffer(:foo)    \nbuffer(:foo, 8) \nbuffer(:foo, 10)\nbuffer(:foo, 10)\nbuffer(:foo)    \nbuffer(:foo)    \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# init a 8s buffer and name it :foo\n# return cached 8s buffer (has the same duration)\n# init a new 10s buffer and name it :foo\n# return cached 10s buffer\n# init a 8s buffer and name it :foo\n# return cached 8s buffer (has the same duration)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_free_all": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Free all loaded samples on the synth server</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_free_all</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Unloads all samples therefore freeing the memory and resources consumed. Subsequent calls to <code>sample</code> and friends will re-load the sample on the server.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen       \nsample :ambi_lunar_land \nsleep 2\nsample_free_all\nsample :loop_amen       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# load and play :loop_amen\n# load and play :ambi_lunar_land\n \n \n# re-loads and plays amen\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_timing_guarantees": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Inhibit synth triggers if too late</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_timing_guarantees</span>  bool <span class=\"info\">(true_or_false)</span></pre></code></p>\n<p>If set to true, synths will not trigger if it is too late. If false, some synth triggers may be late.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_timing_guarantees true\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n#=&gt; if time is behind by any margin, this will not trigger\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_timing_guarantees false\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n#=&gt; unless time is too far behind, this will trigger even when late.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_timing_guarantees": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-scoped inhibition of synth triggers if too late</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_timing_guarantees</span>  bool <span class=\"info\">(true_or_false)</span></pre></code></p>\n<p>For the given block, if set to true, synths will not trigger if it is too late. If false, some synth triggers may be late. After the block has completed, the previous value is restored.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nwith_timing_guarantees true do\n  sample :loop_amen \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; if time is behind by any margin, this will not trigger\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nwith_timing_guarantees false do\n  sample :loop_amen \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; unless time is too far behind, this will trigger even when late.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_sample_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sample-duration-based bpm modification</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_sample_bpm</span>  string_or_number <span class=\"info\">(sample_name_or_duration)</span></pre></code></p>\n<p>Modify bpm so that sleeping for 1 will sleep for the duration of the sample.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">num_beats:</td>\n <td class=\"even\">\n<p>The number of beats within the sample. By default this is 1.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_sample_bpm :loop_amen \n\nlive_loop :dnb do\n  sample :bass_dnb_f\n  sample :loop_amen\n  sleep 1                 \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#Set bpm based on :loop_amen duration\n \n \n \n \n#`sleep`ing for 1 actually sleeps for duration of :loop_amen\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_sample_bpm :loop_amen, num_beats: 4 \n                                        \n                                        \n\nlive_loop :dnb do\n  sample :bass_dnb_f\n  sample :loop_amen\n  sleep 4                 \n                          \n                          \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Set bpm based on :loop_amen duration\n# but also specify that the sample duration\n# is actually 4 beats long.\n \n \n \n \n#`sleep`ing for 4 actually sleeps for duration of :loop_amen\n# as we specified that the sample consisted of\n# 4 beats\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_sample_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-scoped sample-duration-based bpm modification</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_sample_bpm</span>  string_or_number <span class=\"info\">(sample_name_or_duration)</span></pre></code></p>\n<p>Block-scoped modification of bpm so that sleeping for 1 will sleep for the duration of the sample.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">num_beats:</td>\n <td class=\"even\">\n<p>The number of beats within the sample. By default this is 1.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nlive_loop :dnb do\n  with_sample_bpm :loop_amen do\n    sample :bass_dnb_f\n    sample :loop_amen\n    sleep 1                    \n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#Set bpm based on :loop_amen duration\n \n \n#`sleep`ing for 1 sleeps for duration of :loop_amen\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nlive_loop :dnb do\n  with_sample_bpm :loop_amen, num_beats: 4 do\n                                             \n                                             \n    sample :bass_dnb_f\n    sample :loop_amen\n    sleep 4                    \n                               \n                               \n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n# Set bpm based on :loop_amen duration\n# but also specify that the sample duration\n# is actually 4 beats long.\n \n \n#`sleep`ing for 4 sleeps for duration of :loop_amen\n# as we specified that the sample consisted of\n# 4 beats\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_arg_bpm_scaling": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Enable and disable BPM scaling</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_arg_bpm_scaling</span>  bool <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Turn synth argument bpm scaling on or off for the current thread. This is on by default. Note, using <code>rt</code> for args will result in incorrect times when used after turning arg bpm scaling off.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120\nplay 50, release: 2\nsleep 2            \nuse_arg_bpm_scaling false\nplay 50, release: 2\nsleep 2            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# release is actually 1 due to bpm scaling\n# actually sleeps for 1 second\n \n# release is now 2\n# still sleeps for 1 second\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nuse_bpm 120\nplay 50, release: rt(2)\nsleep rt(2)            \nuse_arg_bpm_scaling false\nplay 50, release: rt(2)\nsleep rt(2)            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Interaction with rt\n \n# release is 2 seconds\n# sleeps for 2 seconds\n \n# ** Warning: release is NOT 2 seconds! **\n# still sleeps for 2 seconds\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_arg_bpm_scaling": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level enable and disable BPM scaling</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_arg_bpm_scaling</span>  </pre></code></p>\n<p>Turn synth argument bpm scaling on or off for the supplied block. Note, using <code>rt</code> for args will result in incorrect times when used within this block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120\nplay 50, release: 2\nwith_arg_bpm_scaling false do\n  play 50, release: 2\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# release is actually 1 due to bpm scaling\n \n# release is now 2\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nuse_bpm 120\nplay 50, release: rt(2)  \nsleep rt(2)              \nwith_arg_bpm_scaling false do\n  play 50, release: rt(2)\n  sleep rt(2)            \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Interaction with rt\n \n# release is 2 seconds\n# sleeps for 2 seconds\n \n# ** Warning: release is NOT 2 seconds! **\n# still sleeps for 2 seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_audio_latency!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Globally modify audio latency</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_audio_latency!</span>  milliseconds <span class=\"info\">(number)</span></pre></code></p>\n<p>On some systems with certain configurations (such as wireless speakers, and even a typical Windows environment with the default audio drivers) the audio latency can be large. If all the user is doing is generating audio via calls such as <code>play</code>, <code>synth</code> and <code>sample</code>, then this latency essentially adds to the schedule ahead time and for the most part can be ignored. However, if the user is combining audio with external MIDI/OSC triggered events, this latency can result in a noticeable offset. This function allows you to address this offset by moving the audio events forwards and backwards in time.</p>\n\n<p>So, for example, if your audio system has an audio latency of 150ms, you can compensate for this by setting Sonic Pi’s latency to be a negative value: <code>set_audio_latency! -150</code>.</p>\n\n<p class=\"introduced\">Introduced in v3.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_audio_latency! 100\n                                                 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Audio events will now be scheduled 100ms\n# after the schedule ahead time\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nset_audio_latency! -200\n                                                 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Audio events will now be scheduled 200ms\n# before the schedule ahead time\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_recording_bit_depth!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set the bit depth for recording wav files</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_recording_bit_depth!</span>  bit_depth <span class=\"info\">(number)</span></pre></code></p>\n<p>When you hit the record button, Sonic Pi saves all the audio you can hear into a wav file. By default, this file uses a resolution of 16 bits which is the same as CD audio and good enough for most use cases. However, when working with professional equipment, it is common to want to work with even higher quality files such as 24 bits and even 32 bits. This function allows you to switch the default from 16 to one of 8, 16, 24 or 32.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_recording_bit_depth! 24                \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set recording bit depth to 24\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_control_delta!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set control delta globally</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_control_delta!</span>  time <span class=\"info\">(number)</span></pre></code></p>\n<p>Specify how many seconds between successive modifications (i.e. trigger then controls) of a specific node on a specific thread. Set larger if you are missing control messages sent extremely close together in time.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_control_delta! 0.1                \n\ns = play 70, release: 8, note_slide: 8\ncontrol s, note: 82                   \n                                      \n                                      \n                                      \n                                      \n                                      \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set control delta to 0.1\n \n# Play a note and set the slide time\n# immediately start sliding note.\n# This control message might not be\n# correctly handled as it is sent at the\n# same virtual time as the trigger.\n# If you don&#39;t hear a slide, try increasing the\n# control delta until you do.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_debug": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Enable and disable debug</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_debug</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Enable or disable messages created on synth triggers. If this is set to false, the synths will be silent until debug is turned back on. Silencing debug messages can reduce output noise and also increase performance on slower platforms. See <code>with_debug</code> for setting the debug value only for a specific <code>do</code>/<code>end</code> block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_debug true\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on debug messages\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_debug false\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Disable debug messages\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_debug": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level enable and disable debug</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_debug</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Similar to use_debug except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous debug value is restored after block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nuse_debug true\n\nplay 80\n\nwith_debug false do\n \n  play 50\n  sleep 1\n  play 72\nend\n\n\nplay 90\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on debugging:\n \n \n# Debug message is sent\n \n \n#Debug is now disabled\n# Debug message is not sent\n \n# Debug message is not sent\n \n \n# Debug is re-enabled\n# Debug message is sent\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_arg_checks": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Enable and disable arg checks</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_arg_checks</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>When triggering synths, each argument is checked to see if it is sensible. When argument checking is enabled and an argument isn’t sensible, you’ll see an error in the debug pane. This setting allows you to explicitly enable and disable the checking mechanism. See with_arg_checks for enabling/disabling argument checking only for a specific <code>do</code>/<code>end</code> block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50, release: 5\nuse_arg_checks false\nplay 50, release: 5\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Args are checked\n \n# Args are not checked\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_arg_checks": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level enable and disable arg checks</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_arg_checks</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Similar to <code>use_arg_checks</code> except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous arg check value is restored after block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nuse_arg_checks true\n\nplay 80, cutoff: 100\n\nwith_arg_checks false do\n \n  play 50, release: 3\n  sleep 1\n  play 72            \nend\n\n\nplay 90\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on arg checking:\n \n \n# Args are checked\n \n \n#Arg checking is now disabled\n# Args are not checked\n \n# Arg is not checked\n \n \n# Arg checking is re-enabled\n# Args are checked\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_synth": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Switch current synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_synth</span>  synth_name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Switch the current synth to <code>synth_name</code>. Affects all further calls to <code>play</code>. See <code>with_synth</code> for changing the current synth only for a specific <code>do</code>/<code>end</code> block.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nuse_synth :mod_sine\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays with default synth\n \n# Plays with mod_sine synth\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_synth": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level synth switching</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_synth</span>  synth_name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Switch the current synth to <code>synth_name</code> but only for the duration of the <code>do</code>/<code>end</code> block. After the <code>do</code>/<code>end</code> block has completed, the previous synth is restored.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\nsleep 2\nuse_synth :supersaw\nplay 50\nsleep 2\nwith_synth :saw_beep do\n  play 50\nend\nsleep 2\n\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays with default synth\n \n \n# Plays with supersaw synth\n \n \n# Plays with saw_beep synth\n \n \n# Previous synth is restored\n# Plays with supersaw synth\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "reset_mixer!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reset main mixer</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">reset_mixer!</span>  </pre></code></p>\n<p>The main mixer is the final mixer that all sound passes through. This fn resets it to its default set - undoing any changes made via set_mixer_control!</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_mixer_control! lpf: 70\nsample :loop_amen         \nsleep 3\nreset_mixer!              \nsample :loop_amen         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# LPF cutoff value of main mixer is now 70\n# :loop_amen sample is played with low cutoff\n \n# mixer is now reset to default values\n# :loop_amen sample is played with normal cutoff\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_mixer_control!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Control main mixer</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_mixer_control!</span>  </pre></code></p>\n<p>The main mixer is the final mixer that all sound passes through. This fn gives you control over the main mixer allowing you to manipulate all the sound playing through Sonic Pi at once. For example, you can sweep a lpf or hpf over the entire sound. You can reset the controls back to their defaults with <code>reset_mixer!</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">pre_amp:</td>\n <td class=\"even\">\n<p>Controls the amplitude of the signal prior to the FX stage of the mixer (prior to lpf/hpf stages). Has slide opts. Default 1.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>Controls the amplitude of the signal after the FX stage. Has slide opts. Default 1.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf:</td>\n <td class=\"even\">\n<p>Global hpf FX. Has slide opts. Default 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf:</td>\n <td class=\"odd\">\n<p>Global lpf FX. Has slide opts. Default 135.5.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_bypass:</td>\n <td class=\"even\">\n<p>Bypass the global hpf. 0=no bypass, 1=bypass. Default 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_bypass:</td>\n <td class=\"odd\">\n<p>Bypass the global lpf. 0=no bypass, 1=bypass. Default 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">limiter_bypass:</td>\n <td class=\"even\">\n<p>Bypass the final limiter. 0=no bypass, 1=bypass. Default 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">leak_dc_bypass:</td>\n <td class=\"odd\">\n<p>Bypass the final DC leak correction FX. 0=no bypass, 1=bypass. Default 0.</p>\n\n </td>\n</tr>\n</table></p><h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_mixer_control! lpf: 30, lpf_slide: 16\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# slide the global lpf to 30 over 16 beats.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "synth": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Trigger specific synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">synth</span>  synth_name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Trigger specified synth with given opts. Bypasses <code>current_synth</code> value, yet still honours <code>current_synth_defaults</code>. When using <code>synth</code>, the note is no longer an explicit argument but an opt with the key <code>note:</code>.</p>\n\n<p>If note: opt is <code>nil</code>, <code>:r</code> or <code>:rest</code>, play is ignored and treated as a rest. Also, if the <code>on:</code> opt is specified and returns <code>false</code>, or <code>nil</code> then play is similarly ignored and treated as a rest.</p>\n\n<p>If the synth name is <code>nil</code> behaviour is identical to that of <code>play</code> in that the <code>current_synth</code> will determine the actual synth triggered.</p>\n\n<p>If a block is given, it is assumed to take one arg which will be the controllable synth node and the body of the block is run in an implicit <code>in_thread</code>. This allows for asynchronous control of the synth without interfering with time. For synchronous control capture the result of <code>synth</code> as a variable and use that.</p>\n\n<p>Note that the default opts listed are only a guide to the most common opts across all the synths. Not all synths support all the default opts and each synth typically supports many more opts specific to that synth. For example, the <code>:tb303</code> synth supports 45 unique opts. For a full list of a synth’s opts see its documentation in the Help system. This can be accessed directly by clicking on the name of the synth and using the shortcut <code>C-i</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the note</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for amplitude changes to take place</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pan_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for the pan value to change</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">slide:</td>\n <td class=\"even\">\n<p>Default slide time in beats for all slide opts. Individually specified slide opts will override this value</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">on:</td>\n <td class=\"even\">\n<p>If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_synth :beep           \nplay 60                   \n\nsynth :dsaw, note: 60   \n                        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set current synth to :beep\n# Play note 60 with opt defaults\n \n# Bypass current synth and play :dsaw\n# with note 60 and opt defaults\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nsynth :fm, note: 60, amp: 0.5\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play note 60 of the :fm synth with an amplitude of 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_synth_defaults release: 5\nsynth :dsaw, note: 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Play note 50 of the :dsaw synth with a release of 5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsynth :dsaw, notes: (chord :e3, :minor)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You can play chords with the notes: opt:\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nnotes = (scale :e3, :minor_pentatonic, num_octaves: 2)\n\nlive_loop :rhyth do\n  8.times do\n    trig = (spread 3, 7).tick(:rhyth)\n    synth :tri, on: trig, note: notes.tick, release: 0.1 \n                                                         \n                                                         \n    sleep 0.125\n  end\nend\n\n\nlive_loop :rhyth2 do\n  8.times do\n    trig = (spread 3, 7).tick(:rhyth)\n    synth :saw, note: notes.tick, release: 0.1 if trig \n                                                       \n                                                       \n    sleep 0.125\n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# on: vs if\n \n \n \n \n \n# Here, we&#39;re calling notes.tick\n# every time we attempt to play the synth\n# so the notes rise faster than rhyth2\n \n \n \n \n \n \n \n \n# Here, we&#39;re calling notes.tick\n# only when the spread says to play\n# so the notes rise slower than rhyth\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ns = synth :beep, note: :e3, release: 4\nsleep 1\ncontrol s, note: :e5\nsleep 0.5\nsynth :dsaw, note: :e3  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# controlling a synth synchronously\n \n \n \n \n# This is triggered after 1.5s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsynth :beep, note: :e3, release: 4 do |s|\n  sleep 1                                              \n  control s, note: :e5                                 \nend\n\nsleep 0.5\nsynth :dsaw, note: :e3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling a synth asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n \n# This is triggered after 0.5s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "play": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Play current synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">play</span>  note <span class=\"info\">(symbol_or_number)</span></pre></code></p>\n<p>Play note with current synth. Accepts a set of standard options which include control of an amplitude envelope with <code>attack:</code>, <code>decay:</code>, <code>sustain:</code> and <code>release:</code> phases. These phases are triggered in order, so the duration of the sound is attack + decay + sustain + release times. The duration of the sound does not affect any other notes. Code continues executing whilst the sound is playing through its envelope phases.</p>\n\n<p>If <code>duration:</code> is supplied and <code>sustain:</code> isn’t, it causes <code>sustain:</code> to be set so that all four phases add up to the duration.</p>\n\n<p>Accepts optional args for modification of the synth being played. See each synth’s documentation for synth-specific opts. See <code>use_synth</code> and <code>with_synth</code> for changing the current synth.</p>\n\n<p>If note is <code>nil</code>, <code>:r</code> or <code>:rest</code>, play is ignored and treated as a rest. Also, if the <code>on:</code> opt is specified and returns <code>false</code>, or <code>nil</code> then play is similarly ignored and treated as a rest.</p>\n\n<p>Note that the default opts listed are only a guide to the most common opts across all the synths. Not all synths support all the default opts and each synth typically supports many more opts specific to that synth. For example, the <code>:tb303</code> synth supports 45 unique opts. For a full list of a synth’s opts see its documentation in the Help system.</p>\n\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the note</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for amplitude changes to take place</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pan_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for the pan value to change</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">slide:</td>\n <td class=\"even\">\n<p>Default slide time in beats for all slide opts. Individually specified slide opts will override this value</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">on:</td>\n <td class=\"even\">\n<p>If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays note 50 on the current synth\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay 50, attack: 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Plays note 50 with a fade-in time of 1s\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 62, pan: -1, release: 3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Play note 62 in the left ear with a fade-out time of 3s.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ns = play :e3, release: 4\nsleep 1\ncontrol s, note: :e5\nsleep 0.5\nuse_synth :dsaw\nplay :e3  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# controlling a synth synchronously\n \n \n \n \n \n# This is triggered after 1.5s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nplay :e3, release: 4 do |s|\n  sleep 1                                              \n  control s, note: :e5                                 \nend\n\nsleep 0.5\nuse_synth :dsaw\nplay :e3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling a synth asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n \n \n# This is triggered after 0.5s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "play_pattern": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Play pattern of notes</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">play_pattern</span>  notes <span class=\"info\">(list)</span></pre></code></p>\n<p>Play list of notes with the current synth one after another with a sleep of 1</p>\n\n<p>Accepts optional args for modification of the synth being played. See each synth’s documentation for synth-specific opts. See use_synth and with_synth for changing the current synth.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_pattern [40, 41, 42]\n                         \n                         \n                         \n                         \n                         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Same as:\n#   play 40\n#   sleep 1\n#   play 41\n#   sleep 1\n#   play 42\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay_pattern [:d3, :c1, :Eb5]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You can use keyword notes\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_pattern [:d3, :c1, :Eb5], amp: 0.5, cutoff: 90\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Supports the same arguments as play:\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "play_pattern_timed": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Play pattern of notes with specific times</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">play_pattern_timed</span>  notes <span class=\"info\">(list)</span>, times <span class=\"info\">(list_or_number)</span></pre></code></p>\n<p>Play each note in a list of notes one after another with specified times between them. The notes should be a list of MIDI numbers, symbols such as :E4 or chords such as chord(:A3, :major) - identical to the first parameter of the play function. The times should be a list of times between the notes in beats.</p>\n\n<p>If the list of times is smaller than the number of gaps between notes, the list is repeated again. If the list of times is longer than the number of gaps between notes, then some of the times are ignored. See examples for more detail.</p>\n\n<p>Accepts optional args for modification of the synth being played. See each synth’s documentation for synth-specific opts. See <code>use_synth</code> and <code>with_synth</code> for changing the current synth.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the note</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for amplitude changes to take place</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pan_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for the pan value to change</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">slide:</td>\n <td class=\"even\">\n<p>Default slide time in beats for all slide opts. Individually specified slide opts will override this value</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">on:</td>\n <td class=\"even\">\n<p>If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_pattern_timed [40, 42, 44, 46], [1, 2, 3]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 2\nplay 44\nsleep 3\nplay 46\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# same as:\n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay_pattern_timed [40, 42, 44, 46, 49], [1, 0.5]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 0.5\nplay 44\nsleep 1\nplay 46\nsleep 0.5\nplay 49\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# same as:\n \n \n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_pattern_timed [40, 42, 44, 46], [0.5]\n\n\n\nplay 40\nsleep 0.5\nplay 42\nsleep 0.5\nplay 44\nsleep 0.5\nplay 46\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# same as:\n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay_pattern_timed [40, 42, 44], [1, 2, 3, 4, 5]\n\n\n\nplay 40\nsleep 1\nplay 42\nsleep 2\nplay 44\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n#same as:\n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "play_chord": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Play notes simultaneously</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">play_chord</span>  notes <span class=\"info\">(list)</span></pre></code></p>\n<p>Play a list of notes at the same time.</p>\n\n<p>Accepts optional args for modification of the synth being played. See each synth’s documentation for synth-specific opts. See <code>use_synth</code> and <code>with_synth</code> for changing the current synth.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">amp:</td>\n <td class=\"even\">\n<p>The amplitude of the note</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for amplitude changes to take place</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pan_slide:</td>\n <td class=\"odd\">\n<p>The duration in beats for the pan value to change</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">attack_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after attack phase and immediately before decay phase</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">decay_level:</td>\n <td class=\"odd\">\n<p>Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain_level:</td>\n <td class=\"even\">\n<p>Amplitude level reached after decay phase and immediately before release phase.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">slide:</td>\n <td class=\"even\">\n<p>Default slide time in beats for all slide opts. Individually specified slide opts will override this value</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">on:</td>\n <td class=\"even\">\n<p>If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_chord [40, 45, 47]\n\n\n\nplay 40\nplay 45\nplay 47\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# same as:\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay_chord [40, 45, 47], amp: 0.5\n\n\n\nplay 40, amp: 0.5\nplay 45, amp: 0.5\nplay 47, amp: 0.5\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# same as:\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay_chord chord(:e3, :minor)\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_merged_synth_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Merge synth defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_merged_synth_defaults</span>  </pre></code></p>\n<p>Specify synth arg values to be used by any following call to play. Merges the specified values with any previous defaults, rather than replacing them.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\n\nuse_merged_synth_defaults amp: 0.5\nplay 50\n\nuse_merged_synth_defaults cutoff: 80\nplay 50\n\nuse_merged_synth_defaults amp: 0.7\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; Plays note 50\n \n \n#=&gt; Plays note 50 with amp 0.5\n \n \n#=&gt; Plays note 50 with amp 0.5 and cutoff 80\n \n \n#=&gt; Plays note 50 with amp 0.7 and cutoff 80\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_synth_defaults amp: 0.5, cutoff: 80, pan: -1\nuse_merged_synth_defaults amp: 0.7\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n#=&gt; Plays note 50 with amp 0.7, cutoff 80 and pan -1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_merged_synth_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level merge synth defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_merged_synth_defaults</span>  </pre></code></p>\n<p>Specify synth arg values to be used by any following call to play within the specified <code>do</code>/<code>end</code> block. Merges the specified values with any previous synth defaults, rather than replacing them. After the <code>do</code>/<code>end</code> block has completed, previous defaults (if any) are restored.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nwith_merged_synth_defaults amp: 0.5, pan: 1 do\n  play 50\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# =&gt; plays note 50 with amp 0.5 and pan 1\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nplay 50\nwith_merged_synth_defaults amp: 0.5 do\n  play 50\n\n  with_merged_synth_defaults pan: -1 do\n    with_merged_synth_defaults amp: 0.7 do\n      play 50\n    end\n  end\n  play 50\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; plays note 50\n \n#=&gt; plays note 50 with amp 0.5\n \n \n \n#=&gt; plays note 50 with amp 0.7 and pan -1\n \n \n#=&gt; plays note 50 with amp 0.5\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_synth_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Use new synth defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_synth_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all subsequent calls to <code>play</code>. Will remove and override any previous defaults.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\n\nuse_synth_defaults amp: 0.5, cutoff: 70\n\nplay 50\n\nuse_synth_defaults cutoff: 90\n\nplay 50\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays note 50 with default arguments\n \n \n \n# plays note 50 with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays note 50 with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_sample_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Use new sample defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_sample_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all subsequent calls to <code>sample</code>. Will remove and override any previous defaults.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\n\nuse_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nuse_sample_defaults cutoff: 90\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays amen break with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_merged_sample_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Merge new sample defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_merged_sample_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all subsequent calls to <code>sample</code>. Merges the specified values with any previous defaults, rather than replacing them.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\n\nuse_merged_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nuse_merged_sample_defaults cutoff: 90\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n \n# plays amen break with a cutoff of 90 and and an amp of 0.5 with defaults for rest of args\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_sample_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level use new sample defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_sample_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all subsequent calls to <code>sample</code> within the <code>do</code>/<code>end</code> block. After the <code>do</code>/<code>end</code> block has completed, the previous sampled defaults (if any) are restored. For the contents of the block, will remove and override any previous defaults.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\n\nuse_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nwith_sample_defaults cutoff: 90 do\n  sample :loop_amen \nend\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n# plays amen break with a cutoff of 90 and defaults for rest of args - note that amp is no longer 0.5\n \n \n# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous defaults are restored.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_merged_sample_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level use merged sample defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_merged_sample_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all subsequent calls to <code>sample</code> within the <code>do</code>/<code>end</code> block.  Merges the specified values with any previous sample defaults, rather than replacing them. After the <code>do</code>/<code>end</code> block has completed, the previous sampled defaults (if any) are restored.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\n\nuse_merged_sample_defaults amp: 0.5, cutoff: 70\n\nsample :loop_amen\n\nwith_merged_sample_defaults cutoff: 90 do\n  sample :loop_amen \nend\n\nsample :loop_amen \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays amen break with default arguments\n \n \n \n# plays amen break with an amp of 0.5, cutoff of 70 and defaults for rest of args\n \n \n# plays amen break with a cutoff of 90 and amp of 0.5\n \n \n# plays amen break with a cutoff of 70 and amp is 0.5 again as the previous defaults are restored.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_synth_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level use new synth defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_synth_defaults</span>  </pre></code></p>\n<p>Specify new default values to be used by all calls to <code>play</code> within the <code>do</code>/<code>end</code> block. After the <code>do</code>/<code>end</code> block has completed the previous synth defaults (if any) are restored.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 50\n\nuse_synth_defaults amp: 0.5, pan: -1\n\nplay 50\n\nwith_synth_defaults amp: 0.6, cutoff: 80 do\n  play 50\nend\n\nplay 60\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays note 50 with default arguments\n \n \n \n# plays note 50 with an amp of 0.5, pan of -1 and defaults for rest of args\n \n \n# plays note 50 with an amp of 0.6, cutoff of 80 and defaults for rest of args (including pan)\n \n \n# plays note 60 with an amp of 0.5, pan of -1 and defaults for rest of args\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_fx": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Use Studio FX</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_fx</span>  fx_name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>This applies the named effect (FX) to everything within a given <code>do</code>/<code>end</code> block. Effects may take extra parameters to modify their behaviour. See FX help for parameter details.</p>\n\n<p>For advanced control, it is also possible to modify the parameters of an effect within the body of the block. If you define the block with a single argument, the argument becomes a reference to the current effect and can be used to control its parameters (see examples).</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">reps:</td>\n <td class=\"even\">\n<p>Number of times to repeat the block in an iteration.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">kill_delay:</td>\n <td class=\"odd\">\n<p>Amount of time to wait after all synths triggered by the block have completed before stopping and freeing the effect synthesiser.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nwith_fx :distortion do\n  play 50\n  sleep 1\n  sample :loop_amen\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic usage\n# Use the distortion effect with default parameters\n# =&gt; plays note 50 with distortion\n \n# =&gt; plays the loop_amen sample with distortion too\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nwith_fx :level, amp: 0.3 do\n  play 50\n  sleep 1\n  sample :loop_amen\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Specify effect parameters\n# Use the level effect with the amp parameter set to 0.3\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nwith_fx :reverb, mix: 0.1 do |fx|\n \n \n\n  play 60\n  sleep 2\n\n  control fx, mix: 0.5\n  play 60\n  sleep 2\n\n  control fx, mix: 1\n  play 60\n  sleep 2\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling the effect parameters within the block\n \n# here we set the reverb level quite low to start with (0.1)\n# and we can change it later by using the &#39;fx&#39; reference we&#39;ve set up\n \n# plays note 60 with a little bit of reverb\n \n \n# change the parameters of the effect to add more reverb\n# again note 60 but with more reverb\n \n \n# change the parameters of the effect to add more reverb\n# plays note 60 with loads of reverb\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nwith_fx :reverb, reps: 16 do\n  play (scale :e3, :minor_pentatonic), release: 0.1\n  sleep 0.125\nend\n\n\nwith_fx :reverb do\n  16.times do\n    play (scale :e3, :minor_pentatonic), release: 0.1\n    sleep 0.125\n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Repeat the block 16 times internally\n \n \n \n \n \n# The above is a shorthand for this:\n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_synth": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_synth</span>  </pre></code></p>\n<p>Returns the current synth name.</p>\n\n<p>This can be set via the fns <code>use_synth</code> and <code>with_synth</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_synth\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current synth name\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_synth_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current synth defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_synth_defaults</span>  </pre></code></p>\n<p>Returns the current synth defaults. This is a map of synth arg names to values.</p>\n\n<p>This can be set via the fns <code>use_synth_defaults</code>, <code>with_synth_defaults</code>, <code>use_merged_synth_defaults</code> and <code>with_merged_synth_defaults</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_synth_defaults amp: 0.5, cutoff: 80\nplay 50\nputs current_synth_defaults\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Plays note 50 with amp 0.5 and cutoff 80\n#=&gt; Prints {amp: 0.5, cutoff: 80}\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_sample_defaults": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current sample defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_sample_defaults</span>  </pre></code></p>\n<p>Returns the current sample defaults. This is a map of synth arg names to either values or functions.</p>\n\n<p>This can be set via the fns <code>use_sample_defaults</code>, <code>with_sample_defaults</code>, <code>use_merged_sample_defaults</code> and <code>with_merged_sample_defaults</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_sample_defaults amp: 0.5, cutoff: 80\nsample :loop_amen\nputs current_sample_defaults\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Plays amen break with amp 0.5 and cutoff 80\n#=&gt; Prints {amp: 0.5, cutoff: 80}\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_volume": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current volume</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_volume</span>  </pre></code></p>\n<p>Returns the current volume.</p>\n\n<p>This can be set via the fn <code>set_volume!</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_volume\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current volume\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nset_volume! 2\nputs current_volume\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_debug": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current debug status</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_debug</span>  </pre></code></p>\n<p>Returns the current debug setting (<code>true</code> or <code>false</code>).</p>\n\n<p>This can be set via the fns <code>use_debug</code> and <code>with_debug</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_debug\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current debug setting\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_arg_checks": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current arg checking status</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_arg_checks</span>  </pre></code></p>\n<p>Returns the current arg checking setting (<code>true</code> or <code>false</code>).</p>\n\n<p>This can be set via the fns <code>use_arg_checks</code> and <code>with_arg_checks</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_arg_checks\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current arg check setting\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_volume!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set Volume globally</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_volume!</span>  vol <span class=\"info\">(number)</span></pre></code></p>\n<p>Set the main system volume to <code>vol</code>. Accepts a value between <code>0</code> and <code>5</code> inclusive. Vols greater or smaller than the allowed values are trimmed to keep them within range. Default is <code>1</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_volume! 2\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the main system volume to 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nset_volume! -1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Out of range, so sets main system volume to 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_volume! 7\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Out of range, so sets main system volume to 5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_loaded?": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Test if sample was pre-loaded</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_loaded?</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Given a path to a <code>.wav</code>, <code>.wave</code>, <code>.aif</code>, <code>.aiff</code>, <code>.ogg</code>, <code>.oga</code> or <code>.flac</code> file, returns <code>true</code> if the sample has already been loaded.</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_sample :elec_blip\nputs sample_loaded? :elec_blip\nputs sample_loaded? :misc_burp\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# :elec_blip is now loaded and ready to play as a sample\n# prints true because it has been pre-loaded\n# prints false because it has not been loaded\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "load_sample": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pre-load first matching sample</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">load_sample</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Given a path to a <code>.wav</code>, <code>.wave</code>, <code>.aif</code>, <code>.aiff</code>, <code>.ogg</code>, <code>.oga</code> or <code>.flac</code> file, pre-loads the sample into memory.</p>\n\n<p>You may also specify the same set of source and filter pre-args available to <code>sample</code> itself. <code>load_sample</code> will then load all matching samples. See <code>sample</code>’s docs for more information.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_sample :elec_blip\nsample :elec_blip\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# :elec_blip is now loaded and ready to play as a sample\n# No delay takes place when attempting to trigger it\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ndir = &quot;/path/to/sample/dir&quot;\nload_sample dir\nload_sample dir, 1\nload_sample dir, :foo\nload_sample dir, &quot;quux&quot;\nload_sample dir, /[Bb]ar/\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Using source and filter pre-args\n \n# loads first matching sample in &quot;/path/to/sample/dir&quot;\n# loads sample with index 1 in &quot;/path/to/sample/dir&quot;\n# loads sample with name &quot;foo&quot; in &quot;/path/to/sample/dir&quot;\n# loads first sample with file name containing &quot;quux&quot; in &quot;/path/to/sample/dir&quot;\n# loads first sample which matches regex /[Bb]ar/ in &quot;/path/to/sample/dir&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "load_samples": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Pre-load all matching samples</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">load_samples</span>  paths <span class=\"info\">(list)</span></pre></code></p>\n<p>Given a directory containing multiple <code>.wav</code>, <code>.wave</code>, <code>.aif</code>, <code>.aiff</code>, <code>.ogg</code>, <code>.oga</code> or <code>.flac</code> files, pre-loads all the samples into memory.</p>\n\n<p>You may also specify the same set of source and filter pre-args available to <code>sample</code> itself. <code>load_sample</code> will load all matching samples (not just the sample <code>sample</code> would play given the same opts) - see <code>sample</code>’s docs for more information.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_sample :elec_blip\n sample :elec_blip\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# :elec_blip is now loaded and ready to play as a sample\n# No delay takes place when attempting to trigger it\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n dir = &quot;/path/to/sample/dir&quot;\n load_sample dir\n load_sample dir, 1\n load_sample dir, :foo\n load_sample dir, &quot;quux&quot;\n load_sample dir, /[Bb]ar/\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Using source and filter pre-args\n \n# loads all samples in &quot;/path/to/sample/dir&quot;\n# loads sample with index 1 in &quot;/path/to/sample/dir&quot;\n# loads sample with name &quot;foo&quot; in &quot;/path/to/sample/dir&quot;\n# loads all samples with file names containing &quot;quux&quot; in &quot;/path/to/sample/dir&quot;\n# loads all samples which match regex /[Bb]ar/ in &quot;/path/to/sample/dir&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_info": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get sample information</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_info</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Alias for the <code>load_sample</code> method. Loads sample if necessary and returns sample information.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsee load_sample\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_buffer": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get sample data</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_buffer</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Alias for the <code>load_sample</code> method. Loads sample if necessary and returns buffer information.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsee load_sample\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_duration": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get duration of sample in beats</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_duration</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Given the name of a loaded sample, or a path to a <code>.wav</code>, <code>.wave</code>, <code>.aif</code>, <code>.aiff</code>, <code>.ogg</code>, <code>.oga</code> or <code>.flac</code> file returns the length of time in beats that the sample would play for. <code>sample_duration</code> understands and accounts for all the opts you can pass to <code>sample</code> which have an effect on the playback duration such as <code>rate:</code>. The time returned is scaled to the current BPM.</p>\n\n<p><em>Note:</em> avoid using <code>sample_duration</code> to set the sleep time in <code>live_loop</code>s, prefer stretching the sample with the <code>beat_stretch:</code> opt or changing the BPM instead. See the examples below for details.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">rate:</td>\n <td class=\"even\">\n<p>Rate modifier. For example, doubling the rate will halve the duration.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">start:</td>\n <td class=\"odd\">\n<p>Start position of sample playback as a value from 0 to 1</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">finish:</td>\n <td class=\"even\">\n<p>Finish position of sample playback as a value from 0 to 1</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Duration of the attack phase of the envelope.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">decay:</td>\n <td class=\"even\">\n<p>Duration of the decay phase of the envelope.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">sustain:</td>\n <td class=\"odd\">\n<p>Duration of the sustain phase of the envelope.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">release:</td>\n <td class=\"even\">\n<p>Duration of the release phase of the envelope.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">beat_stretch:</td>\n <td class=\"odd\">\n<p>Change the rate of the sample so that its new duration matches the specified number of beats.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pitch_stretch:</td>\n <td class=\"even\">\n<p>Change the rate of the sample so that its new duration matches the specified number of beats but attempt to preserve pitch.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">rpitch:</td>\n <td class=\"odd\">\n<p>Change the rate to shift the pitch up or down the specified number of MIDI notes.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nputs sample_duration(:loop_garzul)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple use\n# returns 8.0 because this sample is 8 seconds long\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nuse_bpm 120\nputs sample_duration(:loop_garzul)\nuse_bpm 90\nputs sample_duration(:loop_garzul)\nuse_bpm 21\nputs sample_duration(:loop_garzul)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# The result is scaled to the current BPM\n \n# =&gt; 16.0\n \n# =&gt; 12.0\n \n# =&gt; 2.8\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nlive_loop :avoid_this do              \n  with_fx :slicer do                  \n    sample :loop_amen                 \n    sleep sample_duration(:loop_amen) \n  end                                 \nend\n\nlive_loop :prefer_this do             \n  use_sample_bpm :loop_amen           \n  with_fx :slicer do                  \n    sample :loop_amen\n    sleep 1\n  end\nend\n\nlive_loop :or_this do                 \n  with_fx :slicer do                  \n    sample :loop_amen, beat_stretch: 1\n    sleep 1\n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Avoid using sample_duration to set the sleep time in live_loops\n \n# It is possible to use sample_duration to drive the frequency of a live loop.\n# However, if you&#39;re using a rhythmical sample such as a drum beat and it isn&#39;t\n# in the same BPM as the current BPM, then the FX such as this slicer will be\n# badly out of sync. This is because the slicer slices at the current BPM and\n# this live_loop is looping at a different BPM (that of the sample)\n \n \n# Instead prefer to set the BPM of the live_loop to match the sample. It has\n# two benefits. Now our sleep is a nice and simple 1 (as it&#39;s one beat).\n# Also, our slicer now works with the beat and sounds much better.\n \n \n \n \n \n# Alternatively we can beat_stretch the sample to match the current BPM. This has the\n# side effect of changing the rate of the sample (and hence the pitch). However, the\n# FX works nicely in time and the sleep time is also a simple 1.\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n                                                                 \nsample_duration :loop_garzul, rate: 1                            \n\n                                                                 \nsample_duration :loop_garzul, rate: 0.5                          \n\n                                                                 \nsample_duration :loop_garzul, rate: 2                            \n\n                                                                 \nsample_duration :loop_garzul, rate: -2                           \n\n                                                                 \nsample_duration :loop_garzul, attack: 1                          \nsample_duration :loop_garzul, attack: 100                        \nsample_duration :loop_garzul, attack: 0                          \n\n                                                                 \nsample_duration :loop_garzul, release: 1                         \nsample_duration :loop_garzul, release: 100                       \nsample_duration :loop_garzul, release: 0                         \n\n                                                                 \nsample_duration :loop_garzul, decay: 1                           \nsample_duration :loop_garzul, decay: 100                         \nsample_duration :loop_garzul, decay: 0                           \n\n                                                                 \n                                                                 \n                                                                 \nsample_duration :loop_garzul, sustain: 0, attack: 0.5            \nsample_duration :loop_garzul, sustain: 0, decay: 0.1             \nsample_duration :loop_garzul, sustain: 0, release: 1             \nsample_duration :loop_garzul, sustain: 2, attack: 0.5, release: 1\n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, sustain: 0, attack: 8, release: 3  \n\n\n                                                                 \nsample_duration :loop_garzul, rate: 10                           \nsample_duration :loop_garzul, sustain: 0, attack: 0.9, rate: 10  \n\n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, rpitch: 12                         \nsample_duration :loop_garzul, rpitch: -12                        \n\n                                                                 \nsample_duration :loop_garzul, rpitch: 12, rate: 2                \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, beat_stretch: 3                    \nsample_duration :loop_garzul, beat_stretch: 3, rate: 0.5         \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, pitch_stretch: 3                   \nsample_duration :loop_garzul, pitch_stretch: 3, rate: 0.5        \n\n                                                                 \n                                                                 \nsample_duration :loop_garzul, start: 0.5                         \nsample_duration :loop_garzul, start: 0.5, finish: 0.75           \nsample_duration :loop_garzul, finish: 0.5, start: 0.75           \nsample_duration :loop_garzul, rate: 2, finish: 0.5, start: 0.75\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# The standard sample opts are also honoured\n \n# Playing a sample at standard speed will return standard length\n# =&gt; 8.0\n \n# Playing a sample at half speed will double duration\n# =&gt; 16.0\n \n# Playing a sample at double speed will halve duration\n# =&gt; 4.0\n \n# Playing a sample backwards at double speed will halve duration\n# =&gt; 4.0\n \n# Without an explicit sustain: opt attack: just affects amplitude not duration\n# =&gt; 8.0\n# =&gt; 8.0\n# =&gt; 8.0\n \n# Without an explicit sustain: opt release: just affects amplitude not duration\n# =&gt; 8.0\n# =&gt; 8.0\n# =&gt; 8.0\n \n# Without an explicit sustain: opt decay: just affects amplitude not duration\n# =&gt; 8.0\n# =&gt; 8.0\n# =&gt; 8.0\n \n# With an explicit sustain: opt, if the attack + decay + sustain + release envelope\n# duration is less than the sample duration time, the envelope will shorten the\n# sample time.\n# =&gt; 0.5\n# =&gt; 0.1\n# =&gt; 1.0\n# =&gt; 3.5\n \n# If the envelope duration is longer than the sample it will not affect the\n# sample duration\n# =&gt; 8\n \n \n# All other opts are taken into account before the comparison with the envelope opts.\n# =&gt; 0.8\n# =&gt; 0.8 (The duration of the sample is less than the envelope length so wins)\n \n \n# The rpitch: opt will modify the rate to shift the pitch of the sample up and down\n# and therefore affects duration.\n# =&gt; 4.0\n# =&gt; 16\n \n# The rpitch: and rate: opts combine together.\n# =&gt; 2.0\n \n# The beat_stretch: opt stretches the sample so that its duration matches the value.\n# It also combines with rate:\n# =&gt; 3.0\n# =&gt; 6.0\n \n# The pitch_stretch: opt acts identically to beat_stretch when just considering sample\n# duration.\n# =&gt; 3.0\n# =&gt; 6.0\n \n# The start: and finish: opts can also shorten the sample duration and also combine\n# with other opts such as rate:\n# =&gt; 4.0\n# =&gt; 2.0\n# =&gt; 2.0\n# =&gt; 1.0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nsample :loop_amen                   \nsleep sample_duration(:loop_amen)   \nsample :loop_amen                   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Triggering samples one after another\n \n# start the :loop_amen sample\n# wait for the duration of :loop_amen before\n# starting it again\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_paths": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sample Pack Filter Resolution</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_paths</span>  pre_args <span class=\"info\">(source_and_filter_types)</span></pre></code></p>\n<p>Accepts the same pre-args and opts as <code>sample</code> and returns a ring of matched sample paths.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample_paths &quot;/path/to/samples/&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; ring of all top-level samples in /path/to/samples\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nsample_paths &quot;/path/to/samples/**&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; ring of all nested samples in /path/to/samples\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample_paths &quot;/path/to/samples/&quot;, &quot;foo&quot;\n                                                containing the string &quot;foo&quot; in their filename.\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; ring of all samples in /path/to/samples\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Trigger sample</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample</span>  name_or_path <span class=\"info\">(symbol_or_string)</span></pre></code></p>\n<p>Play back a recorded sound file (sample). Sonic Pi comes with lots of great samples included (see the section under help) but you can also load and play <code>.wav</code>, <code>.wave</code>, <code>.aif</code>, <code>.aiff</code>, <code>.ogg</code>, <code>.oga</code> or <code>.flac</code> files from anywhere on your computer too. To play a built-in sample use the corresponding keyword such as <code>sample :bd_haus</code>. To play any file on your computer use a full path such as <code>sample \"/path/to/sample.wav\"</code>.</p>\n\n<p>There are many opts for manipulating the playback. For example, the <code>rate:</code> opt affects both the speed and the pitch of the playback. To control the rate of the sample in a pitch-meaningful way take a look at the <code>rpitch:</code> opt.</p>\n\n<p>The sampler synth has three separate envelopes - one for amplitude, one for a low pass filter and another for a high pass filter. These work very similar to the standard synth envelopes except for two major differences. Firstly, the envelope times do not stretch or shrink to match the BPM. Secondly, the sustain time by default stretches to make the envelope fit the length of the sample. This is explained in detail in the tutorial.</p>\n\n<p>Samples are loaded on-the-fly when first requested (and subsequently remembered). If the sample loading process takes longer than the schedule ahead time, the sample trigger will be skipped rather than be played late and out of time. To avoid this you may preload any samples you wish to work with using <code>load_sample</code> or <code>load_samples</code>.</p>\n\n<p>It is possible to set the <code>start:</code> and <code>finish:</code> positions within the sample to play only a sub-section of it. These values can be automatically chosen based on an onset detection algorithm which will essentially isolate each individual drum or synth hit in the sample and let you access each one by an integer index (floats will be rounded to the nearest integer value). See the <code>onset:</code> docstring and examples for more information.</p>\n\n<p>Finally, the sampler supports a powerful filtering system to make it easier to work with large folders of samples. The filter commands must be used before the first standard opt. There are six kinds of filter parameters you may use:</p>\n\n<ol>\n  <li>Folder strings - <code>\"/foo/bar\"</code> - which will add all samples within the folder to the set of candidates.</li>\n  <li>Recursive folder strings - <code>\"/foo/bar/**\"</code> - Folder strings ending with <code>**</code> will add all samples contained within all subfolders (searched recursively).</li>\n  <li>Sample strings - <code>\"/path/to/sample.wav\"</code> - which will add the specific sample to the set of candidates.</li>\n  <li>Other strings - <code>\"foobar\"</code> - which will filter the candidates based on whether the filename contains the string.</li>\n  <li>Regular expressions - <code>/b[aA]z.*/</code> - which will filter the candidates based on whether the regular expression matches the filename.</li>\n  <li>Keywords - <code>:quux</code> - will filter the candidates based on whether the keyword is a direct match of the filename (without extension).</li>\n  <li>Numbers - <code>0</code> - will select the candidate with that index (wrapping round like a ring if necessary).</li>\n  <li>Lists of the above - <code>[\"/foo/bar\", \"baz\", /0-9.*/]</code> - will recurse down and work through the internal filter parameters as if they were in the top level.</li>\n  <li>Lambdas - <code>lambda {|s| [s.choose] }</code> - the ultimate power tool for filters. Allows you to create a custom fn which receives a list of candidates as an arg and which should return a new list of candidates (this may be smaller, larger, re-ordered it’s up to you).</li>\n</ol>\n\n<p>By combining commands which add to the candidates and then filtering those candidates it is possible to work with folders full of samples in very powerful ways. Note that the specific ordering of filter parameters is irrelevant with the exception of the numbers - in which case the last number is the index. All the candidates will be gathered first before the filters are applied.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">rate:</td>\n <td class=\"even\">\n<p>Rate with which to play back the sample. Higher rates mean an increase in pitch and a decrease in duration. Default is 1.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">beat_stretch:</td>\n <td class=\"odd\">\n<p>Stretch (or shrink) the sample to last for exactly the specified number of beats. Please note - this does <em>not</em> keep the pitch constant and is essentially the same as modifying the rate directly.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pitch_stretch:</td>\n <td class=\"even\">\n<p>Stretch (or shrink) the sample to last for exactly the specified number of beats. This attempts to keep the pitch constant using the <code>pitch:</code> opt. Note, it’s very likely you’ll need to experiment with the <code>window_size:</code>, <code>pitch_dis:</code> and <code>time_dis:</code> opts depending on the sample and the amount you’d like to stretch/shrink from original size.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">attack:</td>\n <td class=\"odd\">\n<p>Time to reach full volume. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sustain:</td>\n <td class=\"even\">\n<p>Time to stay at full volume. Default is to stretch to length of sample (minus attack and release times).</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">release:</td>\n <td class=\"odd\">\n<p>Time (from the end of the sample) to go from full amplitude to 0. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">start:</td>\n <td class=\"even\">\n<p>Position in sample as a fraction between 0 and 1 to start playback. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">finish:</td>\n <td class=\"odd\">\n<p>Position in sample as a fraction between 0 and 1 to end playback. Default is 1.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pan:</td>\n <td class=\"even\">\n<p>Stereo position of audio. -1 is left ear only, 1 is right ear only, and values in between position the sound accordingly. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">amp:</td>\n <td class=\"odd\">\n<p>Amplitude of playback.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">pre_amp:</td>\n <td class=\"even\">\n<p>Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">onset:</td>\n <td class=\"odd\">\n<p>Analyse the sample with an onset detection algorithm and automatically set or override the <code>start:</code> and <code>finish:</code> opts to play the nth onset only. Allows you to treat a rhythm sample as a palette of individual drum/synth hits. If <code>start:</code> or <code>finish:</code> opts are used in addition to <code>onset:</code> then they will work within the onset rather than the whole sample. Floats are rounded to the nearest whole number.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">on:</td>\n <td class=\"even\">\n<p>If specified and false/nil/0 will stop the sample from being played. Ensures all opts are evaluated.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">slice:</td>\n <td class=\"odd\">\n<p>Divides the sample duration evenly into <code>num_slices:</code> sections (defaults to 16) and set the <code>start:</code> and <code>finish:</code> opts to play the nth slice only. If <code>start:</code> or <code>finish:</code> opts are used in addition to <code>slice:</code> then they will work within the slice rather than the whole sample. Use the envelope opts to remove any clicks introduced if the slice boundary is in the middle of a sound. Also consider <code>onset:</code> as an alternative to <code>slice:</code>. If <code>onset:</code> is also used then the slices will be within the onset rather than the whole sample. Floats are rounded to the nearest whole number.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">num_slices:</td>\n <td class=\"even\">\n<p>Number of slices to divide the sample into when using the <code>slice:</code> opt. Defaults to 16. Floats are rounded to the nearest whole number.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">norm:</td>\n <td class=\"odd\">\n<p>Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf:</td>\n <td class=\"even\">\n<p>Cutoff value of the built-in low pass filter (lpf) in MIDI notes. Unless specified, the lpf is <em>not</em> added to the signal chain.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_init_level:</td>\n <td class=\"odd\">\n<p>The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the <code>lpf_min:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf_attack_level:</td>\n <td class=\"even\">\n<p>The peak lpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the <code>lpf_decay_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_decay_level:</td>\n <td class=\"odd\">\n<p>The level of lpf cutoff after the decay phase as a MIDI note. Default value is to match the <code>lpf_sustain_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf_sustain_level:</td>\n <td class=\"even\">\n<p>The sustain cutoff (value of lpf cutoff at sustain time) as a MIDI note. Default value is to match the <code>lpf_release_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_release_level:</td>\n <td class=\"odd\">\n<p>The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the <code>lpf:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf_attack:</td>\n <td class=\"even\">\n<p>Attack time for lpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope’s attack value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_decay:</td>\n <td class=\"odd\">\n<p>Decay time for lpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope’s decay value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf_sustain:</td>\n <td class=\"even\">\n<p>Amount of time for lpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from lpf cutoff sustain value to lpf cutoff min value. Default value is set to match amp envelope’s release value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">lpf_min:</td>\n <td class=\"even\">\n<p>Starting value of the lpf cutoff envelope. Default is 30.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">lpf_env_curve:</td>\n <td class=\"odd\">\n<p>Select the shape of the curve between levels in the lpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf:</td>\n <td class=\"even\">\n<p>Cutoff value of the built-in high pass filter (hpf) in MIDI notes. Unless specified, the hpf is <em>not</em> added to the signal chain.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_init_level:</td>\n <td class=\"odd\">\n<p>The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_attack_level:</td>\n <td class=\"even\">\n<p>The peak hpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the <code>hpf_decay_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_decay_level:</td>\n <td class=\"odd\">\n<p>The level of hpf cutoff after the decay phase as a MIDI note. Default value is to match the <code>hpf_sustain_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_sustain_level:</td>\n <td class=\"even\">\n<p>The sustain cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the <code>hpf_release_level:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_release_level:</td>\n <td class=\"odd\">\n<p>The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the <code>hpf:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_attack:</td>\n <td class=\"even\">\n<p>Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope’s attack value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_decay:</td>\n <td class=\"odd\">\n<p>Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope’s decay value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_sustain:</td>\n <td class=\"even\">\n<p>Amount of time for hpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_release:</td>\n <td class=\"odd\">\n<p>Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope’s release value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">hpf_env_curve:</td>\n <td class=\"even\">\n<p>Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">hpf_max:</td>\n <td class=\"odd\">\n<p>Maximum value of the high pass filter envelope. Default is 200.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">rpitch:</td>\n <td class=\"even\">\n<p>Rate modified pitch. Multiplies the rate by the appropriate ratio to shift up or down the specified amount in MIDI notes. Please note - this does <em>not</em> keep the duration and rhythmical rate constant and is essentially the same as modifying the rate directly.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch:</td>\n <td class=\"odd\">\n<p>Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">window_size:</td>\n <td class=\"even\">\n<p>Pitch shift-specific opt - only honoured if the <code>pitch:</code> opt is used. Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed. The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pitch_dis:</td>\n <td class=\"odd\">\n<p>Pitch shift-specific opt - only honoured if the <code>pitch:</code> opt is used. Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to “soften up” the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the <code>pitch:</code> opt).</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">time_dis:</td>\n <td class=\"even\">\n<p>Pitch shift-specific opt - only honoured if the <code>pitch:</code> opt is used. Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won’t have an effect if it’s larger than window_size.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">compress:</td>\n <td class=\"odd\">\n<p>Enable the compressor. This sits at the end of the internal FX chain immediately before the <code>amp:</code> opt. Therefore to drive the compressor use the <code>pre_amp:</code> opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it’s quiet. Useful for ensuring the containing signal doesn’t overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">threshold:</td>\n <td class=\"even\">\n<p>Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the <code>compress:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">slope_below:</td>\n <td class=\"odd\">\n<p>Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the <code>compress:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">slope_above:</td>\n <td class=\"even\">\n<p>Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the <code>compress:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">clamp_time:</td>\n <td class=\"odd\">\n<p>Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the <code>compress:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">relax_time:</td>\n <td class=\"even\">\n<p>Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the <code>compress:</code> opt.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">slide:</td>\n <td class=\"odd\">\n<p>Default slide time in beats for all slide opts. Individually specified slide opts will override this value.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">path:</td>\n <td class=\"even\">\n<p>Path of the sample to play. Typically this opt is rarely used instead of the more powerful source/filter system. However it can be useful when working with pre-made opt maps.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Play a built-in sample\n# Plays the Amen break\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nsample :loop_amen\nsample :ambi_lunar_land\n                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play two samples at the same time\n# with incredible timing accuracy\n \n# Note, for timing guarantees select the pref:\n#   Studio -&gt; Synths and FX -&gt; Enforce timing guarantees\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :bass do\n  sample :bd_haus\n  sleep 0.5\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Create a simple repeating bass drum\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :rhythm do\n  sample :tabla_ghe3 if (spread 5, 7).tick\n  sleep 0.125\nend\nlive_loop :bd, sync: :rhythm do\n  sample :bd_haus, lpf: 90, amp: 2\n  sleep 0.5\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Create a more complex rhythm with multiple live loops:\n \n \n \n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, rate: 0.5\n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Change the playback speed of the sample using rate:\n# Play the Amen break at half speed\n# for old school hip-hop\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_amen, rate: 1.5\n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Speed things up\n# Play the Amen break at 1.5x speed\n# for a jungle/gabba sound\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, rate: -1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Go backwards\n# Negative rates play the sample backwards\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_amen, rate: -3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Fast rewind\n# Play backwards at 3x speed for a fast rewind effect\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 9</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, start: 0.5\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Start mid sample\n# Start playback half way through\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 10</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_amen, finish: 0.5\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Finish mid sample\n# Finish playback half way through\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 11</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, start: 0.125, finish: 0.25\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Play part of a sample\n# Play the second eighth of the sample\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 12</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_amen, start: 0.25, finish: 0.125\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Finishing before the start plays backwards\n# Play the second eighth of the sample backwards\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 13</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, start: 0.125, finish: 0.25, rate: -0.25\n                                                          \n                                                          \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Play a section of a sample at quarter speed backwards\n# Play the second eighth of the\n# amen break backwards at a\n# quarter speed\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 14</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ns = sample :loop_amen, lpf: 70\nsleep 0.5\ncontrol s, lpf: 130\nsleep 0.5\nsynth :dsaw, note: :e3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Control a sample synchronously\n \n \n \n \n# This is triggered 1s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 15</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_amen, lpf: 70 do |s|\n  sleep 1                               \n  control s, lpf: 130                   \nend\nsleep 0.5\nsynth :dsaw, note: :e3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling a sample asynchronously\n \n# This block is run in an implicit in_thread\n# and therefore is asynchronous\n \n \n# This is triggered 0.5s from start\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 16</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_garzul, slice: 0     \nsleep 0.5\n4.times do\n  sample :loop_garzul, slice: 1   \n  sleep 0.125\nend\nsample :loop_garzul, slice: 4, num_slices: 4, rate: -1     \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play with slices\n# =&gt; play the first 16th of the sample\n \n \n# =&gt; play the second 16th of the sample 4 times\n \n \n# =&gt; play the final quarter backwards\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 17</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nuse_sample_bpm :loop_amen                   \nlive_loop :beat_slicer do\n  n = 8                                     \n                                            \n  s = rand_i n                              \n  sample :loop_amen, slice: s, num_slices: n\n  sleep 1.0/n                               \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Build a simple beat slicer\n# Set the BPM to match the amen break sample\n \n# Specify number of slices\n# (try changing to 2, 4, 6, 16 or 32)\n# Choose a random slice within range\n# Play the specific part of the sample\n# Sleep for the duration of the slice\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 18</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nsample :loop_amen, lpf: 80, hpf: 70, compress: 1, pre_amp: 10\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play with the built-in low pass filter, high pass filter and compressor\n# Make the amen break sound punchy.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 19</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample :loop_garzul, lpf_attack: 8\nsleep 8\nsample :loop_garzul, hpf_attack: 8\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Use the cutoff filter envelopes\n# Sweep the low pass filter up over 8 beats\n \n# Sweep the high pass filter down over 8 beats\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 20</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs sample_duration :loop_industrial                  \nputs sample_duration :loop_industrial, beat_stretch: 1 \nlive_loop :industrial do\n  sample :loop_industrial, beat_stretch: 1             \n  sleep 1                                              \n                                                       \n                                                       \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sample stretching\n# =&gt; 0.88347\n# =&gt; 1\n \n# Stretch the sample to make it 1 beat long\n# This now loops perfectly.\n# However, note that stretching/shrinking\n# also modifies the pitch.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 21</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nputs sample_duration :loop_garzul                      \nputs sample_duration :loop_garzul, beat_stretch: 6     \nlive_loop :garzul do\n  sample :loop_garzul, beat_stretch: 6                 \n                                                       \n                                                       \n  sleep 6\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Sample shrinking\n# =&gt; 8\n# =&gt; 6\n \n# As :loop_garzul is longer than 6 beats\n# it is shrunk to fit. This increases the\n# pitch.\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 22</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nuse_bpm 30                                             \nputs sample_duration :loop_garzul                      \nputs sample_duration :loop_garzul, beat_stretch: 6     \nlive_loop :garzul do\n  sample :loop_garzul, beat_stretch: 6                 \n  sleep 6\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sample stretching matches the BPM\n# Set the BPM to 30\n# =&gt; 4.0 (at 30 BPM the sample lasts for 4 beats)\n# =&gt; 6.0\n \n# The sample is stretched to match 6 beats at 30 BPM\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 23</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nsample &quot;/path/to/sample.wav&quot;                         \n                                                       \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# External samples\n# Play any Wav, Aif, Ogg, Oga, or FLAC sample on your computer\n# by simply passing a string representing the full\n# path\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 24</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ndir = &quot;/path/to/dir/of/samples&quot;                      \nsample dir                                             \n                                                       \nsample dir, 1                                          \nsample dir, 99                                         \n                                                       \n                                                       \n                                                       \n                                                       \nsample dir, &quot;120&quot;                                    \n                                                       \n                                                       \nsample dir, &quot;120&quot;, 1                                 \n                                                       \n                                                       \nsample dir, /beat[0-9]/                                \n                                                       \n                                                       \n                                                       \n                                                       \nsample dir, /beat[0-9]0/, &quot;100&quot;                      \n                                                       \n                                                       \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sample pack filtering\n# You can easily work with a directory of samples\n# Play the first sample in the directory\n# (it is sorted alphabetically)\n# Play the second sample in the directory\n# Play the 100th sample in the directory, or if there\n# are fewer, treat the directory like a ring and keep\n# wrapping the index round until a sample is found.\n# For example, if there are 90 samples, the 10th sample\n# is played (index 9).\n# Play the first sample in the directory that contains\n# the substring &quot;120&quot;.\n# For example, this may be &quot;beat1_120_rave.wav&quot;\n# Play the second sample in the directory that contains\n# the substring &quot;120&quot;.\n# For example, this may be &quot;beat2_120_rave.wav&quot;\n# Play the first sample in the directory that matches\n# the regular expression /beat[0-9]/.\n# For example, this may be &quot;beat0_100_trance.wav&quot;\n# You may use the full power of Ruby&#39;s regular expression\n# system here: http://ruby-doc.org/core-2.1.1/Regexp.html\n# Play the first sample in the directory that both matches\n# the regular expression /beat[0-9]0/ and contains the\n# the substring &quot;100&quot;.\n# For example, this may be &quot;beat10_100_rave.wav&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 25</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n                                                       \n                                                       \nsample &quot;tabla_&quot;                                      \n                                                       \nsample &quot;tabla_&quot;, 2                                   \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Filtering built-in samples\n# If you don&#39;t pass a directory source, you can filter over\n# the built-in samples.\n# Play the first built-in sample that contains the substring\n# &quot;tabla&quot;\n# Play the third built-in sample that contains the substring\n# &quot;tabla&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 26</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nload_samples &quot;tabla_&quot;                                \n                                                       \n                                                       \nlive_loop :tabla do\n  sample &quot;tabla_&quot;, tick                              \n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Play with whole directories of samples\n# You may pass any of the source/filter options to load_samples\n# to load all matching samples. This will load all the built-in\n# samples containing the substring &quot;tabla_&quot;\n \n# Treat the matching samples as a ring and tick through them\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 27</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\ndir1 = &quot;/path/to/sample/directory&quot;\ndir2 = &quot;/path/to/other/sample/directory&quot;\nsample dir1, dir2, &quot;foo&quot;                             \n                                                       \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Specify multiple sources\n \n \n# Match the first sample that contains the string &quot;foo&quot; out of\n# all the samples in dir1 and dir2 combined.\n# Note that the sources must be listed before any filters.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 28</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ndir = &quot;/path/to/sample/directory&quot;                    \n                                                       \ndir_recursive = &quot;/path/to/sample/directory/**&quot;       \n                                                       \n                                                       \nsample dir, 0                                          \nsample dir_recursive, 0                                \n                                                       \n                                                       \n                                                       \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# List contents recursively\n# By default the list of all top-level samples within the directory\n# is considered.\n# However, if you finish your directory string with ** then if that\n# directory contains other directories then the samples within the\n# subdirectories and their subsubdirectories in turn are considered.\n# Play the first top-level sample in the directory\n# Play the first sample found after combining all samples found in\n# the directory and all directories within it recursively.\n# Note that if there are many sub directories this may take some time\n# to execute. However, the result is cached so subsequent calls will\n# be fast.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 29</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nfilter = lambda do |candidates|                        \n  [candidates.choose]                                  \nend                                                    \n                                                       \n8.times do\n  sample &quot;drum_&quot;, filter                             \n  sleep 0.25                                           \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Bespoke filters\n# If the built-in String, Regexp and index filters are not sufficient\n# you may write your own. They need to be a function which takes a list\n# of paths to samples and return a list of samples. This one returns a\n# list of a single randomly selected sample.\n \n# Play 8 randomly selected samples from the built-in sample set that also\n# contain the substring &quot;drum_&quot;\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 30</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nsample :loop_tabla, start: 0, finish: 0.00763          \n                                                       \n                                                       \nsleep 1\n                                                       \n                                                       \nsample :loop_tabla, onset: 0                           \n                                                       \n                                                       \nsleep 1\n\nsample :loop_tabla, onset: 1                           \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Basic Onset Detection\n \n# If you know the right start: and finish: values, you can extract a\n# single drum hit from a longer sample. However, finding these values\n# can be very time consuming.\n \n# Instead of specifying the start: and finish: values manually you can\n# use the onset: option to find them for you using an integer index.\n# onset: 0 will set the start: and finish: values so that the first\n# percussive sound (something that shifts from quiet to loud quickly)\n# is picked out.\n \n \n# We can easily find the second percussive sound in the sample with\n# onset: 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 31</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n                                                       \n                                                       \n                                                       \n                                                       \n                                                       \n\n\nlive_loop :tabla do\n  use_bpm 50                                           \n  sample :loop_tabla, onset: tick                      \n  sleep [0.125, 0.25].choose                           \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Ticking through onsets\n \n# The onsets are actually a ring so the index will wrap around. This\n# means that if there are only 8 onsets in a sample, specifying an\n# onset of 100 will still return one of the 8 onsets. This means we\n# can use tick to work through each onset in sequence. This allows us\n# to redefine the rhythm and tempo of a sample\n \n \n \n# We can choose our own BPM here - it doesn&#39;t need to match the sample\n# tick through each onset in sequence\n# randomly choose a delay between onset triggers\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 32</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n                                                       \nuse_bpm 50\nlive_loop :tabla do\n  sample :loop_tabla, onset: pick                      \n  sleep [0.125, 0.25].choose                           \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Random Onset Triggering\n# We can easily pick a random onset using the pick fn\n \n \n# Each time round the live loop we now trigger a random onset\n# creating an infinite stream of randomly selected drums\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 33</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n                                                       \n                                                       \nlive_loop :tabla do\n  use_random_seed 30000                                \n  8.times do\n    sample :loop_tabla, onset: pick\n    sleep [0.125, 0.25].choose\n  end\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Repeatable Random Onsets\n# Instead of an infinite stream of choices, we can combine iteration\n# and use_random_seed to create repeatable riffs:\n \n# every 8 times, reset the random seed, this resets the riff\n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 34</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n                                                           \n                                                           \n                                                           \n                                                           \n                                                           \nlive_loop :tabla do\n  sample :loop_tabla, onset: pick, sustain: 0, release: 0.1\n                                                           \n                                                           \n                                                           \n  sleep [0.125, 0.25].choose\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#  Random Onset Duration\n# Each onset has a variable length (determined by the sample contents).\n# Therefore, if you wish to ensure each onset has a specific length it\n# is necessary to use the sample&#39;s amplitude envelope.\n# As the sample&#39;s envelope automatically changes the sustain: value to\n# match the duration - you also need to override this with a value of 0.\n \n# Each drum onset will now be no longer than 0.1. Note that the envelope\n# for a sample only determines the maximum duration of a sample trigger.\n# If the actual audible duration of the onset is smaller than 0.1 then\n# it will *not* be extended.\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 35</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n                                                       \n                                                       \n                                                       \n\nl = lambda {|c| puts c ; c[0]}                         \n                                                       \n                                                       \n                                                       \n\nsample :loop_tabla, onset: l                           \n\n                                                       \n                                                       \n                                                       \n                                                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Onset lambdas\n \n# The onset index can be a lambda as well as an integer. If a lambda is\n# given, it will be passed a ring of all of the onsets as an argument.\n# This will be a ring of maps:\n \n# define a lambda which accepts a single argument, prints it and\n# returns the first value. This particular example is essentially\n# the same as using onset: 0 with the side effect of also printing out\n# the full ring of onsets:\n \n# (ring {:start=&gt;0.0, :finish=&gt;0.0076}, {:start=&gt;0.0076, :finish 0.015}...)\n \n# We are therefore free to define this lambda to do anything we want.\n# This gives us very powerful control over the choice of onset. It is\n# unlikely you will use this frequently, but it is a powerful tool\n# that&#39;s there when you need it.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 36</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nsample :loop_tabla, onset: 1                                        \n\n                                                                    \n                                                                    \n                                                                    \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Plays the 2nd onset (the first onset would have index 0)\n \n# Will override opts with: {start: 0.0151, finish: 0.0304}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 37</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 1               \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Plays the 2nd onset. This behaves the same as not specifying\n# a slice as we select the first of one slices.\n \n# Will override opts with: {start: 0.0151, finish: 0.0304}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 38</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 2               \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# This plays the first half of the 2nd onset.\n# This is because  we split that onset into two slices and\n# play just the first slice (with index 0).\n \n# Will override opts with: {start: 0.0151, finish: 0.0227}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 39</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 4               \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 4, finish: 0.5  \n                                                                    \n                                                                    \n\n                                                                    \n                                                                    \n                                                                    \n\nsample :loop_tabla, onset: 1, slice: 0, num_slices: 4, finish: 0.0, start: 0.5  \n                                                                                \n                                                                                \n                                                                                \n\n                                                                                \n                                                                                \n                                                                                \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# This plays the first quarter of the 2nd onset.\n# This is because we split that onset into four slices and\n# play just the first slice (with index 0).\n \n# Will override opts with: {start: 0.0151, finish: 0.0189}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n \n# Will play the first 1/8th of the 2nd onset.\n# This is because we split that specific onset into 4 slices\n# and then only play the first half of the first slice.\n \n# Will override opts with: {start: 0.0151, finish: 0.017}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n \n# Will play the first 1/8th of the 2nd onset backwards..\n# This is because we split that specific onset into 4 slices\n# and then only play from the first half of the first slice\n# back to the beginning.\n \n# Will override opts with: {start: 0.017, finish: 0.0151}\n# (these values are specific to the :loop_tabla sample and\n# will vary for different samples)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "status": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get server status</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">status</span>  </pre></code></p>\n<p>This returns a Hash of information about the synthesis environment. Mostly used for debugging purposes.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs status\n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Returns something similar to:\n# {\n#   :ugens=&gt;10,\n#   :synths=&gt;1,\n#   :groups=&gt;7,\n#   :sdefs=&gt;61,\n#   :avg_cpu=&gt;0.20156468451023102,\n#   :peak_cpu=&gt;0.36655542254447937,\n#   :nom_samp_rate=&gt;44100.0,\n#   :act_samp_rate=&gt;44099.9998411752,\n#   :audio_busses=&gt;2,\n#   :control_busses=&gt;0\n# }\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "control": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Control running synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">control</span>  node <span class=\"info\">(synth_node)</span></pre></code></p>\n<p>Control a running synth node by passing new parameters to it. A synth node represents a running synth and can be obtained by assigning the return value of a call to play or sample or by specifying a parameter to the do/end block of an FX. You may modify any of the parameters you can set when triggering the synth, sample or FX. See documentation for opt details. If the synth to control is a chord, then control will change all the notes of that chord group at once to a new target set of notes - see example. Also, you may use the on: opt to conditionally trigger the control - see the docs for the <code>synth</code> and <code>sample</code> fns for more information.</p>\n\n<p>If no synth to control is specified, then the last synth triggered by the current (or parent) thread will be controlled - see example below.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nmy_node = play 50, release: 5, cutoff: 60\nsleep 1\ncontrol my_node, cutoff: 70\nsleep 1\ncontrol my_node, cutoff: 90\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic control\n \n# play note 50 with release of 5 and cutoff of 60. Assign return value to variable my_node\n# Sleep for a second\n# Now modify cutoff from 60 to 70, sound is still playing\n# Sleep for another second\n# Now modify cutoff from 70 to 90, sound is still playing\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\ns = synth :prophet, note: :e1, cutoff: 70, cutoff_slide: 8, release: 8\ncontrol s, cutoff: 130\n                      \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Combining control with slide opts allows you to create nice transitions.\n \n# start synth and specify slide time for cutoff opt\n# Change the cutoff value with a control.\n# Cutoff will now slide over 8 beats from 70 to 130\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nnotes = (scale :e3, :minor_pentatonic, num_octaves: 2).shuffle\n\ns = synth :beep, note: :e3, sustain: 8, note_slide: 0.05\n64.times do\n  control s, note: notes.tick                           \n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Use a short slide time and many controls to create a sliding melody\n \n# get a random ordering of a scale\n \n# Start our synth running with a long sustain and short note slide time\n \n# Keep quickly changing the note by ticking through notes repeatedly\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nwith_fx :bitcrusher, sample_rate: 1000, sample_rate_slide: 8 do |bc|\n                                                                    \n                                                                    \n  sample :loop_garzul, rate: 1\n  control bc, sample_rate: 5000                                     \n                                                                    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Controlling FX\n \n# Start FX but also use the handy || goalposts\n# to grab a handle on the running FX. We can call\n# our handle anything we want. Here we&#39;ve called it bc\n \n# We can use our handle bc now just like we used s in the\n# previous example to modify the FX as it runs.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\ncg = play (chord :e4, :minor), sustain: 2 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)    \n                                          \n                                          \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling chords\n \n# start a chord\n \n# transition to new chord.\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\ncg = play (chord :e4, :minor), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)                   \n                                                         \n                                                         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sliding between chords\n \n# start a chord\n \n# slide to new chord.\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\ncg = play (chord :e3, :m13), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :c3, :major)                   \n                                                         \n                                                         \n                                                         \n                                                         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Sliding from a larger to smaller chord\n \n# start a chord with 7 notes\n \n# slide to new chord with fewer notes (3)\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord using ring-like indexing.\n# This means that the 4th note in the original chord will\n# be mapped onto the 1st note in the second chord and so-on.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\ncg = play (chord :c3, :major), sustain: 4, note_slide: 3 \nsleep 1\ncontrol cg, notes: (chord :e3, :m13)                    \n                                                         \n                                                         \n                                                         \n                                                         \n                                                         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Sliding from a smaller to larger chord\n# start a chord with 3 notes\n \n# slide to new chord with more notes (7)\n# Each note in the original chord is mapped onto\n# the equivalent in the new chord.\n# This means that the 4th note in the new chord\n# will not sound as there is no 4th note in the\n# original chord.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 9</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\ns = synth :prophet, note: :e1, release: 8, cutoff: 70, cutoff_slide: 8\nsleep 1                                                               \ncontrol s, cutoff: 130                                                \nsleep 3                                                               \ncontrol s, cutoff_slide: 1                                            \n                                                                      \n                                                                      \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Changing the slide rate\n \n# Start a synth playing with a long cutoff slide\n# wait a beat\n# change the cutoff so it starts sliding slowly\n# wait for 3 beats\n# Change the cutoff_slide - the cutoff now slides more quickly to 130\n# it will now take 1 beat to slide from its *current* value\n# (somewhere between 70 and 130) to 130\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 10</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nsynth :prophet, note: :e1, release: 8                                 \nsleep 1\n16.times do\n  control note: (octs :e1, 3).tick                                    \n  sleep 0.125                                                         \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Controlling the last triggered synth\n \n# Every time a synth is triggered, Sonic Pi automatically remembers the node\n \n \n# This means we don&#39;t need to use an explicit variable to control the synth\n# we last triggered.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 11</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nsynth :beep, release: 4                 \nsleep 0.1\ncontrol note: :e5                       \nsleep 0.5\nsynth :dsaw, release: 4                 \nsleep 0.1\ncontrol note: :e4                       \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Controlling multiple synths without variables\n \n# Trigger a beep synth\n \n# Control last triggered synth (:beep)\n \n# Next, trigger a dsaw synth\n \n# Control last triggered synth (:dsaw)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "kill": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Kill synth</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">kill</span>  node <span class=\"info\">(synth_node)</span></pre></code></p>\n<p>Kill a running synth sound or sample. In order to kill a sound, you need to have stored a reference to it in a variable.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nfoo = play 50, release: 4\nsleep 1\n\nkill foo\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# store a reference to a running synth in a variable called foo:\n \n \n# foo is still playing, but we can kill it early:\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nbar = sample :loop_amen\nsleep 0.5\nkill bar\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sample_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get sample names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_names</span>  group <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Return a ring of sample names for the specified group</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n</body>\n",
      "all_sample_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get all sample names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">all_sample_names</span>  </pre></code></p>\n<p>Return a list of all the sample names available</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n</body>\n",
      "sample_groups": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get all sample groups</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sample_groups</span>  </pre></code></p>\n<p>Return a list of all the sample groups available</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n</body>\n",
      "synth_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get all synth names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">synth_names</span>  </pre></code></p>\n<p>Return a list of all the synths available</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n</body>\n",
      "fx_names": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get all FX names</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">fx_names</span>  </pre></code></p>\n<p>Return a list of all the FX available</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n</body>\n",
      "load_synthdefs": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Load external synthdefs</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">load_synthdefs</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Load all pre-compiled synth designs in the specified directory. The binary files containing synth designs need to have the extension <code>.scsyndef</code>. This is useful if you wish to use your own SuperCollider synthesiser designs within Sonic Pi.</p>\n\n<h2 id=\"important-notes\">Important notes</h2>\n\n<p>You may not trigger external synthdefs unless you enable the following GUI preference:</p>\n\n<p><code>\nStudio -&gt; Synths and FX -&gt; Enable external synths and FX\n</code></p>\n\n<p>Also, if you wish your synth to work with Sonic Pi’s automatic stereo sound infrastructure <em>you need to ensure your synth outputs a stereo signal</em> to an audio bus with an index specified by a synth arg named <code>out_bus</code>. For example, the following synth would work nicely:</p>\n\n<pre><code>(\nSynthDef(\\piTest,\n         {|freq = 200, amp = 1, out_bus = 0 |\n           Out.ar(out_bus,\n                  SinOsc.ar([freq,freq],0,0.5)* Line.kr(1, 0, 5, amp, doneAction: 2))}\n).writeDefFile(\"/Users/sam/Desktop/\")\n)\n</code></pre>\n\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_synthdefs &quot;~/Desktop/my_noises&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Load all synthdefs in my_noises folder\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Store information in the Time State</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set</span>  time_state_key <span class=\"info\">(default)</span>, value <span class=\"info\">(anything)</span></pre></code></p>\n<p>Store information in the Time State for the current time for either the current or any other thread. If called multiple times without an intervening call to <code>sleep</code>, <code>sync</code>, <code>set</code> or <code>cue</code>, the last value set will prevail. The value will remain in the Time State until overwritten by another call to <code>set</code>, or until Sonic Pi quits.</p>\n\n<p>May be used within a <code>time_warp</code> to set past/future events. Does not affect time.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset :foo, 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; Stores the value 1 with key :foo\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nset :foo, 3 \nget[:foo]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Set :foo to 3\n#=&gt; returns 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nin_thread do\n  set :foo, 3 \nend\n\nin_thread do\n  puts get[:foo] \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Set :foo to 3\n \n \n \n#=&gt; always returns 3 (no race conditions here!)\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "cue": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Cue other threads</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">cue</span>  cue_id <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Send a heartbeat synchronisation message containing the (virtual) timestamp of the current thread. Useful for syncing up external threads via the <code>sync</code> fn. Any opts which are passed are given to the thread which syncs on the <code>cue_id</code>. The values of the opts must be immutable. Currently numbers, symbols, booleans, nil and frozen strings, or vectors/rings/frozen arrays/maps of immutable values are supported.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">your_key:</td>\n <td class=\"even\">\n<p>Your value</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">another_key:</td>\n <td class=\"odd\">\n<p>Another value</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">key:</td>\n <td class=\"even\">\n<p>All these opts are passed through to the thread which syncs</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nin_thread do\n    sync :foo\n    sample :ambi_lunar_land\n  end\n\n  sleep 5\n\n  cue :foo\n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# this parks the current thread waiting for a foo cue message to be received.\n \n \n \n \n \n# We send a cue message from the main thread.\n# This then unblocks the thread above and we then hear the sample\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do  \n    loop do     \n      cue :tick \n      sleep 0.5 \n    end\n  end\n\n \n  loop do                   \n    sync :tick              \n    sample :drum_heavy_kick \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Start a metronome thread\n# Loop forever:\n# sending tick heartbeat messages\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome.\n# In the main thread, just loop\n# waiting for :tick cue messages\n# after which play the drum kick sample\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nin_thread do  \n    loop do     \n      cue [:foo, :bar, :baz].choose\n      sleep 0.5 \n    end\n  end\n\n \n\n  in_thread do\n    loop do             \n      sync :foo         \n      sample :elec_beep \n    end\n  end\n\n  in_thread do\n    loop do             \n      sync :bar         \n      sample :elec_flip \n    end\n  end\n\n  in_thread do\n    loop do             \n      sync :baz         \n      sample :elec_blup \n    end\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Start a metronome thread\n# Loop forever:\n# sending one of three tick heartbeat messages randomly\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome:\n \n \n# In the main thread, just loop\n# waiting for :foo cue messages\n# after which play the elec beep sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :bar cue messages\n# after which play the elec flip sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :baz cue messages\n# after which play the elec blup sample\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do\n    loop do\n      cue :tick, foo: 64 \n      sleep 0.5\n    end\n  end\n\n \n\n  loop do\n    values = sync :tick\n    play values[:foo]   \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# sending tick heartbeat messages with a value :foo\n \n \n \n \n# The value for :foo can now be used in synced threads\n \n \n \n# play the note value from :foo\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "get": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get information from the Time State</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">get</span>  time_state_key <span class=\"info\">(default)</span></pre></code></p>\n<p>Retrieve information from Time State set prior to the current time from either the current or any other thread. If called multiple times will always return the same value unless a call to <code>sleep</code>, <code>sync</code>, <code>set</code> or <code>cue</code> is interleaved. Also, calls to <code>get</code> will always return the same value across Runs for deterministic behaviour - which means you may safely use it in your compositions for repeatable music. If no value is stored with the relevant key, will return <code>nil</code>.</p>\n\n<p>May be used within a <code>time_warp</code> to retrieve past events. If in a time warp, <code>get</code> can not be called from a future position. Does not advance time.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nget :foo\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; returns the last value set as :foo, or nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nset :foo, 3\nget[:foo]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; returns 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nin_thread do\n  set :foo, 3\nend\n\nin_thread do\n  puts get[:foo] \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n \n#=&gt; always returns 3 (no race conditions here!)\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_swing": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Add swing to successive calls to do/end block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_swing</span>  shift <span class=\"info\">(beats)</span>, pulse <span class=\"info\">(number)</span>, tick <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Runs block within a <code>time_warp</code> except for once every <code>pulse</code> consecutive runs (defaulting to 4). When used for rhythmical purposes this results in one in every <code>pulse</code> calls of the block being ‘on beat’ and the rest shifted forward or backwards in time by <code>shift</code> beats.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">shift:</td>\n <td class=\"even\">\n<p>How much time to delay/forward the block. Greater values produce more emphasised swing. Defaults to 0.1 beats.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">pulse:</td>\n <td class=\"odd\">\n<p>How often to apply the swing. Defaults to 4.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">tick:</td>\n <td class=\"even\">\n<p>A key for the tick with which to count pulses. Override this if you have more than one <code>with_swing</code> block in your <code>live_loop</code> or thread to stop them interfering with each other.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">offset:</td>\n <td class=\"odd\">\n<p>Count offset - before modding the count with the pulse size - integer offset to add to the result of calling <code>tick</code> with the specified tick key (via the <code>tick:</code> opt)</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nlive_loop :foo do\n  with_swing 0.1 do\n    sample :elec_beep     \n  end\n  sleep 0.25\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# plays the :elec_beep sample late except for every 4th time\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nlive_loop :foo do\n  with_swing -0.1 do\n    sample :elec_beep     \n  end                     \n  sleep 0.25\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# plays the :elec_beep sample slightly early\n# except for every 4th time\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nlive_loop :foo do\n  with_swing -0.1, pulse: 8 do\n    sample :elec_beep     \n  end                     \n  sleep 0.25\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# plays the :elec_beep sample slightly early\n# except for every 8th time\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nlive_loop :foo do\n  with_swing 0.14, tick: :a do\n    sample :elec_beep     \n  end                     \n\n  with_swing -0.1, tick: :b do\n    sample :elec_beep, rate: 2 \n  end                          \n  sleep 0.25\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Use unique tick names if you plan on using with_swing\n# more than once in any given live_loop or thread.\n \n \n# plays the :elec_beep sample slightly late\n# except for every 4th time\n \n \n# plays the :elec_beep sample at double rate\n#  slightly early except for every 4th time\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nlive_loop :foo do\n  with_swing 0.1 do\n    cue :tick             \n  end\n  sleep 0.25\nend\n\nlive_loop :bar do\n  sync :tick\n  sample :elec_beep      \n                         \n                         \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# send out cue messages with swing timing\n \n \n \n \n \n \n# sync on the swing cue messages to bring the swing into\n# another live loop (sync will match the timing and clock of\n# the sending live loop)\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "run_file": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Evaluate the contents of the file as a new Run</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">run_file</span>  filename <span class=\"info\">(path)</span></pre></code></p>\n<p>Reads the full contents of the file with <code>path</code> and executes it in a new Run. This works as if the code in the file was in a buffer and Run button was pressed.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nrun_file &quot;~/path/to/sonic-pi-code.rb&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will run the contents of this file\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "run_code": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Evaluate the code passed as a String as a new Run</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">run_code</span>  code <span class=\"info\">(string)</span></pre></code></p>\n<p>Executes the code passed as a string in a new Run. This works as if the code was in a buffer and Run button was pressed.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nrun_code &quot;sample :ambi_lunar_land&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will play the :ambi_lunar_land sample\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nrun_code &quot;8.times do\nplay 60\nsleep 1\nend&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Works with any amount of code:\n \n \n \n# will play 60 8 times\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "eval_file": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Evaluate the contents of the file inline in the current thread like a function.</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">eval_file</span>  filename <span class=\"info\">(path)</span></pre></code></p>\n<p>Reads the full contents of the file with <code>path</code> and executes within the current thread like a function call.</p>\n\n<p class=\"introduced\">Introduced in v3.2</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\neval_file &quot;~/path/to/sonic-pi-code.rb&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will run the contents of this file\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_osc_logging": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Enable and disable OSC logging</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_osc_logging</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Enable or disable log messages created on OSC functions. This does not disable the OSC functions themselves, it just stops them from being printed to the log</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_osc_logging true\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on OSC logging\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_osc_logging false\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Disable OSC logging\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_osc_logging": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level enable and disable OSC logging</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_osc_logging</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Similar to use_osc_logging except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous OSC log value is restored after block.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  use_osc_logging true\n\n  osc &quot;/foo&quot;\n\n  with_osc_logging false do\n   \n    osc &quot;/foo&quot;\n  end\n  sleep 1\n \n  osc &quot;/foo&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on OSC logging:\n \n \n#  message is printed to log\n \n \n#OSC logging is now disabled\n# OSC message *is* sent but not displayed in log\n \n \n# Debug is re-enabled\n# message is displayed in log\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_osc": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set the default hostname and port number for outgoing OSC messages.</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_osc</span>  hostname <span class=\"info\">(string)</span>, port <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the destination host and port that <code>osc</code> will send messages to. If no port number is specified - will default to port 4560 (Sonic Pi’s default OSC listening port).</p>\n\n<p>OSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. <code>use_osc</code> allows you to specify which computer (<code>hostname</code>) and program (<code>port</code>) to send messages to.</p>\n\n<p>It is possible to send messages to the same computer by using the host name <code>\"localhost\"</code></p>\n\n<p>This is a thread-local setting - therefore each thread (or live loop) can have their own separate <code>use_osc</code> values.</p>\n\n<p>Note that calls to <code>osc_send</code> will ignore these values.</p>\n\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000 \nosc &quot;/foo/bar&quot;            \n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send a simple OSC message to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and no arguments\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000       \nosc &quot;/foo/bar&quot; 1, 3.89, &quot;baz&quot; \n                                  \n                                  \n                                  \n                                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Send an OSC messages with arguments to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3,89\n# 3) The string &quot;baz&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nuse_osc &quot;10.0.1.5&quot;, 7000        \nosc &quot;/foo/bar&quot; 1, 3.89, &quot;baz&quot; \n                                  \n                                  \n                                  \n                                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send an OSC messages with arguments to another program on a different machine\n \n# Specify port 7000 on the machine with address 10.0.1.5\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3,89\n# 3) The string &quot;baz&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000 \nosc &quot;/foo/bar&quot;            \nosc &quot;/foo/baz&quot;            \n\nuse_osc &quot;localhost&quot;, 7005 \nosc &quot;/foo/bar&quot;            \nosc &quot;/foo/baz&quot;            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# use_osc only affects calls to osc until the next call to use_osc\n \n# Specify port 7000 on this machine\n# Send an OSC message to port 7000\n# Send another OSC message to port 7000\n \n# Specify port 7000 on this machine\n# Send an OSC message to port 7005\n# Send another OSC message to port 7005\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000 \n\nlive_loop :foo do\n  osc &quot;/foo/bar&quot;            \n  sleep 1                     \nend\n\nlive_loop :bar do\n  use_osc &quot;localhost&quot;, 7005 \n                              \n                              \n\n  osc &quot;/foo/bar&quot;            \n  sleep 1\nend\n\nuse_osc &quot;localhost&quot;, 7010 \nosc &quot;/foo/baz&quot;            \n                            \n                            \n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# threads may have their own use_osc value\n \n# Specify port 7000 on this machine\n \n \n# Thread inherits outside use_osc values\n# and therefore sends OSC messages to port 7000\n \n \n \n# Override OSC hostname and port for just this\n# thread (live loop :bar). Live loop :foo is\n# unaffected.\n \n# Send OSC messages to port 7005\n \n \n \n# Specify port 7010\n# Send another OSC message to port 7010\n# Note that neither live loops :foo or :bar\n# are affected (their use_osc values are\n# independent and isolated.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_osc": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level setting for the default hostname and port number of outgoing OSC messages.</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_osc</span>  hostname <span class=\"info\">(string)</span>, port <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the destination host and port that <code>osc</code> will send messages to for the given do/end block.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_osc &quot;localhost&quot;, 7000 \nosc &quot;/foo/baz&quot;            \n\nwith_osc &quot;localhost&quot;, 7010 do\n                               \n   osc &quot;/foo/baz&quot;            \nend\n\nosc &quot;/foo/baz&quot;            \n                            \n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Specify port 7010\n# Send an OSC message to port 7000\n \n# set hostname and port for the duration\n# of this do/end block\n# Send an OSC message to port 7010\n \n \n# Send an OSC message to port 7000\n# as old setting is restored outside\n# do/end block\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "osc_send": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Send an OSC message to a specific host and port</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">osc_send</span>  hostname <span class=\"info\">(string)</span>, port <span class=\"info\">(number)</span>, path <span class=\"info\">(osc_path)</span>, args <span class=\"info\">(list)</span></pre></code></p>\n<p>Similar to <code>osc</code> except ignores any <code>use_osc</code> settings and sends the OSC message directly to the specified <code>hostname</code> and <code>port</code>.</p>\n\n<p>See <code>osc</code> for more information.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nosc_send &quot;localhost&quot;, 7000, &quot;/foo/baz&quot; \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send an OSC message to port 7000 on the same machine\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_osc &quot;localhost&quot;, 7010                \nosc &quot;/foo/baz&quot;                           \n\nosc_send &quot;localhost&quot;, 7000, &quot;/foo/baz&quot; \n                                           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# set hostname and port\n# Send an OSC message to port 7010\n \n# Send an OSC message to port 7000\n# (ignores use_osc settings)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "osc": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Send an OSC message (Open Sound Control)</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">osc</span>  path <span class=\"info\">(arguments)</span></pre></code></p>\n<p>Sends an OSC message to the current host and port specified by <code>use_osc</code> or <code>with_osc</code>.</p>\n\n<p>OSC (Open Sound Control) is a simple way of passing messages between two separate programs on the same computer or even on different computers via a local network or even the internet. <code>osc</code> enables you to send well-timed OSC messages from within Sonic Pi. <code>osc</code> will ensure that the OSC message is sent at the correct time using the same timing system shared with the synthesis functionality via <code>sample</code>, <code>synth</code> and friends. <code>osc</code> even works seamlessly within <code>time_warp</code> - see examples.</p>\n\n<p>A typical OSC message has two parts: a descriptive <code>path</code> which looks simalar to a URL (website address), and an optional list of <code>arguments</code> that are either numbers or strings.</p>\n\n<p>For example, a hypothetical synth program might accept this OSC message:</p>\n\n<p><code>/set/filter lowpass 80 0.5</code></p>\n\n<p>where <code>/set/filter</code> is the path, and <code>lowpass</code>, <code>80</code>, and <code>0.5</code> are three\narguments. This can be sent from within Sonic Pi by writing:</p>\n\n<p><code>osc \"/set/filter\", \"lowpass\", 80, 0.5</code></p>\n\n<p>However, in order to send the OSC message you must first specify where to send it to. This is achieved by specifying both the host (the machine’s internet address) and the port that the remote OSC server is listening on. This is configured using <code>use_osc</code> or <code>with_osc</code>. So, if our synth program was running on a machine on the local network with IP address <code>10.0.1.5</code> on port <code>5100</code> we could send our OSC message to it with the following:</p>\n\n<p><code>use_osc \"10.0.1.5\", 5100</code></p>\n\n<p><code>osc \"/set/filter\", \"lowpass\", 80, 0.5</code></p>\n\n<p>Note, by default, Sonic Pi listens for OSC messages on port <code>4560</code>, so you may send messages to an external machine running Sonic Pi if you know the IP address of that external machine. Any OSC messages received on port <code>4559</code> are automatically converted to standard cue events and displayed in the GUI’s cue log. This also means that you can use <code>sync</code> to wait for the next incoming OSC message with a given path (see example).</p>\n\n<p>Finally, it is also very useful to send OSC messages to aother programs on the same computer. This can be achieved by specifying “localhost” as the hostname and the port as normal (depending on which port the other program is listening on).</p>\n\n<p>See <code>osc_send</code> for a version which allows you to specify the hostname and port directly (ignoring any values set via <code>use_osc</code> or <code>with_osc</code>).</p>\n\n<p>For further information see the OSC spec: <a href=\"http://opensoundcontrol.org/spec-1_0\">http://opensoundcontrol.org/spec-1_0</a></p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000 \nosc &quot;/foo/bar&quot;            \n                            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send a simple OSC message to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and no arguments\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nuse_osc &quot;localhost&quot;, 7000       \nosc &quot;/foo/bar&quot;, 1, 3.89, &quot;baz&quot;\n                                  \n                                  \n                                  \n                                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Send an OSC messages with arguments to another program on the same machine\n \n# Specify port 7000 on this machine\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3.89\n# 3) The string &quot;baz&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nuse_osc &quot;10.0.1.5&quot;, 7000        \nosc &quot;/foo/bar&quot;, 1, 3.89, &quot;baz&quot;\n                                  \n                                  \n                                  \n                                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send an OSC messages with arguments to another program on a different machine\n \n# Specify port 7000 on the machine with address 10.0.1.5\n# Send an OSC message with path &quot;/foo/bar&quot;\n# and three arguments:\n# 1) The whole number (integer) 1\n# 2) The fractional number (float) 3.89\n# 3) The string &quot;baz&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nosc &quot;/foo/bar&quot;      \nplay 60               \n\nsleep 1               \n\nosc &quot;/baz/quux&quot;      \nplay 72                \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# OSC messages honour the timing system\n \n# Send an OSC message with path /foo/bar at *exactly* the\n# same time as note 60 is played\n \n# Wait for 1 beat\n \n# Send an OSC message with path /baz/quux at *exactly* the\n# same time as note 72 is played\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nlive_loop :foo do            \n  osc &quot;/counter&quot;, tick     \n                             \n                             \n  sleep 1                    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Send a incrementing OSC counter\n \n# Start a live loop called :foo\n# Send an OSC message with the path /counter\n# with successive whole numbers (0, 1, 2, 3.. etc.)\n# each time round the live loop\n# Repeat the live loop every 1 beat\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\ntime_warp 0.5 do\n  osc &quot;/foo/bar&quot;      \nend\n\nsleep 1                 \n\ntime_warp -0.1 do\n  osc &quot;/baz/quux&quot;     \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# OSC messages can be sent from within time_warp\n \n \n# Send an OSC message with path /foo/bar at 0.5 beats\n \n \n# Wait for 1 beat\n \n \n# Send an OSC message with path /baz/quux at 0.9 beats\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "reset": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reset all thread locals</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">reset</span>   <span class=\"info\">()</span></pre></code></p>\n<p>All settings such as the current synth, BPM, random stream and tick values will be reset to the values inherited from the parent thread. Consider using <code>clear</code> to reset all these values to their defaults.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nuse_synth :blade\nuse_octave 3\n\nputs &quot;before&quot;        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nreset\n\nputs &quot;after&quot;         \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic Reset\n \n \n \n#=&gt; &quot;before&quot;\n#=&gt; :blade\n#=&gt; 3\n#=&gt; 0.75006103515625\n#=&gt; 0\n \n \n \n#=&gt; &quot;after&quot;\n#=&gt; :beep\n#=&gt; 0\n#=&gt; 0.75006103515625\n#=&gt; 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nReset remembers defaults from when the thread was created:\nuse_synth :blade\nuse_octave 3\n\nputs &quot;before&quot;        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nat do\n  use_synth :tb303\n  puts rand              \n  reset\n  puts &quot;thread&quot;         \n\n\n                         \n                         \n                         \n                         \n                         \n  puts current_synth     \n  puts current_octave    \n\n                         \n                         \n                         \n                         \n  puts rand              \n  puts tick              \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n \n \n#=&gt; &quot;before&quot;\n#=&gt; :blade\n#=&gt; 3\n#=&gt; 0.75006103515625\n#=&gt; 0\n \n \n \n#=&gt; 0.9287109375\n \n#=&gt; &quot;thread&quot;\n \n \n# The call to reset ensured that the current\n# synth was returned to the the state at the\n# time this thread was started. Thus any calls\n# to use_synth between this line and the start\n# of the thread are ignored\n#=&gt; :blade\n#=&gt; 3\n \n# The call to reset ensured\n# that the random stream was reset\n# to the same state as it was when\n# the current thread was started\n#=&gt; 0.9287109375\n#=&gt; 0\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "clear": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Clear all thread locals to defaults</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">clear</span>   <span class=\"info\">()</span></pre></code></p>\n<p>All settings such as the current synth, BPM, random stream and tick values will be reset to their defaults. Consider using <code>reset</code> to reset all these values to those inherited from the parent thread.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nClear wipes out the threads locals\nuse_synth :blade\nuse_octave 3\n\nputs &quot;before&quot;        \nputs current_synth     \nputs current_octave    \nputs rand              \nputs tick              \n\nat do\n  use_synth :tb303\n  puts rand              \n  clear\n  puts &quot;thread&quot;        \n\n\n                         \n                         \n                         \n                         \n  puts current_synth     \n\n                         \n  puts current_octave    \n\n                         \n                         \n  puts rand              \n  puts tick              \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n#=&gt; &quot;before&quot;\n#=&gt; :blade\n#=&gt; 3\n#=&gt; 0.75006103515625\n#=&gt; 0\n \n \n \n#=&gt; 0.9287109375\n \n#=&gt; &quot;thread&quot;\n \n \n# The clear reset the current synth to the default\n# of :beep. We are therefore ignoring any inherited\n# synth settings. It is as if the thread was a completely\n# new Run.\n#=&gt; :beep\n \n# The current octave defaults back to 0\n#=&gt; 0\n \n# The random stream defaults back to the standard\n# stream used by every new Run.\n#=&gt; 0.75006103515625\n#=&gt; 0\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "time_warp": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Shift time forwards or backwards for the given block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">time_warp</span>  delta_time <span class=\"info\">(number)</span></pre></code></p>\n<p>The code within the given block is executed with the specified delta time shift specified in beats. For example, if the delta value is 0.1 then all code within the block is executed with a 0.1 beat delay. Negative values are allowed which means you can move a block of code <em>backwards in time</em>. For example a delta value of -0.1 will execute the code in the block 0.1 beats ahead of time. The time before the block started is restored after the execution of the block.</p>\n\n<p>Given a list of times, run the block once after waiting each given time. If passed an optional params list, will pass each param individually to each block call. If size of params list is smaller than the times list, the param values will act as rings (rotate through). If the block is given 1 arg, the times are fed through. If the block is given 2 args, both the times and the params are fed through. A third block arg will receive the index of the time.</p>\n\n<p>Note that the code within the block is executed synchronously with the code before and after, so all thread locals will be modified inline - as is the case for <code>with_fx</code>. However, as time is always restored to the value before <code>time_warp</code> started, you can use it to schedule events for the future in a similar fashion to a thread (via <code>at</code> or <code>in_thread</code>) without having to use an entirely fresh and distinct set of thread locals - see examples.</p>\n\n<p>Also, note that you cannot travel backwards in time beyond the <code>current_sched_ahead_time</code>.</p>\n\n<p>If the <code>time_warp</code> block is within a <code>density</code> block, the delta time is not affected (although all the other times such as sleep and phase durations will be affected) - see example.</p>\n\n<p><code>time_warp</code> is ahead-of-time scheduling within the current thread. See <code>at</code> for just-in-time scheduling using multiple isolated threads.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nplay 70           \nsleep 1\nplay 75           \n\ntime_warp 0.1 do\n                  \n  play 80         \n  sleep 0.5\n  play 80         \n\nend               \n\n                  \n                  \n                  \n\nplay 70           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# shift forwards in time\n#=&gt; plays at time 0\n \n#=&gt; plays at time 1\n \n \n# time shifts forward by 0.1 beats\n#=&gt; plays at 1.1\n \n#=&gt; plays at 1.6\n \n# time shifts back by 0.6 beats\n \n# we now honour the original sleep 1 and the\n# sleep 0.5 within the time_warp block is\n# ignored including the 0.1 shift offset\n \n#=&gt; plays at 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nplay 70           \nsleep 1\nplay 75           \n\ntime_warp -0.1 do\n                  \n  play 80         \n  sleep 0.5\n  play 80         \n                  \nend\n                  \n                  \n                  \nplay 70           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# shift backwards in time\n \n#=&gt; plays at time 0\n \n#=&gt; plays at time 1\n \n \n# time shifts backwards by 0.1 beats\n#=&gt; plays at 0.9\n \n#=&gt; plays at 1.4\n# time shifts forward by 0.1 beats\n \n# we now honour the original sleep 1 and the\n# sleep 0.5 within the time_warp block is\n# ignored, including the -0.1 offset\n#=&gt; plays at 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nputs tick         \n\nsleep 1\n\ntime_warp 2 do\n  puts tick       \nend\n\nsleep 0.5\n\nputs tick         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Ticks count linearly through time_warp\n \n#=&gt; prints 0 (at time 0)\n \n \n \n \n#=&gt; prints 1 (at time 3)\n \n \n \n \n#=&gt; prints 2 (at time 1.5)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nputs tick         \nsleep 0.5\nputs tick         \n\ntime_warp 2 do\n  puts tick       \n  sleep 0.5\n  puts tick       \nend\n\nat 3 do           \n  puts tick       \n  sleep 0.5\n  puts tick       \nend\n\nsleep 0.5\n\nputs tick         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Comparing time_warp with at\n \n#=&gt; prints 0 (at time 0)\n \n#=&gt; prints 1 (at time 0.5)\n \n \n#=&gt; prints 2 (at time 2.5)\n \n#=&gt; prints 3 (at time 3)\n \n \n# the at will reset all thread locals\n#=&gt; prints 0 (At time 3.5)\n \n#=&gt; prints 1 (At time 4)\n \n \n \n \n#=&gt; prints 4 (at time 1)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\ndensity 2 do                       \n                                   \n  time_warp 0.5 do                 \n    with_fx :slicer, phase: 0.5 do \n      play 60\n      sleep 1                      \n    end\n  end\n\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Time Warp within Density\n# Typically this will double the BPM and affect all times\n# in addition to looping the internal block twice\n# However, this time is *not* affected and will remain 0.5\n# This phase duration *is* affected and will be 0.25\n \n# This time *will* be affected by the density and be 0.5\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\ntime_warp [0, 1, 2, 3] do\n  puts &quot;hello&quot;               \nend\n                               \n                               \n                               \n                               \n                               \n                               \n                               \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Time Warp with lists of times\n \n \n# Will print &quot;hello&quot; at 0, 1, 2, and 3 seconds\n \n# Notice that the run completes before all the\n# messages have been delivered. This is because it\n# schedules all the messages at once so the program\n# can complete immediately. This is unlike at which\n# would appear to behave similarly, but would wait\n# for all messages to be delivered (on time) before\n# allowing the program to complete.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntime_warp [1, 2, 4] do \n    play 75               \n  end                     \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays a note after waiting 1 beat,\n# then after 1 more beat,\n# then after 2 more beats (4 beats total)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ntime_warp [1, 2, 3], [75, 76, 77] do |n| \n    play n\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# plays 3 different notes\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 9</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntime_warp [1, 2, 3],\n      [{:amp=&gt;0.5}, {:amp=&gt; 0.8}] do |p|\n    sample :drum_cymbal_open, p         \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# alternate soft and loud\n# cymbal hits three times\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 10</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ntime_warp [0, 1, 2] do |t|\n    puts t\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# when no params are given to at, the times are fed through to the block\n#=&gt; prints 0, 1, then 2\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 11</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntime_warp [0, 1, 2], [:a, :b] do |t, b| \n    puts [t, b]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# If you specify the block with 2 args, it will pass through both the time and the param\n#=&gt; prints out [0, :a], [1, :b], then [2, :a]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 12</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ntime_warp [0, 0.5, 2] do |t, idx| \n    puts [t, idx]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# If you specify the block with 2 args, and no param list to at, it will pass through both the time and the index\n#=&gt; prints out [0, 0], [0.5, 1], then [2, 2]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 13</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntime_warp [0, 0.5, 2], [:a, :b] do |t, b, idx| \n    puts [t, b, idx]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# If you specify the block with 3 args, it will pass through the time, the param and the index\n#=&gt; prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 14</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs &quot;main: &quot;, rand \nrand_back\ntime_warp 1 do        \n                      \n  puts &quot;time_warp:&quot;, rand\n  puts &quot;time_warp:&quot;, rand\n  rand_back          \nend\n\nsleep 2\nputs &quot;main: &quot;, rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# time_warp consumes &amp; interferes with the outer random stream\n# 0.75006103515625\n \n# the random stream inside the at block is the\n# same as the one in the outer block\n# 0.75006103515625\n# 0.733917236328125\n# undo last call to rand\n \n \n \n# value is now 0.733917236328125 again\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 15</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n           \n           \ntime_warp [0, 2] do\n           \n  puts tick\n  puts tick\nend\n           \n           \n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Each block run inherits the same thread locals from the previous one.\n# This means things like the thread local counters can flow through\n# time warp iterations:\n \n# first time round (after 1 beat) prints:\n# 0\n# 1\n \n# second time round (after 2 beats) prints:\n# 2\n# 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "tick_set": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set tick to a specific value</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">tick_set</span>  value <span class=\"info\">(number)</span></pre></code></p>\n<p>Set the default tick to the specified <code>value</code>. If a <code>key</code> is referenced, set that tick to <code>value</code> instead. Next call to <code>look</code> will return <code>value</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntick_set 40\n  puts look  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# set default tick to 40\n#=&gt; 40\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ntick_set :foo, 40\n  puts look(:foo)  \n  puts look        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# set tick :foo to 40\n#=&gt; 40 (tick :foo is now 40)\n#=&gt; 0 (default tick is unaffected)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "tick_reset": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reset tick to 0</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">tick_reset</span>  </pre></code></p>\n<p>Reset default tick to 0. If a <code>key</code> is referenced, set that tick to 0 instead. Same as calling tick_set(0)</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  tick\n  tick\n  tick\n  puts look\n  tick_set 0\n  puts look\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# increment default tick a few times\n \n \n \n#=&gt; 2 (default tick is now 2)\n# default tick is now 0\n#=&gt; 0 (default tick is now 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  tick :foo\n  tick :foo\n  tick :foo\n  puts look(:foo)\n  tick_set 0\n  puts look(:foo)\n  tick_set :foo, 0\n  puts look(:foo)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# increment tick :foo a few times\n \n \n \n#=&gt; 2 (tick :foo is now 2)\n# default tick is now 0\n#=&gt; 2 (tick :foo is still 2)\n#  reset tick :foo\n#=&gt; 0 (tick :foo is now 0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "tick_reset_all": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reset all ticks</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">tick_reset_all</span>  </pre></code></p>\n<p>Reset all ticks - default and keyed</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntick     \n  tick\n  tick :foo\n  tick :foo\n  tick :foo\n  puts look\n  puts look(:foo)\n  tick_reset_all\n  puts look\n  puts look(:foo)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# increment default tick and tick :foo\n \n \n \n \n#=&gt; 1\n#=&gt; 2\n \n#=&gt; 0\n#=&gt; 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "tick": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Increment a tick and return value</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">tick</span>  key <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Increment the default tick by 1 and return value. Successive calls to <code>tick</code> will continue to increment the default tick. If a <code>key</code> is specified, increment that specific tick. If an increment <code>value</code> is specified, increment key by that value rather than 1. Ticks are <code>in_thread</code> and <code>live_loop</code> local, so incrementing a tick only affects the current thread’s version of that tick. See <code>tick_reset</code> and <code>tick_set</code> for directly manipulating the tick vals.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">step:</td>\n <td class=\"even\">\n<p>The amount to tick up by. Default is 1.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">offset:</td>\n <td class=\"odd\">\n<p>Offset to add to index returned. Useful when calling tick on lists, rings and vectors to offset the returned value. Default is 0.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs tick\n  puts tick\n  puts tick\n  puts tick\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 0\n#=&gt; 1\n#=&gt; 2\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs tick(:foo)\n  puts tick(:foo)\n  puts tick(:foo)\n  puts tick(:bar)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 0 # named ticks have their own counts\n#=&gt; 1\n#=&gt; 2\n#=&gt; 0 # tick :bar is independent of tick :foo\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n \n\n  puts tick            \n  puts tick            \n  puts tick            \n  puts tick(step: 2)   \n  puts tick(step: 2)   \n  puts tick(step: 10)  \n  puts tick            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# You can tick by more than increments of 1\n# using the step: opt\n \n#=&gt; 0\n#=&gt; 1\n#=&gt; 2\n#=&gt; 4\n#=&gt; 6\n#=&gt; 16\n#=&gt; 17\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  live_loop :fast_tick do\n    puts tick  \n    sleep 2    \n  end\n\n  live_loop :slow_tick do\n    puts tick  \n    sleep 4    \n               \n               \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Each_live loop has its own separate ticks\n \n# the fast_tick live_loop&#39;s tick will\n# be updated every 2 seconds\n \n \n \n# the slow_tick live_loop&#39;s tick is\n# totally independent from the fast_tick\n# live loop and will be updated every 4\n# seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nlive_loop :regular_tick do\n    puts tick  \n    sleep 1    \n  end\n\n  live_loop :random_reset_tick do\n    if one_in 3\n      tick_reset\n      puts &quot;reset tick!&quot;\n    end\n    puts tick  \n    sleep 1    \n               \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# the regular_tick live_loop&#39;s tick will\n# be updated every second\n \n \n \n# randomly reset tick\n \n \n \n# this live_loop&#39;s tick is totally\n# independent and the reset only affects\n# this tick.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n \n  live_loop :scale do\n    play [:c, :d, :e, :f, :g].tick  \n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Ticks work directly on lists, and will tick through each element\n# However, once they get to the end, they&#39;ll return nil\n \n# play all notes just once, then rests\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  live_loop :odd_scale do\n    tick \n    play [:c, :d, :e, :f, :g, :a].tick  \n                                        \n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Normal ticks interact directly with list ticks\n \n# Increment the default tick\n# this now play every *other* note just once,\n# then rests\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n \n \n \n  live_loop :looped_scale do\n    play (ring :c, :d, :e, :f, :g).tick  \n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Ticks work wonderfully with rings\n# as the ring ensures the tick wraps\n# round internally always returning a\n# value\n \n# play all notes just once, then repeats\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 9</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n \n  live_loop :looped_scale do\n    play (scale :e3, :minor_pentatonic).tick  \n    sleep 0.25\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Ticks work wonderfully with scales\n# which are also rings\n \n# play all notes just once, then repeats\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "look": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Obtain value of a tick</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">look</span>  </pre></code></p>\n<p>Read and return value of default tick. If a <code>key</code> is specified, read the value of that specific tick. Ticks are <code>in_thread</code> and <code>live_loop</code> local, so the tick read will be the tick of the current thread calling <code>look</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">offset:</td>\n <td class=\"even\">\n<p>Offset to add to index returned. Useful when calling look on lists, rings and vectors to offset the returned value</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs look\n  puts look\n  puts look\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 0\n#=&gt; 0\n#=&gt; 0 # look doesn&#39;t advance the tick, it just returns the current value\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs look\n  tick\n  puts look\n  tick\n  puts look\n  puts look\n  tick\n  puts look\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 0 # A look is always 0 before the first tick\n# advance the tick\n#=&gt; 0 # Note: a look is still 0 after the first tick.\n \n#=&gt; 1\n#=&gt; 1 # making multiple calls to look doesn&#39;t affect tick value\n \n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ntick(:foo)\n  tick(:foo)\n  puts look(:foo)\n  puts look\n  puts look(:bar)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n#=&gt; 1 (keyed look :foo has been advanced)\n#=&gt; 0 (default look hasn&#39;t been advanced)\n#=&gt; 0 (other keyed looks haven&#39;t been advanced either)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  live_loop :foo do\n    tick                                     \n    use_synth :beep\n    play (scale :e3, :minor_pentatonic).look \n    sleep 0.5\n    use_synth :square\n    play (ring :e1, :e2, :e3).look, release: 0.25\n    sleep 0.25\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You can call look on lists and rings\n \n# advance the default tick\n \n# look into the default tick to play all notes in sequence\n \n \n# use the same look on another ring\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nputs look(0)    \nputs look(4)    \nputs look(-4)   \nputs look(20.3) \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Returns numbers unchanged if single argument\n#=&gt; 0\n#=&gt; 4\n#=&gt; -4\n#=&gt; 20.3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "stop": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Stop current thread or run</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">stop</span>  </pre></code></p>\n<p>Stops the current thread or if not in a thread, stops the current run. Does not stop any running synths triggered previously in the run/thread or kill any existing sub-threads.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsample :loop_amen\n  sleep 0.5\n  stop               \n  sample :loop_garzul\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; this sample is played until completion\n \n#=&gt; signal to stop executing this run\n#=&gt; this never executes\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do\n    play 60     \n    stop\n    sleep 0.5   \n    play 72     \n  end\n\n  play 80 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; this note plays\n \n#=&gt; this sleep never happens\n#=&gt; this play never happens\n \n \n#=&gt; this plays as the stop only affected the above thread\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  live_loop :foo\n    sample :bd_haus\n    sleep 1\n    stop              \n  end\n\n  live_loop :bar      \n    sample :elec_blip\n    sleep 0.25\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Stopping live loops\n \n \n \n# live loop :foo will now stop and no longer loop\n \n \n# live loop :bar will continue looping\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "on": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Optionally evaluate block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">on</span>  condition <span class=\"info\">(truthy)</span></pre></code></p>\n<p>Optionally evaluate the block depending on the truthiness of the supplied condition. The truthiness rules are as follows: all values are seen as true except for: false, nil and 0. Lambdas will be automatically called and the truthiness of their results used.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\non true do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; will play 70 as true is truthy\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\non 1 do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; will play 70 as 1 is truthy\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\non 0 do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; will *not* play 70 as 0 is not truthy\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\non false do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; will *not* play 70 as false is not truthy\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\non nil do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; will *not* play 70 as nil is not truthy\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\non lambda{true} do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; will play 70 as the lambda returns a truthy value\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\non lambda{false} do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; will *not* play 70 as the lambda does not return a truthy value\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\non lambda{[true, false].choose} do\n  play 70    \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; will maybe play 70 depending on the choice in the lambda\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "bools": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring of boolean values</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">bools</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new ring of booleans values from 1s and 0s, which can be easier to write and manipulate in a live setting.</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(bools 1, 0)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring true, false)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(bools 1, 0, true, false, nil)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring true, false, true, false, false)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "stretch": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Stretch a sequence of values</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">stretch</span>  list <span class=\"info\">(anything)</span>, count <span class=\"info\">(number)</span></pre></code></p>\n<p>Stretches a list of values each value repeated count times. Always returns a ring regardless of the type of the list that is stretched. To preserve type, consider using <code>.stretch</code> i.e. <code>(ramp 1, 2, 3).stretch(2) #=&gt; (ramp 1, 1, 2, 2, 3, 3)</code></p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(stretch [1,2], 3)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 1, 1, 1, 2, 2, 2)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(stretch [:e2, :c3], 1, [:c2, :d3], 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring :e2, :c3, :c2, :c2, :d3, :d3)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "knit": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Knit a sequence of repeated values</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">knit</span>  value <span class=\"info\">(anything)</span>, count <span class=\"info\">(number)</span></pre></code></p>\n<p>Knits a series of value, count pairs to create a ring buffer where each value is repeated count times.</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(knit 1, 5)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 1, 1, 1, 1, 1)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(knit :e2, 2, :c2, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring :e2, :e2, :c2, :c2, :c2)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "spread": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Euclidean distribution for beats</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">spread</span>  num_accents <span class=\"info\">(number)</span>, size <span class=\"info\">(number)</span></pre></code></p>\n<p>Creates a new ring of boolean values which space a given number of accents as evenly as possible throughout a bar. This is an implementation of the process described in ‘The Euclidean Algorithm Generates Traditional Musical Rhythms’ (Toussaint 2005).</p>\n\n<p class=\"introduced\">Introduced in v2.4</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">rotate:</td>\n <td class=\"even\">\n<p>rotate to the next strong beat allowing for easy permutations of the original rhythmic grouping (see example)</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(spread 3, 8)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring true, false, false, true, false, false, true, false) a spacing of 332\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(spread 3, 8, rotate: 1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring true, false, false, true, false, true, false, false) a spacing of 323\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  live_loop :euclid_beat do\n    sample :elec_bong, amp: 1.5 if (spread 3, 8).tick\n    sample :perc_snap, amp: 0.8 if (spread 7, 11).look\n    sample :bd_haus, amp: 2 if (spread 1, 4).look\n    sleep 0.125\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Easily create interesting polyrhythmic beats\n \n# Spread 3 bongs over 8\n# Spread 7 snaps over 11\n# Spread 1 bd over 4\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n \n  (spread 2, 5) \n\n  (spread 3, 4) \n                \n\n  (spread 3, 5) \n                \n                \n\n  (spread 3, 7) \n\n  (spread 3, 8) \n\n  (spread 4, 7) \n\n  (spread 4, 9) \n\n  (spread 4, 11)\n\n  (spread 5, 6) \n                \n\n  (spread 5, 7) \n\n  (spread 5, 8) \n\n  (spread 5, 9) \n\n  (spread 5, 11)\n                \n\n  (spread 5, 12)\n                \n\n  (spread 5, 16)\n\n  (spread 7, 8) \n\n  (spread 7, 12)\n\n  (spread 7, 16)\n\n  (spread 9, 16)\n\n  (spread 11, 24)\n\n  (spread 13, 24)\n                 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Spread descriptions from\n# &#39;The Euclidean Algorithm Generates Traditional Musical Rhythms&#39; (Toussaint 2005).\n# A thirteenth century Persian rhythm called Khafif-e-ramal.\n \n# The archetypal pattern of the Cumbria from Columbia, as well\n# as a Calypso rhythm from Trinidad\n \n# When started on the second onset, is another thirteenth\n# century Persian rhythm by the name of Khafif-e-ramal, as well\n# as a Romanian folk-dance rhythm.\n \n# A ruchenitza rhythm used in a Bulgarian folk-dance.\n \n# The Cuban tresillo pattern\n \n# Another Ruchenitza Bulgarian folk-dance rhythm\n \n# The Aksak rhythm of Turkey.\n \n# The metric pattern used by Frank Zappa in his piece Outside Now\n \n# Yields the York-Samai pattern, a popular Arab rhythm, when\n# started on the second onset.\n \n# The Nawakhat pattern, another popular Arab rhythm.\n \n# The Cuban cinquillo pattern.\n \n# A popular Arab rhythm called Agsag-Samai.\n \n# The metric pattern used by Moussorgsky in Pictures at an\n# Exhibition\n \n# The Venda clapping pattern of a South African children&#39;s\n# song.\n \n# The Bossa-Nova rhythm necklace of Brazil.\n \n# A typical rhythm played on the Bendir (frame drum)\n \n# A common West African bell pattern.\n \n# A Samba rhythm necklace from Brazil.\n \n# A rhythm necklace used in the Central African Republic.\n \n# A rhythm necklace of the Aka Pygmies of Central Africa.\n \n# Another rhythm necklace of the Aka Pygmies of the upper\n# Sangha.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "range": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring buffer with the specified start, finish and step size</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">range</span>  start <span class=\"info\">(number)</span>, finish <span class=\"info\">(number)</span>, step_size <span class=\"info\">(number)</span></pre></code></p>\n<p>Create a new ring buffer from the range arguments (start, finish and step size). Step size defaults to <code>1</code>. Indexes wrap around positively and negatively</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">step:</td>\n <td class=\"even\">\n<p>Size of increment between steps; step size.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">inclusive:</td>\n <td class=\"odd\">\n<p>If set to true, range is inclusive of finish value</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(range 1, 5)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 1, 2, 3, 4)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(range 1, 5, inclusive: true)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 1, 2, 3, 4, 5)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(range 1, 5, step: 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 1, 3)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(range 1, -5, step: 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 1, -1, -3)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(range 1, -5, step: 2)[-1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; -3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "line": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring buffer representing a straight line</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">line</span>  start <span class=\"info\">(number)</span>, finish <span class=\"info\">(number)</span></pre></code></p>\n<p>Create a ring buffer representing a straight line between start and finish of steps elements. Steps defaults to <code>4</code>. Indexes wrap around positively and negatively. Similar to <code>range</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">steps:</td>\n <td class=\"even\">\n<p>number of slices or segments along the line</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">inclusive:</td>\n <td class=\"odd\">\n<p>boolean value representing whether or not to include finish value in line</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(line 0, 4, steps: 4)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 0.0, 1.0, 2.0, 3.0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(line 5, 0, steps: 5)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 5.0, 4.0, 3.0, 2.0, 1.0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(line 0, 3, inclusive: true)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 0.0, 1.0, 2.0, 3.0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "halves": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring of successive halves</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">halves</span>  start <span class=\"info\">(number)</span>, num_halves <span class=\"info\">(int)</span></pre></code></p>\n<p>Create a ring containing the results of successive halving of the <code>start</code> value. If <code>num_halves</code> is negative, will return a ring of <code>doubles</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(halves 60, 2) \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 60, 30)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(halves 120, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 120, 60, 30)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(halves 120, 5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 120, 60, 30, 15, 7.5)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(halves 30, -5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 30, 60, 120, 240, 480)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "doubles": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring of successive doubles</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">doubles</span>  start <span class=\"info\">(number)</span>, num_doubles <span class=\"info\">(int)</span></pre></code></p>\n<p>Create a ring containing the results of successive doubling of the <code>start</code> value. If <code>num_doubles</code> is negative, will return a ring of <code>halves</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(doubles 60, 2) \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 60, 120)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(doubles 1.5, 3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 1.5, 3, 6)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(doubles 1.5, 5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 1.5, 3, 6, 12, 24)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(doubles 100, -4)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 100, 50, 25, 12.5)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "vector": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a vector</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">vector</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new immutable vector from args. Out of range indexes return nil.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(vector 1, 2, 3)[0]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(vector 1, 2, 3)[1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(vector 1, 2, 3)[2]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(vector 1, 2, 3)[3]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(vector 1, 2, 3)[1000]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(vector 1, 2, 3)[-1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(vector 1, 2, 3)[-1000]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "ring": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ring buffer</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">ring</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new immutable ring buffer from args. Indexes wrap around positively and negatively</p>\n\n<p class=\"introduced\">Introduced in v2.2</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ring 1, 2, 3)[0]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(ring 1, 2, 3)[1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ring 1, 2, 3)[3]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(ring 1, 2, 3)[-1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "map": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create an immutable map</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">map</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new immutable key/value map from args.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(map foo: 1, bar: 2)[:foo]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(map foo: 1, bar: 2)[:bar]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(map foo: 1, bar: 2)[:quux]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; nil\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "ramp": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Create a ramp vector</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">ramp</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Create a new immutable ramp vector from args. Indexes always return first or last value if out of bounds.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ramp 1, 2, 3)[0]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(ramp 1, 2, 3)[1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ramp 1, 2, 3)[2]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(ramp 1, 2, 3)[3]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ramp 1, 2, 3)[1000]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n(ramp 1, 2, 3)[-1]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n(ramp 1, 2, 3)[-1000]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "choose": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Random list selection</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">choose</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Choose an element at random from a list (array).</p>\n\n<p>If no arguments are given, will return a lambda function which when called takes an argument which will be a list to be chosen from. This is useful for choosing random <code>onset:</code> vals for samples</p>\n\n<p>Always returns a single element (or nil)</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nloop do\n    play choose([60, 64, 67])\n    sleep 1\n    play chord(:c, :major).choose\n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; plays one of 60, 64 or 67 at random\n \n#=&gt; You can also call .choose on the list\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :foo do\n  sample :loop_amen, onset: choose  \n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Using choose for random sample onsets\n \n# choose a random onset value each time\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "pick": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Randomly pick from list (with duplicates)</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">pick</span>  list <span class=\"info\">(array)</span>, n <span class=\"info\">(number_or_nil)</span></pre></code></p>\n<p>Pick n elements from list or ring. Unlike shuffle, after each element has been picked, it is ‘returned’ to the list so it may be picked again. This means there may be duplicates in the result. If n is greater than the size of the ring/list then duplicates are guaranteed to be in the result.</p>\n\n<p>If <code>n</code> isn’t supplied it defaults to a size of 1.</p>\n\n<p>If no arguments are given, will return a lambda function which when called takes an argument which will be a list to be picked from. This is useful for choosing random <code>onset:</code> vals for samples.</p>\n\n<p>Always returns a list-like thing (either an array or ring)</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">skip:</td>\n <td class=\"even\">\n<p>Number of rands to skip over with each successive pick</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs [1, 2, 3, 4, 5].pick(3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; [4, 4, 3]\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs (ring 1, 2, 3, 4, 5).pick(3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 4, 4, 3)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs (ring 1, 2).pick(5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; (ring 2, 2, 1, 1, 1)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs (ring 1, 2, 3).pick\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; (ring 3)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :foo do\n  sample :loop_amen, onset: pick  \n  sleep 0.125\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Using pick for random sample onsets\n \n# pick a random onset value each time\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "inc": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Increment</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">inc</span>  n <span class=\"info\">(number)</span></pre></code></p>\n<p>Increment a number by <code>1</code>. Equivalent to <code>n + 1</code></p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ninc 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# returns 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ninc -1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# returns 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "dec": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Decrement</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">dec</span>  n <span class=\"info\">(number)</span></pre></code></p>\n<p>Decrement a number by <code>1</code>. Equivalent to <code>n - 1</code></p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ndec 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# returns 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ndec -1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# returns -2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "loop": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Repeat do/end block forever</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">loop</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Given a do/end block, repeats it forever. Note that once the program enters the loop - it will not move on but will instead stay within the loop. Plain loops like this are like black holes - instead of sucking in the light they suck in the program.</p>\n\n<p>The loop must either <code>sleep</code> or <code>sync</code> each time round otherwise it will stop and throw an error. This is to stop the loop from spinning out of control and locking the system.</p>\n\n<p>For a more powerful, flexible loop built for live coding see <code>live_loop</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nplay 70      \n\nloop do\n  play 50    \n  sleep 1\n  play 62\n  sleep 2\nend\n\nplay 80     \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# note 70 is played\n \n \n# This loop will repeat notes 50 and 62 forever\n \n \n \n \n \n# This is *never* played as the program is trapped in the loop above\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "live_loop": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>A loop for live coding</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">live_loop</span>  name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Loop the do/end block forever. However, unlike a basic loop, a live_loop has two special properties. Firstly it runs in a thread - so you can have any number of live loops running at the same time (concurrently). Secondly, you can change the behaviour of a live loop whilst it is still running without needing to stop it. Live loops are therefore the secret to live coding with Sonic Pi.</p>\n\n<p>As live loops are excecuted within a named in_thread, they behave similarly. See the in_thread documentation for all the details. However, it’s worth mentioning a few important points here. Firstly, only one live loop with a given name can run at any one time. Therefore, if you define two or more <code>live_loop</code>s called <code>:foo</code> only one will be running. Another important aspect of <code>live_loop</code>s is that they manage their own thread locals set with the <code>use_*</code> and <code>with_*</code> fns. This means that each <code>live_loop</code> can have its own separate default synth, BPM and sample defaults. When a <code>live_loop</code> is <em>first</em> created, it inherits the thread locals from the parent thread, but once it has started, the only way to change them is by re-defining the do/end body of the <code>live_loop</code>. See the examples below for details. Finally, as mentioned above, provided their names are different, you may have many <code>live_loop</code>s executing at once.</p>\n\n<p>A typical way of live coding with live loops is to define a number of them in a buffer, hit Run to start them and then to modify their do/end blocks and then hit Run again. This will not create any more thread, but instead just modify the behaviour of the existing threads. The changes will <em>not</em> happen immediately. Instead, they will only happen the next time round the loop. This is because the behaviour of each live loop is implemented with a standard function. When a live loop is updated, the function definition is also updated. Each time round the live loop, the function is called, so the new behviour is only observed next time round the loop.</p>\n\n<p>Also sends a <code>cue</code> with the same name each time the <code>live_loop</code> repeats. This may be used to <code>sync</code> with other threads and <code>live_loop</code>s.</p>\n\n<p>If the <code>live_loop</code> block is given a parameter, this is given the result of the last run of the loop (with initial value either being <code>0</code> or an init arg). This allows you to ‘thread’ values across loops.</p>\n\n<p>Finally, it is possible to delay the initial trigger of the live_loop on creation with both the <code>delay:</code> and <code>sync:</code> opts. See their respective docstrings. If both <code>delay:</code> and <code>sync:</code> are specified, on initial live_loop creation first the delay will be honoured and then the sync.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">init:</td>\n <td class=\"even\">\n<p>initial value for optional block arg</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">auto_cue:</td>\n <td class=\"odd\">\n<p>enable or disable automatic cue (default is true)</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">delay:</td>\n <td class=\"even\">\n<p>Initial delay in beats before the live_loop starts. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">sync:</td>\n <td class=\"odd\">\n<p>Initial sync symbol. Will sync with this symbol before the live_loop starts.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sync_bpm:</td>\n <td class=\"even\">\n<p>Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">seed:</td>\n <td class=\"odd\">\n<p>override initial random generator seed before starting loop.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\nlive_loop :ping do \n  sample :elec_ping\n  sleep 1          \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Define and start a simple live loop\n \n# Create a live loop called :ping\n# This live loops plays the :elec_ping sample\n# Then sleeps for 1 beat before repeating\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\nlive_loop :ping do \n  sample :elec_ping\n                   \n                   \n                   \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Every live loop must sleep or sync\n \n# Create a live loop called :ping\n# This live loops plays the :elec_ping sample\n# However, because the do/end lock of the live loop does not\n# contain any calls to sleep or sync, the live loop stops at\n# the end of the first loop with a &#39;Did not sleep&#39; error.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :foo do \n  play 70\n  sleep 1\nend\n\nlive_loop :bar do \n  sample :bd_haus \n  sleep 0.5       \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Multiple live loops will play at the same time\n# Start a live loop called :foo\n \n \n \n \n# Start another live loop called :bar\n# Both :foo and :bar will be playing\n# at the same time.\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nuse_bpm 30\nlive_loop :foo do\n  play 70          \n  sleep 1          \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Live loops inherit external use_* thread locals\n \n \n# live loop :foo now has a BPM of 30\n# This sleep will be for 2 seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :foo do\n  use_bpm 30      \n  play 70\n  sleep 1         \nend\n\nlive_loop :bar do\n  use_bpm 120     \n  play 82\n  sleep 1         \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Live loops can have their own thread locals\n \n# Set the BPM of live loop :foo to 30\n \n# This sleep will be for 2 seconds\n \n \n \n# Set the BPM of live loop :bar to 120\n \n# This sleep will be for 0.5 seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :foo do |a| \n  puts a              \n  sleep 1\n  a += 1              \nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Live loops can pass values between iterations\n# pass a param (a) to the block (inits to 0)\n# prints out all the integers\n \n# increment a by 1 (last value is passed back into the loop)\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nlive_loop :foo do \n  play 70\n  sleep 1\nend\n\nlive_loop :foo do \n  sample :bd_haus \n  sleep 0.5       \n                  \nend               \n                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Live loop names must be unique\n# Start a live loop called :foo\n \n \n \n \n# Attempt to start another also called :foo\n# With a different do/end block\n# This will not start another live loop\n# but instead replace the behaviour of the first.\n# There will only be one live loop running playing\n# The bass drum\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :foo, sync: :bar do\n play 70                     \n sleep 1                     \nend\n\nsleep 4                      \n\nlive_loop :bar do            \n  sample :bd_haus            \n  sleep 0.5                  \nend                          \n\n                             \n                             \n                             \n                             \n                             \n                             \n                             \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You can sync multiple live loops together\n# Wait for a :bar cue event before starting :foo\n# Live loop :foo is therefore blocked and does\n# not make a sound initially\n \n \n# Wait for 4 beats\n \n# Start a live loop called :foo which will emit a :bar\n# cue message therefore releasing the :foo live loop.\n# Live loop :foo therefore starts and also inherits the\n# logical time of live loop :bar.\n \n# This pattern is also useful to re-sync live loops after\n# errors are made. For example, when modifying live loop :foo\n# it is possible to introduce a runtime error which will stop\n# :foo but not :bar (as they are separate, isolated threads).\n# Once the error has been fixed and the code is re-run, :foo\n# will automatically wait for :bar to loop round and restart\n# in sync with the correct virtual clock.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "block_duration": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Return block duration</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">block_duration</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Given a block, runs it and returns the amount of time that has passed. This time is in seconds and is not scaled to the current BPM. Any threads spawned in the block are not accounted for.</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ndur = block_duration do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs dur\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n \n \n \n#=&gt; Returns 3 as 3 seconds have passed within the block\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_bpm 120\ndur = block_duration do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs dur\n        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n \n \n \n \n \n \n#=&gt; Returns 1.5 as 1.5 seconds have passed within the block\n#   (due to the BPM being 120)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "block_slept?": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Determine if block contains sleep time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">block_slept?</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Given a block, runs it and returns whether or not the block contained sleeps or syncs</p>\n\n<p class=\"introduced\">Introduced in v2.9</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nslept = block_slept? do\n  play 50\n  sleep 1\n  play 62\n  sleep 2\nend\n\nputs slept\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n \n \n \n#=&gt; Returns true as there were sleeps in the block\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do\n  sleep 1\n  cue :foo \nend\n\nslept = block_slept? do\n  sync :foo \n  play 62\nend\n\nputs slept\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# trigger a cue on a different thread\n \n \n \n# wait for the cue before playing the note\n \n \n \n#=&gt; Returns true as the block contained a sync.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nslept = block_slept? do\n  play 50\n  play 62\nend\n\nputs slept\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n \n \n \n#=&gt; Returns false as there were no sleeps in the block\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "at": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Asynchronous Time. Run a block at the given time(s)</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">at</span>  times <span class=\"info\">(list)</span>, params <span class=\"info\">(list)</span></pre></code></p>\n<p>Given a list of times, run the block once after waiting each given time. If passed an optional params list, will pass each param individually to each block call. If size of params list is smaller than the times list, the param values will act as rings (rotate through). If the block is given 1 arg, the times are fed through. If the block is given 2 args, both the times and the params are fed through. A third block arg will receive the index of the time.</p>\n\n<p>Note, all code within the block is executed in its own thread. Therefore despite inheriting all thread locals such as the random stream and ticks, modifications will be isolated to the block and will not affect external code.</p>\n\n<p><code>at</code> is just-in-time scheduling using multiple isolated threads. See <code>time_warp</code> for ahead-of-time scheduling within the current thread.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nat 4 do\n    sample :ambi_choir   \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# play sample after waiting for 4 beats\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nat [1, 2, 4] do \n    play 75          \n  end                \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# plays a note after waiting 1 beat,\n# then after 1 more beat,\n# then after 2 more beats (4 beats total)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nat [1, 2, 3], [75, 76, 77] do |n| \n    play n\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# plays 3 different notes\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nat [1, 2, 3],\n      [{:amp=&gt;0.5}, {:amp=&gt; 0.8}] do |p|\n    sample :drum_cymbal_open, p         \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n# alternate soft and loud\n# cymbal hits three times\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nat [0, 1, 2] do |t|\n    puts t\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# when no params are given to at, the times are fed through to the block\n#=&gt; prints 0, 1, then 2\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nat [0, 1, 2], [:a, :b] do |t, b| \n    puts [t, b]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#If you specify the block with 2 args, it will pass through both the time and the param\n#=&gt; prints out [0, :a], [1, :b], then [2, :a]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 7</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nat [0, 0.5, 2] do |t, idx| \n    puts [t, idx]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#If you specify the block with 2 args, and no param list to at, it will pass through both the time and the index\n#=&gt; prints out [0, 0], [0.5, 1], then [2, 2]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 8</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nat [0, 0.5, 2], [:a, :b] do |t, b, idx| \n    puts [t, b, idx]\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#If you specify the block with 3 args, it will pass through the time, the param and the index\n#=&gt; prints out [0, :a, 0], [0.5, :b, 1], then [2, :a, 2]\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 9</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nputs &quot;main: &quot;, rand \nrand_back\nat 1 do        \n               \n  puts &quot;at:&quot;, rand\n  puts &quot;at:&quot;, rand\nend\n\nsleep 2\nputs &quot;main: &quot;, rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# at does not consume &amp; interfere with the outer random stream\n# 0.75006103515625\n \n# the random stream inside the at block is separate and\n# isolated from the outer stream.\n# 0.9287109375\n# 0.1043701171875\n \n \n \n# value is still 0.75006103515625\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 10</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nat [1, 2] do\n           \n  puts rand\n  puts rand\nend\n           \n           \n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Each block run within at has its own isolated random stream:\n \n# first time round (after 1 beat) prints:\n# 0.9287109375\n# 0.1043701171875\n \n# second time round (after 2 beats) prints:\n# 0.1043701171875\n# 0.764617919921875\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "version": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current version information</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">version</span>  </pre></code></p>\n<p>Return information representing the current version of Sonic Pi. This information may be further inspected with <code>version.major</code>, <code>version.minor</code>, <code>version.patch</code> and <code>version.dev</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs version\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# =&gt; Prints out the current version such as v2.0.1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs version.major\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# =&gt; Prints out the major version number such as 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs version.minor\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# =&gt; Prints out the minor version number such as 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs version.patch\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# =&gt; Prints out the patch level for this version such as 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "spark_graph": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Returns a string representing a list of numeric values as a spark graph/bar chart</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">spark_graph</span>  </pre></code></p>\n<p>Given a list of numeric values, this method turns them into a string of bar heights. Useful for quickly graphing the shape of an array. Remember to use puts so you can see the output. See <code>spark</code> for a simple way of printing a spark graph.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs (spark_graph (range 1, 5))   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; ▁▃▅█\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nputs (spark_graph (range 1, 5).shuffle)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; ▃█▅▁\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "spark": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Print a string representing a list of numeric values as a spark graph/bar chart</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">spark</span>  </pre></code></p>\n<p>Given a list of numeric values, this method turns them into a string of bar heights and prints them out. Useful for quickly graphing the shape of an array.</p>\n\n<p class=\"introduced\">Introduced in v2.5</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nspark (range 1, 5)   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; ▁▃▅█\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nspark (range 1, 5).shuffle\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; ▃█▅▁\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "defonce": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Define a named value only once</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">defonce</span>  name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Allows you to assign the result of some code to a name, with the property that the code will only execute once - therefore stopping re-definitions. This is useful for defining values that you use in your compositions but you don’t want to reset every time you press run. You may force the block to execute again regardless of whether or not it has executed once already by using the override option (see examples).</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">override:</td>\n <td class=\"even\">\n<p>If set to true, re-definitions are allowed and this acts like define</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ndefonce :foo do \n    sleep 1       \n                  \n                  \n    puts &quot;hello&quot;\n    10            \n  end\n\n \n  puts foo\n\n \n  puts foo\n\n\n\n  defonce :foo do\n    puts &quot;you can&#39;t redefine me&quot;\n    15\n  end\n\n  puts foo\n\n \n \n  3.times do\n    play foo \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Define a new function called foo\n# Sleep for a beat in the function definition. Note that this amount\n# of time in seconds will depend on the current BPM of the live_loop\n# or thread calling this function.\n# Print hello\n# Return a value of 10\n \n \n# Call foo on its own\n# The run sleeps for a beat and prints &quot;hello&quot; before returning 10\n \n# Try it again:\n# This time the run doesn&#39;t sleep or print anything out. However, 10 is still returned.\n \n \n \n# Try redefining foo\n \n \n \n \n# We still don&#39;t see any printing or sleeping, and the result is still 10\n \n# You can use foo anywhere you would use normal code.\n# For example, in a block:\n \n# play 10\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ndefonce :bar do\n    50\n  end\n\n  play bar\n\n  defonce :bar do\n    70\n  end\n\n  play bar\n\n  defonce :bar, override: true do \n    80\n  end\n\n  play bar\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n \n \n# plays 50\n \n# This redefinition doesn&#39;t work due to the behaviour of defonce\n \n \n \n# Still plays 50\n \n# Force definition to take place with override option\n \n \n \n# plays 80\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "ndefine": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Define a new function</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">ndefine</span>  name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Does nothing. Use to stop a define from actually defining. Simpler than wrapping whole define in a comment block or commenting each individual line out.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n</body>\n",
      "define": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Define a new function</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">define</span>  name <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Allows you to group a bunch of code and give it your own name for future re-use. Functions are very useful for structuring your code. They are also the gateway into live coding as you may redefine a function whilst a thread is calling it, and the next time the thread calls your function, it will use the latest definition.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  define :foo do\n    play 50\n    sleep 1\n  end\n\n \n  foo\n\n \n \n  3.times do\n    foo\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Define a new function called foo\n \n \n \n \n \n# Call foo on its own\n \n \n# You can use foo anywhere you would use normal code.\n# For example, in a block:\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "comment": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block level commenting</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">comment</span>  </pre></code></p>\n<p>Does not evaluate any of the code within the block. However, any optional args passed before the block <em>will</em> be evaluated although they will be ignored. See <code>uncomment</code> for switching commenting off without having to remove the comment form.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ncomment do\n    play 50\n    sleep 1\n    play 62\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# starting a block level comment:\n# not played\n# no sleep happens\n# not played\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "uncomment": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block level comment ignoring</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">uncomment</span>  </pre></code></p>\n<p>Evaluates all of the code within the block. Use to reverse the effect of the comment without having to explicitly remove it.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuncomment do\n    play 50\n    sleep 1\n    play 62\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# starting a block level comment:\n# played\n# sleep happens\n# played\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "print": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Display a message in the output pane</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">print</span>  output <span class=\"info\">(anything)</span></pre></code></p>\n<p>Displays the information you specify as a string inside the output pane. This can be a number, symbol, or a string itself. Useful for debugging. Synonym for <code>puts</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint &quot;hello there&quot;  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print the string &quot;hello there&quot; to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nprint 5              \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; will print the number 5 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint foo            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print the contents of foo to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "puts": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Display a message in the output pane</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">puts</span>  output <span class=\"info\">(anything)</span></pre></code></p>\n<p>Displays the information you specify as a string inside the output pane. This can be a number, symbol, or a string itself. Useful for debugging. Synonym for <code>print</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint &quot;hello there&quot;  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print the string &quot;hello there&quot; to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nprint 5              \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; will print the number 5 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint foo            \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print the contents of foo to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "vt": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get virtual time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">vt</span>  </pre></code></p>\n<p>Get the virtual time of the current thread.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs vt\n   sleep 1\n   puts vt\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# prints 0\n \n# prints 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "factor?": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Factor test</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">factor?</span>  val <span class=\"info\">(number)</span>, factor <span class=\"info\">(number)</span></pre></code></p>\n<p>Test to see if factor is indeed a factor of <code>val</code>. In other words, can <code>val</code> be divided exactly by factor.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nfactor?(10, 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# true - 10 is a multiple of 2 (2 * 5 = 10)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nfactor?(11, 2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#false - 11 is not a multiple of 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nfactor?(2, 0.5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#true - 2 is a multiple of 0.5 (0.5 * 4 = 2)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "quantise": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Quantise a value to resolution</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">quantise</span>  n <span class=\"info\">(number)</span>, step <span class=\"info\">(positive_number)</span></pre></code></p>\n<p>Round value to the nearest multiple of step resolution.</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nquantise(10, 1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# 10 is already a multiple of 1, so returns 10\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nquantise(10, 1.1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Returns 9.9 which is 1.1 * 9\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nquantise(13.3212, 0.1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# 13.3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nquantise(13.3212, 0.2)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# 13.4\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nquantise(13.3212, 0.3)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# 13.2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nquantise(13.3212, 0.5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# 13.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "dice": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Random dice throw</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">dice</span>  num_sides <span class=\"info\">(number)</span></pre></code></p>\n<p>Throws a dice with the specified num_sides (defaults to <code>6</code>) and returns the score as a number between <code>1</code> and <code>num_sides</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ndice\n      \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# will return a number between 1 and 6 inclusively\n# (with an even probability distribution).\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ndice 3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# will return a number between 1 and 3 inclusively\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "one_in": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Random true value with specified probability</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">one_in</span>  num <span class=\"info\">(number)</span></pre></code></p>\n<p>Returns <code>true</code> or <code>false</code> with a specified probability - it will return true every one in num times where num is the param you specify</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\none_in 2\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# will return true with a probability of 1/2, false with probability 1/2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\none_in 3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# will return true with a probability of 1/3, false with a probability of 2/3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\none_in 100\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# will return true with a probability of 1/100, false with a probability of 99/100\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rdist": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Random number in centred distribution</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rdist</span>  width <span class=\"info\">(number)</span>, centre <span class=\"info\">(number)</span></pre></code></p>\n<p>Returns a random number within the range with width around centre. If optional arg <code>step:</code> is used, the result is quantised by step.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">step:</td>\n <td class=\"even\">\n<p>Step size of value to quantise to.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rdist(1, 0)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print a number between -1 and 1\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nprint rdist(1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; centre defaults to 0 so this is the same as rdist(1, 0)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nloop do\n    play :c3, pan: rdist(1)\n    sleep 0.125\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; Will play :c3 with random L/R panning\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rrand": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random float between two numbers</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rrand</span>  min <span class=\"info\">(number)</span>, max <span class=\"info\">(number)</span></pre></code></p>\n<p>Given two numbers, this produces a float between the supplied min and max values exclusively. Both min and max need to be supplied. For random integers, see <code>rrand_i</code>. If optional arg <code>step:</code> is used, the result is quantised by step.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">step:</td>\n <td class=\"even\">\n<p>Step size of value to quantise to.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rrand(0, 10)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print a number like 8.917730007820797 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nloop do\n    play rrand(60, 72)\n    sleep 0.125\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; Will play a random non-integer midi note between C4 (60) and C5 (72) such as 67.3453 or 71.2393\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rrand_i": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random whole number between two points inclusively</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rrand_i</span>  min <span class=\"info\">(number)</span>, max <span class=\"info\">(number)</span></pre></code></p>\n<p>Given two numbers, this produces a whole number between the min and max you supplied inclusively. Both min and max need to be supplied. For random floats, see <code>rrand</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rrand_i(0, 10)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print a random number between 0 and 10 (e.g. 4, 0 or 10) to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nloop do\n    play rrand_i(60, 72)\n    sleep 0.125\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n#=&gt; Will play a random midi note between C4 (60) and C5 (72)\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random float below a value</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand</span>  max <span class=\"info\">(number_or_range)</span></pre></code></p>\n<p>Given a max number, produces a float between <code>0</code> and the supplied max value. If max is a range, produces a float within the range. With no args returns a random value between <code>0</code> and <code>1</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rand(0.5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print a number like 0.375030517578125 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_i": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random whole number below a value (exclusive)</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_i</span>  max <span class=\"info\">(number_or_range)</span></pre></code></p>\n<p>Given a max number, produces a whole number between <code>0</code> and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns either <code>0</code> or <code>1</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rand_i(5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print either 0, 1, 2, 3, or 4 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_look": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random number without consuming a rand</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_look</span>  max <span class=\"info\">(number_or_range)</span></pre></code></p>\n<p>Given a max number, produces a number between <code>0</code> and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns a value between <code>0</code> and <code>1</code>.</p>\n\n<p>Does not consume a random value from the stream. Therefore, multiple sequential calls to <code>rand_look</code> will all return the same value.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rand_look(0.5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print a number like 0.375030517578125 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nprint rand_look(0.5)\n  print rand_look(0.5)\n  print rand_look(0.5)\n  print rand(0.5)\n  print rand_look(0.5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; will print a number like 0.375030517578125 to the output pane\n#=&gt; will print the same number again\n#=&gt; will print the same number again\n#=&gt; will print a different random number\n#=&gt; will print the same number as the previous line again.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_i_look": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Generate a random whole number without consuming a rand</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_i_look</span>  max <span class=\"info\">(number_or_range)</span></pre></code></p>\n<p>Given a max number, produces a whole number between <code>0</code> and the supplied max value exclusively. If max is a range produces an int within the range. With no args returns either <code>0</code> or <code>1</code>.</p>\n\n<p>Does not consume a random value from the stream. Therefore, multiple sequential calls to <code>rand_i_look</code> will all return the same value.</p>\n\n<p class=\"introduced\">Introduced in v2.11</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nprint rand_i_look(5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; will print either 0, 1, 2, 3, or 4 to the output pane\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nprint rand_i_look(5)\nprint rand_i_look(5)\nprint rand_i_look(5)\nprint rand_i(5)\nprint rand_i_look(5)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; will print either 0, 1, 2, 3, or 4 to the output pane\n#=&gt; will print the same number again\n#=&gt; will print the same number again\n#=&gt; will print either 0, 1, 2, 3, or 4 to the output pane\n#=&gt; will print the same number as the previous statement\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_back": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Roll back random generator</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_back</span>  amount <span class=\"info\">(number)</span></pre></code></p>\n<p>Roll the random generator back essentially ‘undoing’ the last call to <code>rand</code>. You may specify an amount to roll back allowing you to skip back n calls to <code>rand</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n  puts rand\n\n  rand_back\n           \n           \n\n  puts rand\n  puts rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic rand stream rollback\n \n# prints 0.75006103515625\n \n# roll random stream back one\n# the result of the next call to rand will be\n# exactly the same as the previous call\n \n# prints 0.75006103515625 again!\n# prints 0.733917236328125\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n  puts rand\n  puts rand\n  puts rand\n  puts rand\n\n  rand_back(3)\n              \n              \n              \n\n  puts rand\n  puts rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Jumping back multiple places in the rand stream\n \n# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n \n# roll random stream back three places\n# the result of the next call to rand will be\n# exactly the same as the result 3 calls to\n# rand ago.\n \n# prints  0.733917236328125 again!\n# prints  0.464202880859375\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_skip": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Jump forward random generator</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_skip</span>  amount <span class=\"info\">(number)</span></pre></code></p>\n<p>Jump the random generator forward essentially skipping the next call to <code>rand</code>. You may specify an amount to jump allowing you to skip n calls to <code>rand</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n  puts rand\n\n  rand_skip\n           \n\n  puts rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic rand stream skip\n \n# prints 0.75006103515625\n \n# jump random stream forward one\n# typically the next rand is 0.733917236328125\n \n# prints 0.464202880859375\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n  puts rand\n  puts rand\n  puts rand\n  puts rand\n\n  rand_reset \n\n  puts rand\n\n  rand_skip(2)\n              \n              \n              \n\n  puts rand 0.24249267578125\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Jumping forward multiple places in the rand stream\n \n# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n \n# reset the random stream\n \n# prints 0.75006103515625\n \n# jump random stream forward three places\n# the result of the next call to rand will be\n# exactly the same as if rand had been called\n# three times\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rand_reset": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Reset rand generator to last seed</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rand_reset</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Resets the random stream to the last specified seed. See <code>use_random_seed</code> for changing the seed.</p>\n\n<p class=\"introduced\">Introduced in v2.7</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs rand\n  puts rand\n  puts rand\n  puts rand\n  rand_reset \n  puts rand\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# prints 0.75006103515625\n# prints 0.733917236328125\n# prints 0.464202880859375\n# prints 0.24249267578125\n# reset the random stream\n# prints 0.75006103515625\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "shuffle": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Randomise order of a list</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">shuffle</span>  list <span class=\"info\">(array)</span></pre></code></p>\n<p>Returns a new list with the same elements as the original but with their order shuffled. Also works for strings</p>\n\n<p class=\"introduced\">Introduced in v2.1</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nshuffle [1, 2, 3, 4]\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n#=&gt; Would return something like: [3, 4, 2, 1]\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nshuffle &quot;foobar&quot; \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#=&gt; Would return something like: &quot;roobfa&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_random_seed": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set random seed generator to known seed</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_random_seed</span>  seed <span class=\"info\">(number)</span></pre></code></p>\n<p>Resets the random number generator to the specified seed. All subsequently generated random numbers and randomisation functions such as <code>shuffle</code> and <code>choose</code> will use this new generator and the current generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n  use_random_seed 1\n  puts rand\n  use_random_seed 1\n  puts rand \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Basic usage\n \n# reset random seed to 1\n# =&gt; 0.417022004702574\n# reset random seed back to 1\n#=&gt; 0.417022004702574\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  notes = (scale :eb3, :minor_pentatonic) \n                                          \n\n  with_fx :reverb do\n    live_loop :repeating_melody do        \n\n      use_random_seed 300                 \n                                          \n                                          \n                                          \n                                          \n\n      8.times do                          \n                                          \n                                          \n\n        play notes.choose, release: 0.1   \n                                          \n                                          \n                                          \n        sleep 0.125\n      end\n    end\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Generating melodies\n# Create a set of notes to choose from.\n# Scales work well for this\n \n \n# Create a live loop\n \n# Set the random seed to a known value every\n# time around the loop. This seed is the key\n# to our melody. Try changing the number to\n# something else. Different numbers produce\n# different melodies\n \n# Now iterate a number of times. The size of\n# the iteration will be the length of the\n# repeating melody.\n \n# &#39;Randomly&#39; choose a note from our ring of\n# notes. See how this isn&#39;t actually random\n# but uses a reproducible method! These notes\n# are therefore repeated over and over...\n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_random_seed": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Specify random seed for code block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_random_seed</span>  seed <span class=\"info\">(number)</span></pre></code></p>\n<p>Resets the random number generator to the specified seed for the specified code block. All generated random numbers and randomisation functions such as <code>shuffle</code> and <code>choose</code> within the code block will use this new generator. Once the code block has completed, the original generator is restored and the code block generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_random_seed 1\n  puts rand\n  puts rand \n  use_random_seed 1\n  puts rand\n  with_random_seed 1 do\n    puts rand\n    puts rand\n  end\n  puts rand\n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# reset random seed to 1\n# =&gt; 0.417022004702574\n#=&gt; 0.7203244934421581\n# reset it back to 1\n# =&gt; 0.417022004702574\n# reset seed back to 1 just for this block\n# =&gt; 0.417022004702574\n#=&gt; 0.7203244934421581\n \n# =&gt; 0.7203244934421581\n# notice how the original generator is restored\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  notes = (scale :eb3, :minor_pentatonic, num_octaves: 2) \n                                          \n\n  with_fx :reverb do\n    live_loop :repeating_melody do        \n\n      with_random_seed 300 do             \n                                          \n                                          \n                                          \n                                          \n\n        8.times do                        \n                                          \n                                          \n\n          play notes.choose, release: 0.1 \n                                          \n                                          \n                                          \n          sleep 0.125\n        end\n      end\n\n      play notes.choose, amp: 1.5, release: 0.5\n                                               \n                                               \n                                               \n    end\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Generating melodies\n# Create a set of notes to choose from.\n# Scales work well for this\n \n \n# Create a live loop\n \n# Set the random seed to a known value every\n# time around the loop. This seed is the key\n# to our melody. Try changing the number to\n# something else. Different numbers produce\n# different melodies\n \n# Now iterate a number of times. The size of\n# the iteration will be the length of the\n# repeating melody.\n \n# &#39;Randomly&#39; choose a note from our ring of\n# notes. See how this isn&#39;t actually random\n# but uses a reproducible method! These notes\n# are therefore repeated over and over...\n \n \n \n \n# Note that this line is outside of\n# the with_random_seed block and therefore\n# the randomisation never gets reset and this\n# part of the melody never repeats.\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_random_stream": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Change how random numbers are chosen</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_random_stream</span>  noise_type <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Sets the random number source to be one of :white, :pink, :light_pink, :dark_pink or :perlin.\n      :white is totally random - between 0 and 1, you can expect an even spread of values around 0.1, 0.2, 0.3 etc. This means that jumping around within the range (including large jumps) is expected.\n      :pink is more likely to produce values in the middle of the range and less likely to produce values at the extremes. Between 0 and 1 you expect to see a concentration of values around 0.5. This can make random melodies a little bit more smooth.\n      :perlin is a special kind of noise which produces gradients, a bit like a mountain landscape. Large jumps are much less likely and you will tend to see lots of smooth motion going either up or down\n      :light_pink is halfway between white noise and pink noise - more random and jumpy\n      :dark_pink is halfway between pink noise and brown noise - less jumpy with smoother slopes\n      You can see the ‘buckets’ that the numbers between 0 and 1 fall into with the following code:</p>\n\n<pre><code>    rand_type :white\n    puts 10000.times.collect { rand.round(1) }.tally.sort\n    rand_type :pink\n    puts 10000.times.collect { rand.round(1) }.tally.sort\n    rand_type :perlin\n    puts 10000.times.collect { rand.round(1) }.tally.sort\n</code></pre>\n\n\n<p class=\"introduced\">Introduced in v3.2.3</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_random_stream :white\n  rand_reset\n  puts rand\n  puts rand\n  puts rand\n  rand_reset\n  use_random_stream :pink\n  puts rand\n  puts rand\n  rand_reset\n  use_random_stream :perlin\n  puts rand\n  puts rand\n\n  with_random_stream :white do\n    puts rand\n  end\n\n  puts rand\n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# use white noise as the distribution (default)\n# reset random seed\n# =&gt; 0.75006103515625\n# =&gt; 0.733917236328125\n# =&gt; 0.464202880859375\n# reset it again\n# use pink noise as the distribution\n# =&gt; 0.47808837890625\n# =&gt; 0.56011962890625\n# reset it\n# use perlin noise as the distribution\n# =&gt; 0.546478271484375\n# =&gt; 0.573150634765625\n \n# use white noise just for this block\n# =&gt; 0.464202880859375\n \n \n# =&gt; 0.597015380859375\n# notice how the last generator (perlin) is restored\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_random_stream": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Specify random distribution for code block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_random_stream</span>  noise_type <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Resets the random number generator to the specified noise type for the specified code block. All generated random numbers and randomisation functions such as <code>shuffle</code> and <code>choose</code> within the code block will use this new generator. Once the code block has completed, the original generator is restored and the code block generator is discarded. Use this to change the sequence of random numbers in your piece in a way that can be reproduced. Especially useful if combined with iteration. See examples.</p>\n\n<p class=\"introduced\">Introduced in v3.2.3</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_random_stream :white\n  rand_reset\n  puts rand\n  puts rand\n  puts rand\n  rand_reset\n  use_random_stream :pink\n  puts rand\n  puts rand\n  rand_reset\n  use_random_stream :perlin\n  puts rand\n  puts rand\n\n  with_random_stream :white do\n    puts rand\n  end\n\n  puts rand\n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# use white noise as the distribution (default)\n# reset random seed\n# =&gt; 0.75006103515625\n# =&gt; 0.733917236328125\n# =&gt; 0.464202880859375\n# reset it again\n# use pink noise as the distribution\n# =&gt; 0.47808837890625\n# =&gt; 0.56011962890625\n# reset it\n# use perlin noise as the distribution\n# =&gt; 0.546478271484375\n# =&gt; 0.573150634765625\n \n# use white noise just for this block\n# =&gt; 0.464202880859375\n \n \n# =&gt; 0.597015380859375\n# notice how the last generator (perlin) is restored\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_cue_logging": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Enable and disable cue logging</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_cue_logging</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Enable or disable log messages created on cues. This does not disable the cues themselves, it just stops them from being printed to the log</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_cue_logging true\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on cue messages\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nuse_cue_logging false\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Disable cue messages\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_cue_logging": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level enable and disable cue logging</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_cue_logging</span>  true_or_false <span class=\"info\">(boolean)</span></pre></code></p>\n<p>Similar to use_cue_logging except only applies to code within supplied <code>do</code>/<code>end</code> block. Previous cue log value is restored after block.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  use_cue_logging true\n\n  cue :foo\n\n  with_cue_logging false do\n   \n    cue :bar\n  end\n  sleep 1\n \n  cue :quux\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Turn on debugging:\n \n \n# cue message is printed to log\n \n \n#Cue logging is now disabled\n# cue *is* sent but not displayed in log\n \n \n# Debug is re-enabled\n# cue is displayed in log\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set the tempo</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_bpm</span>  bpm <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the tempo in bpm (beats per minute) for everything afterwards. Affects all subsequent calls to <code>sleep</code> and all temporal synth arguments which will be scaled to match the new bpm. If you wish to bypass scaling in calls to sleep, see the fn <code>rt</code>. Also, if you wish to bypass time scaling in synth args see <code>use_arg_bpm_scaling</code>. See also <code>with_bpm</code> for a block scoped version of <code>use_bpm</code>.</p>\n\n<p>For dance music here’s a rough guide for which BPM to aim for depending on your genre:</p>\n\n<ul>\n  <li>Dub: 60-90 bpm</li>\n  <li>Hip-hop: 60-100 bpm</li>\n  <li>Downtempo: 90-120 bpm</li>\n  <li>House: 115-130 bpm</li>\n  <li>Techno/trance: 120-140 bpm</li>\n  <li>Dubstep: 135-145 bpm</li>\n  <li>Drum and bass: 160-180 bpm</li>\n</ul>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  4.times do\n    play 50, attack: 0.5, release: 0.25\n    sleep 1\n  end\n\n  sleep 2 \n\n \n  use_bpm 120 \n  4.times do\n    play 62, attack: 0.5, release: 0.25\n    sleep 1\n  end\n\n  sleep 2\n\n \n  use_bpm 240 \n  8.times do\n    play 62, attack: 0.5, release: 0.25\n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# default tempo is 60 bpm\n \n# attack is 0.5s and release is 0.25s\n# sleep for 1 second\n \n \n# sleep for 2 seconds\n \n# Let&#39;s make it go faster...\n# double the bpm\n \n# attack is scaled to 0.25s and release is now 0.125s\n# actually sleeps for 0.5 seconds\n \n \n# sleep for 1 second\n \n# Let&#39;s make it go even faster...\n#  bpm is 4x original speed!\n \n# attack is scaled to 0.125s and release is now 0.0625s\n# actually sleeps for 0.25 seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set the tempo for the code block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_bpm</span>  bpm <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the tempo in bpm (beats per minute) for everything in the given block. Affects all containing calls to <code>sleep</code> and all temporal synth arguments which will be scaled to match the new bpm. See also <code>use_bpm</code></p>\n\n<p>For dance music here’s a rough guide for which BPM to aim for depending on your genre:</p>\n\n<ul>\n  <li>Dub: 60-90 bpm</li>\n  <li>Hip-hop: 60-100 bpm</li>\n  <li>Downtempo: 90-120 bpm</li>\n  <li>House: 115-130 bpm</li>\n  <li>Techno/trance: 120-140 bpm</li>\n  <li>Dubstep: 135-145 bpm</li>\n  <li>Drum and bass: 160-180 bpm</li>\n</ul>\n\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  4.times do\n    sample :drum_bass_hard\n    sleep 1\n  end\n\n  sleep 5\n\n \n \n  with_bpm 120 do \n    4.times do\n      sample :drum_bass_hard\n      sleep 1\n    end\n  end\n\n  sleep 5\n\n \n  4.times do\n    sample :drum_bass_hard\n    sleep 1\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# default tempo is 60 bpm\n \n \n# sleeps for 1 second\n \n \n# sleeps for 5 seconds\n \n# with_bpm sets a tempo for everything between do ... end (a block)\n# Hear how it gets faster?\n# set bpm to be twice as fast\n \n \n# now sleeps for 0.5 seconds\n \n \n \n \n \n# bpm goes back to normal\n \n \n# sleeps for 1 second\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_bpm_mul": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set new tempo as a multiple of current tempo for block</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_bpm_mul</span>  mul <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the tempo in bpm (beats per minute) for everything in the given block as a multiplication of the current tempo. Affects all containing calls to <code>sleep</code> and all temporal synth arguments which will be scaled to match the new bpm. See also <code>with_bpm</code></p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 60  \n  play 50\n  sleep 1     \n  play 62\n  sleep 2     \n  with_bpm_mul 0.5 do\n    play 50\n    sleep 1          \n    play 62\n  end\n  sleep 1           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the BPM to 60\n \n# Sleeps for 1 second\n \n# Sleeps for 2 seconds\n# BPM is now (60 * 0.5) == 30\n \n# Sleeps for 2 seconds\n \n \n# BPM is now back to 60, therefore sleep is 1 second\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_bpm_mul": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set new tempo as a multiple of current tempo</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_bpm_mul</span>  mul <span class=\"info\">(number)</span></pre></code></p>\n<p>Sets the tempo in bpm (beats per minute) as a multiplication of the current tempo. Affects all containing calls to <code>sleep</code> and all temporal synth arguments which will be scaled to match the new bpm. See also <code>use_bpm</code></p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 60  \n  play 50\n  sleep 1     \n  play 62\n  sleep 2     \n  use_bpm_mul 0.5\n  play 50\n  sleep 1          \n  play 62\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the BPM to 60\n \n# Sleeps for 1 seconds\n \n# Sleeps for 2 seconds\n# BPM is now (60 * 0.5) == 30\n \n# Sleeps for 2 seconds\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "density": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Squash and repeat time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">density</span>  d <span class=\"info\">(density)</span></pre></code></p>\n<p>Runs the block <code>d</code> times with the bpm for the block also multiplied by <code>d</code>. Great for repeating sections a number of times faster yet keeping within a fixed time. If <code>d</code> is less than 1, then time will be stretched accordingly and the block will take longer to complete.</p>\n\n<p class=\"introduced\">Introduced in v2.3</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 60  \n\n  density 2 do      \n                    \n    sample :bd_haus\n    sleep 0.5       \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the BPM to 60\n \n# BPM for block is now 120\n# block is called 2.times\n# sample is played twice\n# sleep is 0.25s\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\ndensity 2 do |idx|\n    puts idx        \n    sleep 0.5       \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# You may also pass a param to the block similar to n.times\n# prints out 0, 1\n# sleep is 0.25s\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\ndensity 0.5 do         \n                         \n                         \n    play 80, release: 1  \n    sleep 0.5            \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Specifying a density val of &lt; 1 will stretch out time\n# A density of 0.5 will double the length of the block&#39;s\n# execution time.\n# plays note 80 with 2s release\n# sleep is 1s\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current (logically quantized) time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_time</span>  </pre></code></p>\n<p>Returns the current logical time. This is a ‘wall-clock’ time which should typically be pretty similar to Time.now but quantised to a nearby sleep point in the thread. May be quite different to Time.now within a time_warp!</p>\n\n<p>Unlike <code>Time.now</code>, Multiple calls to <code>current_time</code> with no interleaved calls to <code>sleep</code> or <code>sync</code> will return the same value.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_time\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# 2017-03-19 23:37:57 +0000\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n\n\nputs &quot;A&quot;, Time.now.to_f\nputs &quot;B&quot;, __system_thread_locals.get(:sonic_pi_spider_time).to_f\nputs &quot;C&quot;, Time.now.to_f\nputs &quot;D&quot;, __system_thread_locals.get(:sonic_pi_spider_time).to_f\nputs &quot;E&quot;, __system_thread_locals.get(:sonic_pi_spider_time).to_f\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# The difference between current_time and Time.now\n# See that Time.now is continuous and current_time is discrete\n#\n# {run: 19, time: 0.0}\n# ├─ &quot;A&quot; 1489966042.761211\n# ├─ &quot;B&quot; 1489966042.760181\n# ├─ &quot;C&quot; 1489966042.761235\n# ├─ &quot;D&quot; 1489966042.760181\n# └─ &quot;E&quot; 1489966042.760181\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_random_seed": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current random seed</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_random_seed</span>  </pre></code></p>\n<p>Returns the current random seed.</p>\n\n<p>This can be set via the fns <code>use_random_seed</code> and <code>with_random_seed</code>. It is incremented every time you use the random number generator via fns such as <code>choose</code> and <code>rand</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_random_seed\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current random seed\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nputs rand              \nputs rand              \na = current_random_seed\nputs rand              \nputs rand              \nuse_random_seed a      \n                       \nputs rand              \nputs rand              \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Resetting the seed back to a known place\n#=&gt;  0.75006103515625\n#=&gt;  0.733917236328125\n# Grab the current seed\n#=&gt; 0.464202880859375\n#=&gt; 0.24249267578125\n# Restore the seed\n# we&#39;ll now get the same random values:\n#=&gt; 0.464202880859375\n#=&gt; 0.24249267578125\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current tempo</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_bpm</span>  </pre></code></p>\n<p>Returns the current tempo as a bpm value.</p>\n\n<p>This can be set via the fns <code>use_bpm</code>, <code>with_bpm</code>, <code>use_sample_bpm</code> and <code>with_sample_bpm</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nputs current_bpm\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Print out the current bpm\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_beat_duration": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Duration of current beat</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_beat_duration</span>  </pre></code></p>\n<p>Get the duration of the current beat in seconds. This is the actual length of time which will elapse with <code>sleep 1</code>.</p>\n\n<p>Affected by calls to <code>use_bpm</code>, <code>with_bpm</code>, <code>use_sample_bpm</code> and <code>with_sample_bpm</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.6</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 60\n  puts current_beat_duration\n\n  use_bpm 120\n  puts current_beat_duration\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n#=&gt; 1\n \n \n#=&gt; 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "beat": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current beat</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">beat</span>   <span class=\"info\">()</span></pre></code></p>\n<p>Returns the beat value for the current thread/live_loop. Beats are advanced only by calls to <code>sleep</code> and <code>sync</code>. Beats are distinct from virtual time (the value obtained by calling <code>vt</code>) in that it has no notion of rate. It is just essentially a counter for sleeps. After a <code>sync</code>, the beat is overridden with the beat value from the thread which called <code>cue</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120 \n  puts beat   \n  sleep 1\n  puts beat   \n  use_bpm 2000\n  sleep 2\n  puts beat   \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# The current BPM makes no difference\n#=&gt; 0\n \n#=&gt; 1\n \n \n#=&gt; 3\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "rt": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Real time conversion</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">rt</span>  seconds <span class=\"info\">(number)</span></pre></code></p>\n<p>Real time representation. Returns the amount of beats for the value in real-time seconds. Useful for bypassing any bpm scaling</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120 \n  play 50\n  sleep 1     \n  play 62\n  sleep rt(1) \n  play 72\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# modifies all time to be half\n \n# actually sleeps for half of a second\n \n# bypasses bpm scaling and sleeps for a second\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "bt": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Beat time conversion</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">bt</span>  seconds <span class=\"info\">(number)</span></pre></code></p>\n<p>Beat time representation. Scales the time to the current BPM. Useful for adding bpm scaling</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120 \n  puts bt(1)\n  use_bpm 60  \n  puts bt(1)\n  use_bpm 30  \n  puts bt(1)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the BPM to be double the default\n# 0.5\n# BPM is now default\n# 1\n# BPM is now half the default\n# 2\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "set_sched_ahead_time!": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set sched ahead time globally</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">set_sched_ahead_time!</span>  time <span class=\"info\">(number)</span></pre></code></p>\n<p>Specify how many seconds ahead of time the synths should be triggered. This represents the amount of time between pressing ‘Run’ and hearing audio. A larger time gives the system more room to work with and can reduce performance issues in playing fast sections on slower platforms. However, a larger time also increases latency between modifying code and hearing the result whilst live coding.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_sched_ahead_time! 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Code will now run approximately 1 second ahead of audio.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_sched_ahead_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set sched ahead time for the current thread</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_sched_ahead_time</span>  time <span class=\"info\">(number)</span></pre></code></p>\n<p>Specify how many seconds ahead of time the synths should be triggered. This represents the amount of time between pressing ‘Run’ and hearing audio. A larger time gives the system more room to work with and can reduce performance issues in playing fast sections on slower platforms. However, a larger time also increases latency between modifying code and hearing the result whilst live coding.</p>\n\n<p>See <code>set_sched_ahead_time!</code> for a global version of this function. Note, <code>use_sched_ahead_time</code> will override any value set with <code>set_sched_ahead_time!</code> for the current thread.</p>\n\n<p>See <code>use_real_time</code> for a simple way of setting the schedule ahead time to 0.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_sched_ahead_time 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Code will now run approximately 1 second ahead of audio.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nlive_loop :foo do\n  use_sched_ahead_time 1\n  play 70                \n  sleep 1\nend\n\nlive_loop :foo do\n  use_sched_ahead_time 0.5\n  play 82\n  sleep 1\nend\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Each thread can have its own sched ahead time\n \n \n# Note 70 will be played with 1 second latency\n \n \n \n \n# Note 70 will be played with 0.5 second latency\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "use_real_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Set sched ahead time to 0 for the current thread</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">use_real_time</span>   <span class=\"info\">()</span></pre></code></p>\n\n<p>Set sched ahead time to 0 for the current thread. Shorthand for <code>use_sched_ahead_time 0</code>.</p>\n\n<p>See <code>use_sched_ahead_time</code> for a version of this function which allows you to set the schedule ahead time to any arbitrary value. Note, <code>use_real_time</code> will override any value set with <code>set_sched_ahead_time!</code> for the current thread.</p>\n\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_real_time 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Code will now run approximately 1 second ahead of audio.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_real_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sets sched ahead time to 0 within the block for the current thread</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_real_time</span>   <span class=\"info\">()</span></pre></code></p>\n\n<p>Sets sched ahead time to 0 within the block for the current thread. Shorthand for <code>with_sched_ahead_time 0</code>.</p>\n\n<p>See <code>with_sched_ahead_time</code> for a version of this function which allows you to set the schedule ahead time to any arbitrary value. Note, <code>with_real_time</code> will override any value set with <code>set_sched_ahead_time!</code> for the current thread.</p>\n\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_real_time 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Code will now run approximately 1 second ahead of audio.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "with_sched_ahead_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Block-level set sched ahead time for the current thread</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">with_sched_ahead_time</span>  time <span class=\"info\">(number)</span></pre></code></p>\n<p>Specify how many seconds ahead of time the synths should be triggered for the block. See <code>use_sched_ahead_time</code> for further information.</p>\n\n<p>See <code>set_sched_ahead_time!</code> for a global version of this function. Note, <code>with_sched_ahead_time</code> will override any value set with <code>set_sched_ahead_time!</code> for the given block within the current thread.</p>\n\n<p>See <code>with_real_time</code> for a simple way of setting the schedule ahead time to 0.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nwith_sched_ahead_time 1 do\n  play 70 \nend\n\nplay 70 \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Sound will happen with a latency of 1\n \n \n# Sound will happen with the default latency (0.5s)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "current_sched_ahead_time": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Get current sched ahead time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">current_sched_ahead_time</span>  </pre></code></p>\n<p>Returns the current schedule ahead time.</p>\n\n<p>This can be set via the fn <code>set_sched_ahead_time!</code>.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nset_sched_ahead_time! 0.5\nputs current_sched_ahead_time\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# Prints 0.5\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sleep": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Wait for beat duration</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sleep</span>  beats <span class=\"info\">(number)</span></pre></code></p>\n<p>Wait for a number of beats before triggering the next command. Beats are converted to seconds by scaling to the current bpm setting.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n\n  play 50 \n  play 55\n  play 62\n\n  sleep 1 \n\n  play 50 \n  sleep 0.5\n  play 55\n  sleep 0.5\n  play 62\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Without calls to sleep, all sounds would happen at once:\n \n# This is actually a chord with all notes played simultaneously\n \n \n \n# Create a gap, to allow a moment&#39;s pause for reflection...\n \n# Let&#39;s try the chord again, but this time with sleeps:\n# With the sleeps, we turn a chord into an arpeggio\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n\n  use_bpm 120\n  play 50\n  sleep 1\n  play 55\n  sleep 1\n  play 62\n\n \n\n  use_bpm 30\n  play 50\n  sleep 1\n  play 55\n  sleep 1\n  play 62\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# The amount of time sleep pauses for is scaled to match the current bpm. The default bpm is 60. Let&#39;s double it:\n \n \n \n# This actually sleeps for 0.5 seconds as we&#39;re now at double speed\n \n \n \n \n# Let&#39;s go down to half speed:\n \n \n \n# This now sleeps for 2 seconds as we&#39;re now at half speed.\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "wait": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Wait for duration</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">wait</span>  beats <span class=\"info\">(number)</span></pre></code></p>\n<p>Synonym for <code>sleep</code> - see <code>sleep</code></p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n</body>\n",
      "sync_bpm": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sync and inherit BPM from other threads </h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sync_bpm</span>  cue_id <span class=\"info\">(symbol)</span></pre></code></p>\n<p>An alias for <code>sync</code> with the <code>bpm_sync:</code> opt set to true.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nSee examples for sync\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "sync": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Sync with other threads</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">sync</span>  cue_id <span class=\"info\">(symbol)</span></pre></code></p>\n<p>Pause/block the current thread until a <code>cue</code> heartbeat with a matching <code>cue_id</code> is received. When a matching <code>cue</code> message is received, unblock the current thread, and continue execution with the virtual time set to match the thread that sent the <code>cue</code> heartbeat. The current thread is therefore synced to the <code>cue</code> thread. If multiple cue ids are passed as arguments, it will <code>sync</code> on the first matching <code>cue_id</code>. The BPM of the cueing thread can optionally be inherited by using the bpm_sync: opt.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">bpm_sync:</td>\n <td class=\"even\">\n<p>Inherit the BPM of the cueing thread. Default is false</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nin_thread do\n    sync :foo\n    sample :ambi_lunar_land\n  end\n\n  sleep 5\n\n  cue :foo\n           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n# this parks the current thread waiting for a foo sync message to be received.\n \n \n \n \n \n# We send a sync message from the main thread.\n# This then unblocks the thread above and we then hear the sample\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do  \n    loop do     \n      cue :tick\n      sleep 0.5 \n    end\n  end\n\n \n  loop do                   \n    sync :tick              \n    sample :drum_heavy_kick \n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Start a metronome thread\n# Loop forever:\n# sending tick heartbeat messages\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome.\n# In the main thread, just loop\n# waiting for :tick sync messages\n# after which play the drum kick sample\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nsync :foo, :bar\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Wait for either a :foo or :bar cue\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread do  \n    loop do     \n      cue [:foo, :bar, :baz].choose\n      sleep 0.5 \n    end\n  end\n\n \n\n  in_thread do\n    loop do                   \n      sync :foo              \n      sample :elec_beep \n    end\n  end\n\n  in_thread do\n    loop do                   \n      sync :bar              \n      sample :elec_flip \n    end\n  end\n\n  in_thread do\n    loop do                   \n      sync :baz              \n      sample :elec_blup \n    end\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Start a metronome thread\n# Loop forever:\n# sending one of three tick heartbeat messages randomly\n# and sleeping for 0.5 beats between ticks\n \n \n \n# We can now play sounds using the metronome:\n \n \n# In the main thread, just loop\n# waiting for :foo sync messages\n# after which play the elec beep sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :bar sync messages\n# after which play the elec flip sample\n \n \n \n \n# In the main thread, just loop\n# waiting for :baz sync messages\n# after which play the elec blup sample\n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "in_thread": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Run code block at the same time</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">in_thread</span>  </pre></code></p>\n<p>Execute a given block (between <code>do</code> … <code>end</code>) in a new thread. Use for playing multiple ‘parts’ at once. Each new thread created inherits all the use/with defaults of the parent thread such as the time, current synth, bpm, default synth args, etc. Despite inheriting defaults from the parent thread, any modifications of the defaults in the new thread will <em>not</em> affect the parent thread. Threads may be named with the <code>name:</code> optional arg. Named threads will print their name in the logging pane when they print their activity. If you attempt to create a new named thread with a name that is already in use by another executing thread, no new thread will be created.</p>\n\n<p>It is possible to delay the initial trigger of the thread on creation with both the <code>delay:</code> and <code>sync:</code> opts. See their respective docstrings. If both <code>delay:</code> and <code>sync:</code> are specified, on initial thread creation first the delay will be honoured and then the sync.</p>\n\n<p class=\"introduced\">Introduced in v2.0</p>\n\n<h2>Options</h2><p><table class=\"details\">\n<tr> <td class=\"even key\">name:</td>\n <td class=\"even\">\n<p>Make this thread a named thread with name. If a thread with this name already exists, a new thread will not be created.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">delay:</td>\n <td class=\"odd\">\n<p>Initial delay in beats before the thread starts. Default is 0.</p>\n\n </td>\n</tr>\n<tr> <td class=\"even key\">sync:</td>\n <td class=\"even\">\n<p>Initial sync symbol. Will sync with this symbol before the thread starts.</p>\n\n </td>\n</tr>\n<tr> <td class=\"odd key\">sync_bpm:</td>\n <td class=\"odd\">\n<p>Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol.</p>\n\n </td>\n</tr>\n</table></p><h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nloop do     \n    play 50   \n    sleep 1   \n  end\n\n  loop do     \n    play 55\n    sleep 0.5\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# If you write two loops one after another like this,\n# then only the first loop will execute as the loop acts\n# like a trap not letting the flow of control out\n \n \n# This code is never executed.\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n \n \n\n \n \n \n \n\n  in_thread do\n   \n    loop do\n     \n      play 50\n      sleep 1\n    end\n  end\n\n \n\n  loop do     \n    play 55\n    sleep 0.5\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# In order to play two loops at the same time, the first loops need to\n# be in a thread (note that it&#39;s probably more idiomatic to use live_loop\n# when performing):\n \n# By wrapping our loop in an in_thread block, we split the\n# control flow into two parts. One flows into the loop (a) and\n# the other part flows immediately after the in_thread block (b).\n# both parts of the control flow execute at exactly the same time.\n \n \n# (a)\n \n# (a)\n \n \n \n \n \n# (b)\n \n# This loop is executed thanks to the thread above\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nuse_bpm 120 \n  use_synth :dsaw \n\n  in_thread do    \n    play 50       \n    use_synth :fm \n    sleep 1       \n    play 38       \n  end\n\n  play 62         \n  sleep 2         \n  play 67         \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Set the bpm to be double rate\n# Set the current synth to be :dsaw\n \n# Create a new thread\n# Play note 50 at time 0\n# Switch to fm synth (only affects this thread)\n# sleep for 0.5 seconds (as we&#39;re double rate)\n# Play note 38 at time 0.5\n \n \n# Play note 62 at time 0 (with dsaw synth)\n# sleep 1s\n# Play note 67 at time 1s (also with dsaw synth)\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nin_thread(name: :foo) do\n    loop do\n      sample :drum_bass_hard\n      sleep 1\n    end\n  end\n\n  in_thread(name: :foo) do\n    loop do               \n      sample :elec_chime  \n      sleep 0.5\n    end\n  end\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Here we&#39;ve created a named thread\n \n \n \n \n \n \n# This thread isn&#39;t created as the name is\n# the same as the previous thread which is\n# still executing.\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 5</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\n  define :foo do \n    play 50      \n    sleep 1      \n  end\n\n  in_thread(name: :main) do \n    loop do                 \n      foo                   \n    end\n  end\n\n \n \n \n \n \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Named threads work well with functions for live coding:\n# Create a function foo\n# which does something simple\n# and sleeps for some time\n \n \n# Create a named thread\n# which loops forever\n# calling our function\n \n \n \n# We are now free to modify the contents of :foo and re-run the entire buffer.\n# We&#39;ll hear the effect immediately without having to stop and re-start the code.\n# This is because our fn has been redefined, (which our thread will pick up) and\n# due to the thread being named, the second re-run will not create a new similarly\n# named thread. This is a nice pattern for live coding and is the basis of live_loop.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 6</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\n  in_thread delay: 1 do\n    sample :ambi_lunar_land\n  end\n\n  play 80                  \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n#Delaying the start of a thread\n \n# this sample is not triggered at time 0 but after 1 beat\n \n \n# Note 80 is played at time 0\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert_error": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure block throws an error</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert_error</span>  class <span class=\"info\">(Exception)</span></pre></code></p>\n<p>Runs the block and ensures that it raises the correct Exception. Useful for asserting that an Exception will be raised. You may specify the particular Exception class, which defaults to <code>Exception</code>.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nassert_error do\n  play 70\nend                        \n                           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# Will throw an exception: &quot;Assert error failed!&quot; as the block\n# contains no errors.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nassert_error do\n  1 / 0\nend                        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# Will not throw an exception as the block contains an error.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nassert_error ZeroDivisionError do\n  1 / 0\nend                        \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n \n \n# Will not throw an exception as the block contains a ZeroDivisionError.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 4</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\nassert_error ThreadError do\n  1 / 0\nend                        \n                           \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n \n \n# Will throw an exception as the block contains a ZeroDivisionError rather than\n# a ThreadError.\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert_not": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure arg is not valid</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert_not</span>  arg <span class=\"info\">(anything)</span></pre></code></p>\n<p>Raises an exception if the argument is not either nil or false.</p>\n\n<p class=\"introduced\">Introduced in v3.3</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert_not false  \nassert_not nil    \nassert_not 1 == 5 \nassert true \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple assertions\n# As false is either nil or false, this assertion passes\n# As nil is either nil or false, this assertion passes\n# These numbers are not equal\n# This will raise an exception\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nassert_not true , &quot;oops&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Communicating error messages\n# This will raise an exception containing the message &quot;oops&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure arg is valid</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert</span>  arg <span class=\"info\">(anything)</span></pre></code></p>\n<p>Raises an exception if the argument is either nil or false.</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert true  \nassert 1     \nassert &quot;foo&quot;\nassert false \n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple assertions\n# As true is neither nil or false, this assertion passes\n# Similarly, 1 passes\n# As do string\n# This will raise an exception\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nassert false, &quot;oops&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Communicating error messages\n# This will raise an exception containing the message &quot;oops&quot;\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert (1 + 1) == 2\nassert [:a, :b, :c].size == 3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# More interesting assertions\n# Ensure that arithmetic is sane!\n# ensure lists can be correctly counted\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert_not_equal": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure args are not equal</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert_not_equal</span>  arg1 <span class=\"info\">(anything)</span>, arg2 <span class=\"info\">(anything)</span></pre></code></p>\n<p>Raises an exception if both arguments are qual.</p>\n\n<p class=\"introduced\">Introduced in v3.3</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert_not_equal 1, 3\nassert_not_equal 1, -1\nassert_not_equal 1, :foo\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple assertions\n \n \n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nassert_not_equal 3, 3, &quot;something is seriously wrong!&quot;\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Add messages to the exceptions\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert_equal": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure args are equal</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert_equal</span>  arg1 <span class=\"info\">(anything)</span>, arg2 <span class=\"info\">(anything)</span></pre></code></p>\n<p>Raises an exception if both arguments aren’t equal.</p>\n\n<p class=\"introduced\">Introduced in v2.8</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert_equal 1, 1\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple assertions\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nassert_equal 1 + 1, 2\nassert_equal [:a, :b, :c].size,  3\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# More interesting assertions\n# Ensure that arithmetic is sane!\n# ensure lists can be correctly counted\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 3</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert_equal 3, 5, &quot;something is seriously wrong!&quot;\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Add messages to the exceptions\n \n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "assert_similar": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Ensure args are similar</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">assert_similar</span>  arg1 <span class=\"info\">(anything)</span>, arg2 <span class=\"info\">(anything)</span></pre></code></p>\n<p>Raises an exception if both arguments aren’t similar.</p>\n\n<p>Currently similarity is only defined for numbers - all other types are compared for equality with assert_equal.</p>\n\n<p>Useful for testing in cases where floating point imprecision stops you from being able to use <code>assert_equal</code>.</p>\n\n<p class=\"introduced\">Introduced in v3.0</p>\n\n<h2>Examples</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\n\nassert_similar 1, 1\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# Simple assertions\n#=&gt; True\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n <tr>\n  <td colspan=\"2\" class=\"odd head\"># Example 2</td>\n </tr><tr>\n  <td class=\"odd\">\n   <p><code><pre>\n\nassert_similar(4.9999999999, 5.0)\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"odd\">\n   <p><code><pre>\n# Handles floating point imprecision\n#=&gt; True\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "load_buffer": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Load the contents of a file to the current buffer</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">load_buffer</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Given a path to a file, will read the contents and load it into the current buffer. This will replace any previous content.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_buffer &quot;~/sonic-pi-tracks/phat-beats.rb&quot;\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# will replace content of current buffer with contents of the file\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n",
      "load_example": "<meta http-equiv=\"Content-Type\" content=\"text/html; charset=utf-8\"/>\n\n<body class=\"manual\">\n<h1>Load a built-in example</h1>\n<p class=\"usage\"><code><pre><span class=\"symbol\">load_example</span>  path <span class=\"info\">(string)</span></pre></code></p>\n<p>Given a keyword representing an example, will load it into the current buffer. This will replace any previous content.</p>\n\n<p class=\"introduced\">Introduced in v2.10</p>\n\n<h2>Example</h2>\n<p><table class=\"examples\">\n <tr>\n  <td colspan=\"2\" class=\"even head\"># Example 1</td>\n </tr><tr>\n  <td class=\"even\">\n   <p><code><pre>\nload_example :rerezzed\n\n\n\n</pre></code></p>\n  </td>\n  <td class=\"even\">\n   <p><code><pre>\n# will replace content of current buffer with the rerezzed example\n\n\n\n</pre></code></p>\n  </td>\n </tr>\n</table></p>\n</body>\n"
    }
  },
  "autocomplete": {
    "synths": {
      "dull_bell": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve"
      ],
      "pretty_bell": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve"
      ],
      "beep": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve"
      ],
      "sine": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve"
      ],
      "saw": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "pulse": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve"
      ],
      "subpulse": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve",
        "sub_amp",
        "sub_amp_slide",
        "sub_amp_slide_shape",
        "sub_amp_slide_curve",
        "sub_detune",
        "sub_detune_slide",
        "sub_detune_slide_shape",
        "sub_detune_slide_curve"
      ],
      "square": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "tri": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve"
      ],
      "dsaw": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "detune",
        "detune_slide",
        "detune_slide_shape",
        "detune_slide_curve"
      ],
      "dpulse": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "detune",
        "detune_slide",
        "detune_slide_shape",
        "detune_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve",
        "dpulse_width",
        "dpulse_width_slide",
        "dpulse_width_slide_shape",
        "dpulse_width_slide_curve"
      ],
      "dtri": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "detune",
        "detune_slide",
        "detune_slide_shape",
        "detune_slide_curve"
      ],
      "fm": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "divisor",
        "divisor_slide",
        "divisor_slide_shape",
        "divisor_slide_curve",
        "depth",
        "depth_slide",
        "depth_slide_shape",
        "depth_slide_curve"
      ],
      "mod_fm": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "divisor",
        "divisor_slide",
        "divisor_slide_shape",
        "divisor_slide_curve",
        "depth",
        "depth_slide",
        "depth_slide_shape",
        "depth_slide_curve",
        "mod_phase",
        "mod_range",
        "mod_pulse_width",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave"
      ],
      "mod_saw": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave"
      ],
      "mod_dsaw": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave",
        "detune",
        "detune_slide",
        "detune_slide_shape",
        "detune_slide_curve"
      ],
      "mod_sine": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave"
      ],
      "mod_beep": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave"
      ],
      "mod_tri": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave"
      ],
      "mod_pulse": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "mod_phase",
        "mod_phase_slide",
        "mod_phase_slide_shape",
        "mod_phase_slide_curve",
        "mod_range",
        "mod_range_slide",
        "mod_range_slide_shape",
        "mod_range_slide_curve",
        "mod_pulse_width",
        "mod_pulse_width_slide",
        "mod_pulse_width_slide_shape",
        "mod_pulse_width_slide_curve",
        "mod_phase_offset",
        "mod_invert_wave",
        "mod_wave",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve"
      ],
      "chiplead": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "note_resolution",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "width"
      ],
      "chipbass": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "note_resolution",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve"
      ],
      "tb303": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "cutoff_min",
        "cutoff_min_slide",
        "cutoff_min_slide_shape",
        "cutoff_min_slide_curve",
        "cutoff_attack",
        "cutoff_decay",
        "cutoff_sustain",
        "cutoff_release",
        "cutoff_attack_level",
        "cutoff_decay_level",
        "cutoff_sustain_level",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "wave",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve"
      ],
      "supersaw": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "hoover": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "prophet": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "zawa": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "range",
        "range_slide",
        "range_slide_shape",
        "range_slide_curve",
        "disable_wave",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve"
      ],
      "dark_ambience": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "detune1",
        "detune1_slide",
        "detune1_slide_shape",
        "detune1_slide_curve",
        "detune2",
        "detune2_slide",
        "detune2_slide_shape",
        "detune2_slide_curve",
        "noise",
        "ring",
        "room",
        "reverb_time"
      ],
      "growl": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "hollow": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "noise",
        "norm"
      ],
      "blade": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "vibrato_rate",
        "vibrato_rate_slide_shape",
        "vibrato_rate_slide_curve",
        "vibrato_depth",
        "vibrato_depth_slide_shape",
        "vibrato_depth_slide_curve",
        "vibrato_delay",
        "vibrato_onset"
      ],
      "piano": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "vel",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "hard",
        "stereo_width"
      ],
      "rodeo": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "use_chorus",
        "use_compressor",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "kalimba": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "clickiness"
      ],
      "pluck": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "sustain",
        "release",
        "attack_level",
        "decay",
        "decay_level",
        "sustain_level",
        "noise_amp",
        "max_delay_time",
        "pluck_decay",
        "coef"
      ],
      "tech_saws": [
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "sound_in": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "input"
      ],
      "sound_in_stereo": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "input"
      ],
      "noise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "pnoise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "bnoise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "gnoise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "cnoise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "chipnoise": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve",
        "attack",
        "decay",
        "sustain",
        "release",
        "attack_level",
        "decay_level",
        "sustain_level",
        "env_curve",
        "freq_band",
        "freq_band_slide",
        "freq_band_slide_shape",
        "freq_band_slide_curve"
      ]
    },
    "fx": {
      "bitcrusher": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "sample_rate",
        "sample_rate_slide",
        "sample_rate_slide_shape",
        "sample_rate_slide_curve",
        "bits",
        "bits_slide",
        "bits_slide_shape",
        "bits_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "krush": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "gain",
        "gain_slide",
        "gain_slide_shape",
        "gain_slide__curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "reverb": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "room",
        "room_slide",
        "room_slide_shape",
        "room_slide_curve",
        "damp",
        "damp_slide",
        "damp_slide_shape",
        "damp_slide_curve"
      ],
      "gverb": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "spread",
        "spread_slide",
        "spread_slide_shape",
        "spread_slide_curve",
        "damp",
        "damp_slide",
        "damp_slide_shape",
        "damp_slide_curve",
        "pre_damp",
        "pre_damp_slide",
        "pre_damp_slide_shape",
        "pre_damp_slide_curve",
        "dry",
        "dry_slide",
        "dry_slide_shape",
        "dry_slide_curve",
        "room",
        "release",
        "ref_level",
        "tail_level"
      ],
      "level": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve"
      ],
      "mono": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve"
      ],
      "autotuner": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "note",
        "note_slide",
        "note_slide_shape",
        "note_slide_curve",
        "formant_ratio",
        "formant_ratio_slide",
        "formant_ratio_slide_shape",
        "formant_ratio_slide_curve"
      ],
      "echo": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "decay",
        "decay_slide",
        "decay_slide_shape",
        "decay_slide_curve",
        "max_phase"
      ],
      "slicer": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "amp_min",
        "amp_min_slide",
        "amp_min_slide_shape",
        "amp_min_slide_curve",
        "amp_max",
        "amp_max_slide",
        "amp_max_slide_shape",
        "amp_max_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "probability",
        "probability_slide",
        "probability_slide_shape",
        "probability_slide_curve",
        "prob_pos",
        "prob_pos_slide",
        "prob_pos_slide_shape",
        "prob_pos_slide_curve",
        "seed",
        "smooth",
        "smooth_slide",
        "smooth_slide_shape",
        "smooth_slide_curve",
        "smooth_up",
        "smooth_up_slide",
        "smooth_up_slide_shape",
        "smooth_up_slide_curve",
        "smooth_down",
        "smooth_down_slide",
        "smooth_down_slide_shape",
        "smooth_down_slide_curve"
      ],
      "panslicer": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "amp_min",
        "amp_min_slide",
        "amp_min_slide_shape",
        "amp_min_slide_curve",
        "amp_max",
        "amp_max_slide",
        "amp_max_slide_shape",
        "amp_max_slide_curve",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "probability",
        "probability_slide",
        "probability_slide_shape",
        "probability_slide_curve",
        "prob_pos",
        "prob_pos_slide",
        "prob_pos_slide_shape",
        "prob_pos_slide_curve",
        "seed",
        "smooth",
        "smooth_slide",
        "smooth_slide_shape",
        "smooth_slide_curve",
        "smooth_up",
        "smooth_up_slide",
        "smooth_up_slide_shape",
        "smooth_up_slide_curve",
        "smooth_down",
        "smooth_down_slide",
        "smooth_down_slide_shape",
        "smooth_down_slide_curve",
        "pan_min",
        "pan_min_slide",
        "pan_min_slide_shape",
        "pan_min_slide_curve",
        "pan_max",
        "pan_max_slide",
        "pan_max_slide_shape",
        "pan_max_slide_curve"
      ],
      "wobble": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "cutoff_min",
        "cutoff_min_slide",
        "cutoff_min_slide_shape",
        "cutoff_min_slide_curve",
        "cutoff_max",
        "cutoff_max_slide",
        "cutoff_max_slide_shape",
        "cutoff_max_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "pulse_width",
        "pulse_width_slide",
        "pulse_width_slide_shape",
        "pulse_width_slide_curve",
        "filter",
        "probability",
        "probability_slide",
        "probability_slide_shape",
        "probability_slide_curve",
        "prob_pos",
        "prob_pos_slide",
        "prob_pos_slide_shape",
        "prob_pos_slide_curve",
        "seed",
        "smooth",
        "smooth_slide",
        "smooth_slide_shape",
        "smooth_slide_curve",
        "smooth_up",
        "smooth_up_slide",
        "smooth_up_slide_shape",
        "smooth_up_slide_curve",
        "smooth_down",
        "smooth_down_slide",
        "smooth_down_slide_shape",
        "smooth_down_slide_curve"
      ],
      "ixi_techno": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "phase_offset",
        "cutoff_min",
        "cutoff_min_slide",
        "cutoff_min_slide_shape",
        "cutoff_min_slide_curve",
        "cutoff_max",
        "cutoff_max_slide",
        "cutoff_max_slide_shape",
        "cutoff_max_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "compressor": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "threshold",
        "threshold_slide",
        "threshold_slide_shape",
        "threshold_slide_curve",
        "clamp_time",
        "clamp_time_slide",
        "clamp_time_slide_shape",
        "clamp_time_slide_curve",
        "slope_above",
        "slope_above_slide",
        "slope_above_slide_shape",
        "slope_above_slide_curve",
        "slope_below",
        "slope_below_slide",
        "slope_below_slide_shape",
        "slope_below_slide_curve",
        "relax_time",
        "relax_time_slide",
        "relax_time_slide_shape",
        "relax_time_slide_curve"
      ],
      "whammy": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "transpose",
        "transpose_slide",
        "transpose_slide_shape",
        "transpose_slide_curve",
        "max_delay_time",
        "deltime",
        "grainsize"
      ],
      "rlpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "nrlpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "rhpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "nrhpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "hpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "nhpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "lpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "nlpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "cutoff",
        "cutoff_slide",
        "cutoff_slide_shape",
        "cutoff_slide_curve"
      ],
      "normaliser": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "level",
        "level_slide",
        "level_slide_shape",
        "level_slide_curve"
      ],
      "distortion": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "distort",
        "distort_slide",
        "distort_slide_shape",
        "distort_slide_curve"
      ],
      "pan": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "pan",
        "pan_slide",
        "pan_slide_shape",
        "pan_slide_curve"
      ],
      "bpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "centre",
        "centre_slide",
        "centre_slide_shape",
        "centre_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "nbpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "centre",
        "centre_slide",
        "centre_slide_shape",
        "centre_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "rbpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "centre",
        "centre_slide",
        "centre_slide_shape",
        "centre_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "nrbpf": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "centre",
        "centre_slide",
        "centre_slide_shape",
        "centre_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve"
      ],
      "band_eq": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "freq",
        "freq_slide",
        "freq_slide_shape",
        "freq_slide_curve",
        "res",
        "res_slide",
        "res_slide_shape",
        "res_slide_curve",
        "db",
        "db_slide",
        "db_slide_shape",
        "db_slide_curve"
      ],
      "tanh": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "krunch",
        "krunch_slide",
        "krunch_slide_shape",
        "krunch_slide_curve"
      ],
      "pitch_shift": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "window_size",
        "window_size_slide",
        "window_size_slide_shape",
        "window_size_slide_curve",
        "pitch",
        "pitch_slide",
        "pitch_slide_shape",
        "pitch_slide_curve",
        "pitch_dis",
        "pitch_dis_slide",
        "pitch_dis_slide_shape",
        "pitch_dis_slide_curve",
        "time_dis",
        "time_dis_slide",
        "time_dis_slide_shape",
        "time_dis_slide_curve"
      ],
      "ring_mod": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "freq",
        "freq_slide",
        "freq_slide_shape",
        "freq_slide_curve",
        "mod_amp",
        "mod_amp_slide",
        "mod_amp_slide_shape",
        "mod_amp_slide_curve"
      ],
      "octaver": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "super_amp",
        "super_amp_slide",
        "super_amp_slide_shape",
        "super_amp_slide_curve",
        "sub_amp",
        "sub_amp_slide",
        "sub_amp_slide_shape",
        "sub_amp_slide_curve",
        "subsub_amp",
        "subsub_amp_slide",
        "subsub_amp_slide_shape",
        "subsub_amp_slide_curve"
      ],
      "vowel": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "vowel_sound",
        "voice"
      ],
      "flanger": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "stereo_invert_wave",
        "delay",
        "delay_slide",
        "delay_slide_shape",
        "delay_slide_curve",
        "max_delay",
        "depth",
        "depth_slide",
        "depth_slide_shape",
        "depth_slide_curve",
        "decay",
        "decay_slide",
        "decay_slide_shape",
        "decay_slide_curve",
        "feedback",
        "feedback_slide",
        "feedback_slide_shape",
        "feedback_slide_curve",
        "invert_flange"
      ],
      "eq": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "low_shelf",
        "low_shelf_slide",
        "low_shelf_slide_shape",
        "low_shelf_slide_curve",
        "low_shelf_note",
        "low_shelf_note_slide",
        "low_shelf_note_slide_shape",
        "low_shelf_note_slide_curve",
        "low_shelf_slope",
        "low_shelf_slope_slide",
        "low_shelf_slope_slide_shape",
        "low_shelf_slope_slide_curve",
        "low",
        "low_slide",
        "low_slide_shape",
        "low_slide_curve",
        "low_note",
        "low_note_slide",
        "low_note_slide_shape",
        "low_note_slide_curve",
        "low_q",
        "low_q_slide",
        "low_q_slide_shape",
        "low_q_slide_curve",
        "mid",
        "mid_slide",
        "mid_slide_shape",
        "mid_slide_curve",
        "mid_note",
        "mid_note_slide",
        "mid_note_slide_shape",
        "mid_note_slide_curve",
        "mid_q",
        "mid_q_slide",
        "mid_q_slide_shape",
        "mid_q_slide_curve",
        "high",
        "high_slide",
        "high_slide_shape",
        "high_slide_curve",
        "high_note",
        "high_note_slide",
        "high_note_slide_shape",
        "high_note_slide_curve",
        "high_q",
        "high_q_slide",
        "high_q_slide_shape",
        "high_q_slide_curve",
        "high_shelf",
        "high_shelf_slide",
        "high_shelf_slide_shape",
        "high_shelf_slide_curve",
        "high_shelf_note",
        "high_shelf_note_slide",
        "high_shelf_note_slide_shape",
        "high_shelf_note_slide_curve",
        "high_shelf_slope",
        "high_shelf_slope_slide",
        "high_shelf_slope_slide_shape",
        "high_shelf_slope_slide_curve"
      ],
      "tremolo": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "phase_offset",
        "wave",
        "invert_wave",
        "depth",
        "depth_slide",
        "depth_slide_shape",
        "depth_slide_curve"
      ],
      "record": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "buffer"
      ],
      "sound_out": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "output",
        "mode"
      ],
      "sound_out_stereo": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "output",
        "mode"
      ],
      "ping_pong": [
        "amp",
        "amp_slide",
        "amp_slide_shape",
        "amp_slide_curve",
        "mix",
        "mix_slide",
        "mix_slide_shape",
        "mix_slide_curve",
        "pre_mix",
        "pre_mix_slide",
        "pre_mix_slide_shape",
        "pre_mix_slide_curve",
        "pre_amp",
        "pre_amp_slide",
        "pre_amp_slide_shape",
        "pre_amp_slide_curve",
        "phase",
        "phase_slide",
        "phase_slide_shape",
        "phase_slide_curve",
        "feedback",
        "feedback_slide",
        "feedback_slide_shape",
        "feedback_slide_curve",
        "max_phase",
        "pan_start"
      ]
    },
    "samples": [
      "drum_heavy_kick",
      "drum_tom_mid_soft",
      "drum_tom_mid_hard",
      "drum_tom_lo_soft",
      "drum_tom_lo_hard",
      "drum_tom_hi_soft",
      "drum_tom_hi_hard",
      "drum_splash_soft",
      "drum_splash_hard",
      "drum_snare_soft",
      "drum_snare_hard",
      "drum_cymbal_soft",
      "drum_cymbal_hard",
      "drum_cymbal_open",
      "drum_cymbal_closed",
      "drum_cymbal_pedal",
      "drum_bass_soft",
      "drum_bass_hard",
      "drum_cowbell",
      "drum_roll",
      "elec_triangle",
      "elec_snare",
      "elec_lo_snare",
      "elec_hi_snare",
      "elec_mid_snare",
      "elec_cymbal",
      "elec_soft_kick",
      "elec_filt_snare",
      "elec_fuzz_tom",
      "elec_chime",
      "elec_bong",
      "elec_twang",
      "elec_wood",
      "elec_pop",
      "elec_beep",
      "elec_blip",
      "elec_blip2",
      "elec_ping",
      "elec_bell",
      "elec_flip",
      "elec_tick",
      "elec_hollow_kick",
      "elec_twip",
      "elec_plip",
      "elec_blup",
      "guit_harmonics",
      "guit_e_fifths",
      "guit_e_slide",
      "guit_em9",
      "misc_burp",
      "misc_crow",
      "misc_cineboom",
      "perc_bell",
      "perc_bell2",
      "perc_snap",
      "perc_snap2",
      "perc_swash",
      "perc_till",
      "perc_door",
      "perc_impact1",
      "perc_impact2",
      "perc_swoosh",
      "ambi_soft_buzz",
      "ambi_swoosh",
      "ambi_drone",
      "ambi_glass_hum",
      "ambi_glass_rub",
      "ambi_haunted_hum",
      "ambi_piano",
      "ambi_lunar_land",
      "ambi_dark_woosh",
      "ambi_choir",
      "ambi_sauna",
      "bass_hit_c",
      "bass_hard_c",
      "bass_thick_c",
      "bass_drop_c",
      "bass_woodsy_c",
      "bass_voxy_c",
      "bass_voxy_hit_c",
      "bass_dnb_f",
      "sn_dub",
      "sn_dolf",
      "sn_zome",
      "sn_generic",
      "bd_ada",
      "bd_pure",
      "bd_808",
      "bd_zum",
      "bd_gas",
      "bd_sone",
      "bd_haus",
      "bd_zome",
      "bd_boom",
      "bd_klub",
      "bd_fat",
      "bd_tek",
      "bd_mehackit",
      "loop_industrial",
      "loop_compus",
      "loop_amen",
      "loop_amen_full",
      "loop_garzul",
      "loop_mika",
      "loop_breakbeat",
      "loop_safari",
      "loop_tabla",
      "loop_3d_printer",
      "loop_drone_g_97",
      "loop_electric",
      "loop_mehackit1",
      "loop_mehackit2",
      "loop_perc1",
      "loop_perc2",
      "loop_weirdo",
      "tabla_tas1",
      "tabla_tas2",
      "tabla_tas3",
      "tabla_ke1",
      "tabla_ke2",
      "tabla_ke3",
      "tabla_na",
      "tabla_na_o",
      "tabla_tun1",
      "tabla_tun2",
      "tabla_tun3",
      "tabla_te1",
      "tabla_te2",
      "tabla_te_ne",
      "tabla_te_m",
      "tabla_ghe1",
      "tabla_ghe2",
      "tabla_ghe3",
      "tabla_ghe4",
      "tabla_ghe5",
      "tabla_ghe6",
      "tabla_ghe7",
      "tabla_ghe8",
      "tabla_dhec",
      "tabla_na_s",
      "tabla_re",
      "glitch_bass_g",
      "glitch_perc1",
      "glitch_perc2",
      "glitch_perc3",
      "glitch_perc4",
      "glitch_perc5",
      "glitch_robot1",
      "glitch_robot2",
      "vinyl_backspin",
      "vinyl_rewind",
      "vinyl_scratch",
      "vinyl_hiss",
      "mehackit_phone1",
      "mehackit_phone2",
      "mehackit_phone3",
      "mehackit_phone4",
      "mehackit_robot1",
      "mehackit_robot2",
      "mehackit_robot3",
      "mehackit_robot4",
      "mehackit_robot5",
      "mehackit_robot6",
      "mehackit_robot7"
    ],
    "lang": [
      [
        "octs",
        {
          "arguments": [
            [
              "start",
              "note"
            ],
            [
              "num_octaves",
              "pos_int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "midi_notes",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rest?",
        {
          "arguments": [
            [
              "note_or_args",
              "number_symbol_or_map"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "pitch_to_ratio",
        {
          "arguments": [
            [
              "pitch",
              "midi_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ratio_to_pitch",
        {
          "arguments": [
            [
              "ratio",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "midi_to_hz",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "hz_to_midi",
        {
          "arguments": [
            [
              "freq",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_cent_tuning!",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_cent_tuning",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_cent_tuning",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_octave",
        {
          "arguments": [
            [
              "octave_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_octave",
        {
          "arguments": [
            [
              "octave_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "use_transpose",
        {
          "arguments": [
            [
              "note_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_transpose",
        {
          "arguments": [
            [
              "note_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_tuning",
        {
          "arguments": [
            [
              "tuning",
              "symbol"
            ],
            [
              "fundamental_note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_tuning",
        {
          "arguments": [
            [
              "tuning",
              "symbol"
            ],
            [
              "fundamental_note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "current_transpose",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_cent_tuning",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_octave",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "note",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "octave": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
          },
          "block?": "None"
        }
      ],
      [
        "note_range",
        {
          "arguments": [
            [
              "low_note",
              "note"
            ],
            [
              "high_note",
              "note"
            ]
          ],
          "options": {
            "pitches": "An array of notes (symbols or ints) to filter on. Octave information is ignored."
          },
          "block?": "None"
        }
      ],
      [
        "note_info",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "octave": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
          },
          "block?": "None"
        }
      ],
      [
        "degree",
        {
          "arguments": [
            [
              "degree",
              "symbol_or_number"
            ],
            [
              "tonic",
              "symbol"
            ],
            [
              "scale",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "scale",
        {
          "arguments": [
            [
              "tonic",
              "symbol"
            ],
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "num_octaves": "The number of octaves you'd like the scale to consist of. More octaves means a larger scale. Default is 1."
          },
          "block?": "None"
        }
      ],
      [
        "chord_degree",
        {
          "arguments": [
            [
              "degree",
              "symbol_or_number"
            ],
            [
              "tonic",
              "symbol"
            ],
            [
              "scale",
              "symbol"
            ],
            [
              "number_of_notes",
              "number"
            ]
          ],
          "options": {
            "invert": "Apply the specified num inversions to chord. See the fn `chord_invert`."
          },
          "block?": "None"
        }
      ],
      [
        "chord",
        {
          "arguments": [
            [
              "tonic",
              "symbol"
            ],
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "invert": "Apply the specified num inversions to chord. See the fn `chord_invert`.",
            "num_octaves": "Create an arpeggio of the chord over n octaves"
          },
          "block?": "None"
        }
      ],
      [
        "chord_invert",
        {
          "arguments": [
            [
              "notes",
              "list"
            ],
            [
              "shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "scale_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "chord_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "live_audio",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "input": "The audio card input to read audio from.",
            "stereo": "If set to truthy value (true, 1) will read from two consecutive audio card inputs."
          },
          "block?": "None"
        }
      ],
      [
        "scsynth_info",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_free",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "buffer",
        {
          "arguments": [
            [
              "symbol",
              "name"
            ],
            [
              "number",
              "duration"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_free_all",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_timing_guarantees",
        {
          "arguments": [
            [
              "bool",
              "true_or_false"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "with_timing_guarantees",
        {
          "arguments": [
            [
              "bool",
              "true_or_false"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "use_sample_bpm",
        {
          "arguments": [
            [
              "string_or_number",
              "sample_name_or_duration"
            ]
          ],
          "options": {
            "num_beats": "The number of beats within the sample. By default this is 1."
          },
          "block?": "None"
        }
      ],
      [
        "with_sample_bpm",
        {
          "arguments": [
            [
              "string_or_number",
              "sample_name_or_duration"
            ]
          ],
          "options": {
            "num_beats": "The number of beats within the sample. By default this is 1."
          },
          "block?": "Required"
        }
      ],
      [
        "use_arg_bpm_scaling",
        {
          "arguments": [
            [
              "bool",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_arg_bpm_scaling",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "set_audio_latency!",
        {
          "arguments": [
            [
              "milliseconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_recording_bit_depth!",
        {
          "arguments": [
            [
              "bit_depth",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_control_delta!",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_debug",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_debug",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_arg_checks",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_arg_checks",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "recording_start",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_stop",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_save",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_delete",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "reset_mixer!",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "set_mixer_control!",
        {
          "arguments": [

          ],
          "options": {
            "pre_amp": "Controls the amplitude of the signal prior to the FX stage of the mixer (prior to lpf/hpf stages). Has slide opts. Default 1.",
            "amp": "Controls the amplitude of the signal after the FX stage. Has slide opts. Default 1.",
            "hpf": "Global hpf FX. Has slide opts. Default 0.",
            "lpf": "Global lpf FX. Has slide opts. Default 135.5.",
            "hpf_bypass": "Bypass the global hpf. 0=no bypass, 1=bypass. Default 0.",
            "lpf_bypass": "Bypass the global lpf. 0=no bypass, 1=bypass. Default 0.",
            "limiter_bypass": "Bypass the final limiter. 0=no bypass, 1=bypass. Default 0.",
            "leak_dc_bypass": "Bypass the final DC leak correction FX. 0=no bypass, 1=bypass. Default 0."
          },
          "block?": "None"
        }
      ],
      [
        "synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "Optional"
        }
      ],
      [
        "play",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "Optional"
        }
      ],
      [
        "play_pattern",
        {
          "arguments": [
            [
              "notes",
              "list"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "play_pattern_timed",
        {
          "arguments": [
            [
              "notes",
              "list"
            ],
            [
              "times",
              "list_or_number"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "None"
        }
      ],
      [
        "play_chord",
        {
          "arguments": [
            [
              "notes",
              "list"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "None"
        }
      ],
      [
        "use_merged_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_merged_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "Required"
        }
      ],
      [
        "use_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "use_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "use_merged_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_merged_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "Required"
        }
      ],
      [
        "with_fx",
        {
          "arguments": [
            [
              "fx_name",
              "symbol"
            ]
          ],
          "options": {
            "reps": "Number of times to repeat the block in an iteration.",
            "kill_delay": "Amount of time to wait after all synths triggered by the block have completed before stopping and freeing the effect synthesiser."
          },
          "block?": "Required"
        }
      ],
      [
        "current_synth",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_synth_defaults",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_sample_defaults",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_volume",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_debug",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_arg_checks",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_volume!",
        {
          "arguments": [
            [
              "vol",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_loaded?",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_sample",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_samples",
        {
          "arguments": [
            [
              "paths",
              "list"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_info",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_buffer",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_duration",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": {
            "rate": "Rate modifier. For example, doubling the rate will halve the duration.",
            "start": "Start position of sample playback as a value from 0 to 1",
            "finish": "Finish position of sample playback as a value from 0 to 1",
            "attack": "Duration of the attack phase of the envelope.",
            "decay": "Duration of the decay phase of the envelope.",
            "sustain": "Duration of the sustain phase of the envelope.",
            "release": "Duration of the release phase of the envelope.",
            "beat_stretch": "Change the rate of the sample so that its new duration matches the specified number of beats.",
            "pitch_stretch": "Change the rate of the sample so that its new duration matches the specified number of beats but attempt to preserve pitch.",
            "rpitch": "Change the rate to shift the pitch up or down the specified number of MIDI notes."
          },
          "block?": "None"
        }
      ],
      [
        "sample_paths",
        {
          "arguments": [
            [
              "pre_args",
              "source_and_filter_types"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample",
        {
          "arguments": [
            [
              "name_or_path",
              "symbol_or_string"
            ]
          ],
          "options": {
            "rate": "Rate with which to play back the sample. Higher rates mean an increase in pitch and a decrease in duration. Default is 1.",
            "beat_stretch": "Stretch (or shrink) the sample to last for exactly the specified number of beats. Please note - this does *not* keep the pitch constant and is essentially the same as modifying the rate directly.",
            "pitch_stretch": "Stretch (or shrink) the sample to last for exactly the specified number of beats. This attempts to keep the pitch constant using the `pitch:` opt. Note, it's very likely you'll need to experiment with the `window_size:`, `pitch_dis:` and `time_dis:` opts depending on the sample and the amount you'd like to stretch/shrink from original size.",
            "attack": "Time to reach full volume. Default is 0.",
            "sustain": "Time to stay at full volume. Default is to stretch to length of sample (minus attack and release times).",
            "release": "Time (from the end of the sample) to go from full amplitude to 0. Default is 0.",
            "start": "Position in sample as a fraction between 0 and 1 to start playback. Default is 0.",
            "finish": "Position in sample as a fraction between 0 and 1 to end playback. Default is 1.",
            "pan": "Stereo position of audio. -1 is left ear only, 1 is right ear only, and values in between position the sound accordingly. Default is 0.",
            "amp": "Amplitude of playback.",
            "pre_amp": "Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.",
            "onset": "Analyse the sample with an onset detection algorithm and automatically set or override the `start:` and `finish:` opts to play the nth onset only. Allows you to treat a rhythm sample as a palette of individual drum/synth hits. If `start:` or `finish:` opts are used in addition to `onset:` then they will work within the onset rather than the whole sample. Floats are rounded to the nearest whole number.",
            "on": "If specified and false/nil/0 will stop the sample from being played. Ensures all opts are evaluated.",
            "slice": "Divides the sample duration evenly into `num_slices:` sections (defaults to 16) and set the `start:` and `finish:` opts to play the nth slice only. If `start:` or `finish:` opts are used in addition to `slice:` then they will work within the slice rather than the whole sample. Use the envelope opts to remove any clicks introduced if the slice boundary is in the middle of a sound. Also consider `onset:` as an alternative to `slice:`. If `onset:` is also used then the slices will be within the onset rather than the whole sample. Floats are rounded to the nearest whole number.",
            "num_slices": "Number of slices to divide the sample into when using the `slice:` opt. Defaults to 16. Floats are rounded to the nearest whole number.",
            "norm": "Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.",
            "lpf": "Cutoff value of the built-in low pass filter (lpf) in MIDI notes. Unless specified, the lpf is *not* added to the signal chain.",
            "lpf_init_level": "The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.",
            "lpf_attack_level": "The peak lpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `lpf_decay_level:` opt.",
            "lpf_decay_level": "The level of lpf cutoff after the decay phase as a MIDI note. Default value is to match the `lpf_sustain_level:` opt.",
            "lpf_sustain_level": "The sustain cutoff (value of lpf cutoff at sustain time) as a MIDI note. Default value is to match the `lpf_release_level:` opt.",
            "lpf_release_level": "The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.",
            "lpf_attack": "Attack time for lpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value.",
            "lpf_decay": "Decay time for lpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value.",
            "lpf_sustain": "Amount of time for lpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.",
            "lpf_release": "Amount of time (in beats) for sound to move from lpf cutoff sustain value to lpf cutoff min value. Default value is set to match amp envelope's release value.",
            "lpf_min": "Starting value of the lpf cutoff envelope. Default is 30.",
            "lpf_env_curve": "Select the shape of the curve between levels in the lpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.",
            "hpf": "Cutoff value of the built-in high pass filter (hpf) in MIDI notes. Unless specified, the hpf is *not* added to the signal chain.",
            "hpf_init_level": "The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130.",
            "hpf_attack_level": "The peak hpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `hpf_decay_level:` opt.",
            "hpf_decay_level": "The level of hpf cutoff after the decay phase as a MIDI note. Default value is to match the `hpf_sustain_level:` opt.",
            "hpf_sustain_level": "The sustain cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf_release_level:` opt.",
            "hpf_release_level": "The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf:` opt.",
            "hpf_attack": "Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value.",
            "hpf_decay": "Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value.",
            "hpf_sustain": "Amount of time for hpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.",
            "hpf_release": "Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.",
            "hpf_env_curve": "Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.",
            "hpf_max": "Maximum value of the high pass filter envelope. Default is 200.",
            "rpitch": "Rate modified pitch. Multiplies the rate by the appropriate ratio to shift up or down the specified amount in MIDI notes. Please note - this does *not* keep the duration and rhythmical rate constant and is essentially the same as modifying the rate directly.",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.",
            "window_size": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed. The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.",
            "pitch_dis": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the `pitch:` opt).",
            "time_dis": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.",
            "compress": "Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.",
            "threshold": "Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slope_below": "Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slope_above": "Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "clamp_time": "Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "relax_time": "Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value.",
            "path": "Path of the sample to play. Typically this opt is rarely used instead of the more powerful source/filter system. However it can be useful when working with pre-made opt maps."
          },
          "block?": "Optional"
        }
      ],
      [
        "status",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "control",
        {
          "arguments": [
            [
              "node",
              "synth_node"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "kill",
        {
          "arguments": [
            [
              "node",
              "synth_node"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "sample_names",
        {
          "arguments": [
            [
              "group",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "all_sample_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_groups",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "synth_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "fx_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_synthdefs",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set",
        {
          "arguments": [
            [
              "time_state_key",
              "default"
            ],
            [
              "value",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "cue",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
            "your_key": "Your value",
            "another_key": "Another value",
            "key": "All these opts are passed through to the thread which syncs"
          },
          "block?": "None"
        }
      ],
      [
        "get",
        {
          "arguments": [
            [
              "time_state_key",
              "default"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_swing",
        {
          "arguments": [
            [
              "shift",
              "beats"
            ],
            [
              "pulse",
              "number"
            ],
            [
              "tick",
              "symbol"
            ]
          ],
          "options": {
            "shift": "How much time to delay/forward the block. Greater values produce more emphasised swing. Defaults to 0.1 beats.",
            "pulse": "How often to apply the swing. Defaults to 4.",
            "tick": "A key for the tick with which to count pulses. Override this if you have more than one `with_swing` block in your `live_loop` or thread to stop them interfering with each other.",
            "offset": "Count offset - before modding the count with the pulse size - integer offset to add to the result of calling `tick` with the specified tick key (via the `tick:` opt)"
          },
          "block?": "None"
        }
      ],
      [
        "run_file",
        {
          "arguments": [
            [
              "filename",
              "path"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "run_code",
        {
          "arguments": [
            [
              "code",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "eval_file",
        {
          "arguments": [
            [
              "filename",
              "path"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_osc_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_osc_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_osc",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_osc",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "osc_send",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ],
            [
              "path",
              "osc_path"
            ],
            [
              "args",
              "list"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "osc",
        {
          "arguments": [
            [
              "path",
              "arguments"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "reset",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "clear",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "time_warp",
        {
          "arguments": [
            [
              "delta_time",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "tick_set",
        {
          "arguments": [
            [
              "value",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick_reset",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick_reset_all",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick",
        {
          "arguments": [
            [
              "key",
              "symbol"
            ]
          ],
          "options": {
            "step": "The amount to tick up by. Default is 1.",
            "offset": "Offset to add to index returned. Useful when calling tick on lists, rings and vectors to offset the returned value. Default is 0."
          },
          "block?": "None"
        }
      ],
      [
        "look",
        {
          "arguments": [

          ],
          "options": {
            "offset": "Offset to add to index returned. Useful when calling look on lists, rings and vectors to offset the returned value"
          },
          "block?": "None"
        }
      ],
      [
        "stop",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "on",
        {
          "arguments": [
            [
              "condition",
              "truthy"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "bools",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "stretch",
        {
          "arguments": [
            [
              "list",
              "anything"
            ],
            [
              "count",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "knit",
        {
          "arguments": [
            [
              "value",
              "anything"
            ],
            [
              "count",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spread",
        {
          "arguments": [
            [
              "num_accents",
              "number"
            ],
            [
              "size",
              "number"
            ]
          ],
          "options": {
            "rotate": "rotate to the next strong beat allowing for easy permutations of the original rhythmic grouping (see example)"
          },
          "block?": "None"
        }
      ],
      [
        "range",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "finish",
              "number"
            ],
            [
              "step_size",
              "number"
            ]
          ],
          "options": {
            "step": "Size of increment between steps; step size.",
            "inclusive": "If set to true, range is inclusive of finish value"
          },
          "block?": "None"
        }
      ],
      [
        "line",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "finish",
              "number"
            ]
          ],
          "options": {
            "steps": "number of slices or segments along the line",
            "inclusive": "boolean value representing whether or not to include finish value in line"
          },
          "block?": "None"
        }
      ],
      [
        "halves",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "num_halves",
              "int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "doubles",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "num_doubles",
              "int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "vector",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ring",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "map",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ramp",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "choose",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "pick",
        {
          "arguments": [
            [
              "list",
              "array"
            ],
            [
              "n",
              "number_or_nil"
            ]
          ],
          "options": {
            "skip": "Number of rands to skip over with each successive pick"
          },
          "block?": "None"
        }
      ],
      [
        "inc",
        {
          "arguments": [
            [
              "n",
              "number"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "dec",
        {
          "arguments": [
            [
              "n",
              "number"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "loop",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "live_loop",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "init": "initial value for optional block arg",
            "auto_cue": "enable or disable automatic cue (default is true)",
            "delay": "Initial delay in beats before the live_loop starts. Default is 0.",
            "sync": "Initial sync symbol. Will sync with this symbol before the live_loop starts.",
            "sync_bpm": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol.",
            "seed": "override initial random generator seed before starting loop."
          },
          "block?": "Required"
        }
      ],
      [
        "block_duration",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "block_slept?",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "at",
        {
          "arguments": [
            [
              "times",
              "list"
            ],
            [
              "params",
              "list"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "version",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spark_graph",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spark",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "defonce",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "override": "If set to true, re-definitions are allowed and this acts like define"
          },
          "block?": "Required"
        }
      ],
      [
        "ndefine",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "define",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "comment",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "uncomment",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "print",
        {
          "arguments": [
            [
              "output",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "puts",
        {
          "arguments": [
            [
              "output",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "vt",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "factor?",
        {
          "arguments": [
            [
              "val",
              "number"
            ],
            [
              "factor",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "quantise",
        {
          "arguments": [
            [
              "n",
              "number"
            ],
            [
              "step",
              "positive_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "dice",
        {
          "arguments": [
            [
              "num_sides",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "one_in",
        {
          "arguments": [
            [
              "num",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rdist",
        {
          "arguments": [
            [
              "width",
              "number"
            ],
            [
              "centre",
              "number"
            ]
          ],
          "options": {
            "step": "Step size of value to quantise to."
          },
          "block?": "None"
        }
      ],
      [
        "rrand",
        {
          "arguments": [
            [
              "min",
              "number"
            ],
            [
              "max",
              "number"
            ]
          ],
          "options": {
            "step": "Step size of value to quantise to."
          },
          "block?": "None"
        }
      ],
      [
        "rrand_i",
        {
          "arguments": [
            [
              "min",
              "number"
            ],
            [
              "max",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_i",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_look",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_i_look",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_back",
        {
          "arguments": [
            [
              "amount",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_skip",
        {
          "arguments": [
            [
              "amount",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_reset",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "shuffle",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_random_seed",
        {
          "arguments": [
            [
              "seed",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_random_seed",
        {
          "arguments": [
            [
              "seed",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_random_stream",
        {
          "arguments": [
            [
              "noise_type",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_random_stream",
        {
          "arguments": [
            [
              "noise_type",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_cue_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_cue_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_bpm",
        {
          "arguments": [
            [
              "bpm",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_bpm",
        {
          "arguments": [
            [
              "bpm",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "with_bpm_mul",
        {
          "arguments": [
            [
              "mul",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_bpm_mul",
        {
          "arguments": [
            [
              "mul",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "density",
        {
          "arguments": [
            [
              "d",
              "density"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "current_time",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_random_seed",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_bpm",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_beat_duration",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "beat",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rt",
        {
          "arguments": [
            [
              "seconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "bt",
        {
          "arguments": [
            [
              "seconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_sched_ahead_time!",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_sched_ahead_time",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_real_time",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_real_time",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_sched_ahead_time",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_sched_ahead_time",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sleep",
        {
          "arguments": [
            [
              "beats",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "wait",
        {
          "arguments": [
            [
              "beats",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sync_bpm",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "sync",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
            "bpm_sync": "Inherit the BPM of the cueing thread. Default is false"
          },
          "block?": "None"
        }
      ],
      [
        "in_thread",
        {
          "arguments": [

          ],
          "options": {
            "name": "Make this thread a named thread with name. If a thread with this name already exists, a new thread will not be created.",
            "delay": "Initial delay in beats before the thread starts. Default is 0.",
            "sync": "Initial sync symbol. Will sync with this symbol before the thread starts.",
            "sync_bpm": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol."
          },
          "block?": "Required"
        }
      ],
      [
        "assert_error",
        {
          "arguments": [
            [
              "class",
              "Exception"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "assert_not",
        {
          "arguments": [
            [
              "arg",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert",
        {
          "arguments": [
            [
              "arg",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_not_equal",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_equal",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_similar",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_buffer",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_example",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "octs",
        {
          "arguments": [
            [
              "start",
              "note"
            ],
            [
              "num_octaves",
              "pos_int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "midi_notes",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rest?",
        {
          "arguments": [
            [
              "note_or_args",
              "number_symbol_or_map"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "pitch_to_ratio",
        {
          "arguments": [
            [
              "pitch",
              "midi_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ratio_to_pitch",
        {
          "arguments": [
            [
              "ratio",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "midi_to_hz",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "hz_to_midi",
        {
          "arguments": [
            [
              "freq",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_cent_tuning!",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_cent_tuning",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_cent_tuning",
        {
          "arguments": [
            [
              "cent_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_octave",
        {
          "arguments": [
            [
              "octave_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_octave",
        {
          "arguments": [
            [
              "octave_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "use_transpose",
        {
          "arguments": [
            [
              "note_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_transpose",
        {
          "arguments": [
            [
              "note_shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_tuning",
        {
          "arguments": [
            [
              "tuning",
              "symbol"
            ],
            [
              "fundamental_note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_tuning",
        {
          "arguments": [
            [
              "tuning",
              "symbol"
            ],
            [
              "fundamental_note",
              "symbol_or_number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "current_transpose",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_cent_tuning",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_octave",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "note",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "octave": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
          },
          "block?": "None"
        }
      ],
      [
        "note_range",
        {
          "arguments": [
            [
              "low_note",
              "note"
            ],
            [
              "high_note",
              "note"
            ]
          ],
          "options": {
            "pitches": "An array of notes (symbols or ints) to filter on. Octave information is ignored."
          },
          "block?": "None"
        }
      ],
      [
        "note_info",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "octave": "The octave of the note. Overrides any octave declaration in the note symbol such as :c2. Default is 4"
          },
          "block?": "None"
        }
      ],
      [
        "degree",
        {
          "arguments": [
            [
              "degree",
              "symbol_or_number"
            ],
            [
              "tonic",
              "symbol"
            ],
            [
              "scale",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "scale",
        {
          "arguments": [
            [
              "tonic",
              "symbol"
            ],
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "num_octaves": "The number of octaves you'd like the scale to consist of. More octaves means a larger scale. Default is 1."
          },
          "block?": "None"
        }
      ],
      [
        "chord_degree",
        {
          "arguments": [
            [
              "degree",
              "symbol_or_number"
            ],
            [
              "tonic",
              "symbol"
            ],
            [
              "scale",
              "symbol"
            ],
            [
              "number_of_notes",
              "number"
            ]
          ],
          "options": {
            "invert": "Apply the specified num inversions to chord. See the fn `chord_invert`."
          },
          "block?": "None"
        }
      ],
      [
        "chord",
        {
          "arguments": [
            [
              "tonic",
              "symbol"
            ],
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "invert": "Apply the specified num inversions to chord. See the fn `chord_invert`.",
            "num_octaves": "Create an arpeggio of the chord over n octaves"
          },
          "block?": "None"
        }
      ],
      [
        "chord_invert",
        {
          "arguments": [
            [
              "notes",
              "list"
            ],
            [
              "shift",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "scale_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "chord_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "live_audio",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "input": "The audio card input to read audio from.",
            "stereo": "If set to truthy value (true, 1) will read from two consecutive audio card inputs."
          },
          "block?": "None"
        }
      ],
      [
        "scsynth_info",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_free",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "buffer",
        {
          "arguments": [
            [
              "symbol",
              "name"
            ],
            [
              "number",
              "duration"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_free_all",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_timing_guarantees",
        {
          "arguments": [
            [
              "bool",
              "true_or_false"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "with_timing_guarantees",
        {
          "arguments": [
            [
              "bool",
              "true_or_false"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "use_sample_bpm",
        {
          "arguments": [
            [
              "string_or_number",
              "sample_name_or_duration"
            ]
          ],
          "options": {
            "num_beats": "The number of beats within the sample. By default this is 1."
          },
          "block?": "None"
        }
      ],
      [
        "with_sample_bpm",
        {
          "arguments": [
            [
              "string_or_number",
              "sample_name_or_duration"
            ]
          ],
          "options": {
            "num_beats": "The number of beats within the sample. By default this is 1."
          },
          "block?": "Required"
        }
      ],
      [
        "use_arg_bpm_scaling",
        {
          "arguments": [
            [
              "bool",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_arg_bpm_scaling",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "set_audio_latency!",
        {
          "arguments": [
            [
              "milliseconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_recording_bit_depth!",
        {
          "arguments": [
            [
              "bit_depth",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_control_delta!",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_debug",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_debug",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_arg_checks",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_arg_checks",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "recording_start",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_stop",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_save",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "recording_delete",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "reset_mixer!",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "set_mixer_control!",
        {
          "arguments": [

          ],
          "options": {
            "pre_amp": "Controls the amplitude of the signal prior to the FX stage of the mixer (prior to lpf/hpf stages). Has slide opts. Default 1.",
            "amp": "Controls the amplitude of the signal after the FX stage. Has slide opts. Default 1.",
            "hpf": "Global hpf FX. Has slide opts. Default 0.",
            "lpf": "Global lpf FX. Has slide opts. Default 135.5.",
            "hpf_bypass": "Bypass the global hpf. 0=no bypass, 1=bypass. Default 0.",
            "lpf_bypass": "Bypass the global lpf. 0=no bypass, 1=bypass. Default 0.",
            "limiter_bypass": "Bypass the final limiter. 0=no bypass, 1=bypass. Default 0.",
            "leak_dc_bypass": "Bypass the final DC leak correction FX. 0=no bypass, 1=bypass. Default 0."
          },
          "block?": "None"
        }
      ],
      [
        "synth",
        {
          "arguments": [
            [
              "synth_name",
              "symbol"

            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "Optional"
        }
      ],
      [
        "play",
        {
          "arguments": [
            [
              "note",
              "symbol_or_number"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "Optional"
        }
      ],
      [
        "play_pattern",
        {
          "arguments": [
            [
              "notes",
              "list"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "play_pattern_timed",
        {
          "arguments": [
            [
              "notes",
              "list"
            ],
            [
              "times",
              "list_or_number"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "None"
        }
      ],
      [
        "play_chord",
        {
          "arguments": [
            [
              "notes",
              "list"
            ]
          ],
          "options": {
            "amp": "The amplitude of the note",
            "amp_slide": "The duration in beats for amplitude changes to take place",
            "pan": "The stereo position of the sound. -1 is left, 0 is in the middle and 1 is on the right. You may use a value in between -1 and 1 such as 0.25",
            "pan_slide": "The duration in beats for the pan value to change",
            "attack": "Amount of time (in beats) for sound to reach full amplitude (attack_level). A short attack (i.e. 0.01) makes the initial part of the sound very percussive like a sharp tap. A longer attack (i.e 1) fades the sound in gently.",
            "decay": "Amount of time (in beats) for the sound to move from full amplitude (attack_level) to the sustain amplitude (sustain_level).",
            "sustain": "Amount of time (in beats) for sound to remain at sustain level amplitude. Longer sustain values result in longer sounds. Full length of sound is attack + decay + sustain + release.",
            "release": "Amount of time (in beats) for sound to move from sustain level amplitude to silent. A short release (i.e. 0.01) makes the final part of the sound very percussive (potentially resulting in a click). A longer release (i.e 1) fades the sound out gently.",
            "attack_level": "Amplitude level reached after attack phase and immediately before decay phase",
            "decay_level": "Amplitude level reached after decay phase and immediately before sustain phase. Defaults to sustain_level unless explicitly set",
            "sustain_level": "Amplitude level reached after decay phase and immediately before release phase.",
            "env_curve": "Select the shape of the curve between levels in the envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc.  Decimal numbers can be used for fine tuning.",
            "on": "If specified and false/nil/0 will stop the synth from being played. Ensures all opts are evaluated."
          },
          "block?": "None"
        }
      ],
      [
        "use_merged_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_merged_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "Required"
        }
      ],
      [
        "use_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "use_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "use_merged_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_merged_sample_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "with_synth_defaults",
        {
          "arguments": [

          ],
          "options": {
          },
          "block?": "Required"
        }
      ],
      [
        "with_fx",
        {
          "arguments": [
            [
              "fx_name",
              "symbol"
            ]
          ],
          "options": {
            "reps": "Number of times to repeat the block in an iteration.",
            "kill_delay": "Amount of time to wait after all synths triggered by the block have completed before stopping and freeing the effect synthesiser."
          },
          "block?": "Required"
        }
      ],
      [
        "current_synth",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_synth_defaults",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_sample_defaults",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_volume",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_debug",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_arg_checks",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_volume!",
        {
          "arguments": [
            [
              "vol",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_loaded?",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_sample",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_samples",
        {
          "arguments": [
            [
              "paths",
              "list"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_info",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_buffer",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_duration",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": {
            "rate": "Rate modifier. For example, doubling the rate will halve the duration.",
            "start": "Start position of sample playback as a value from 0 to 1",
            "finish": "Finish position of sample playback as a value from 0 to 1",
            "attack": "Duration of the attack phase of the envelope.",
            "decay": "Duration of the decay phase of the envelope.",
            "sustain": "Duration of the sustain phase of the envelope.",
            "release": "Duration of the release phase of the envelope.",
            "beat_stretch": "Change the rate of the sample so that its new duration matches the specified number of beats.",
            "pitch_stretch": "Change the rate of the sample so that its new duration matches the specified number of beats but attempt to preserve pitch.",
            "rpitch": "Change the rate to shift the pitch up or down the specified number of MIDI notes."
          },
          "block?": "None"
        }
      ],
      [
        "sample_paths",
        {
          "arguments": [
            [
              "pre_args",
              "source_and_filter_types"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample",
        {
          "arguments": [
            [
              "name_or_path",
              "symbol_or_string"
            ]
          ],
          "options": {
            "rate": "Rate with which to play back the sample. Higher rates mean an increase in pitch and a decrease in duration. Default is 1.",
            "beat_stretch": "Stretch (or shrink) the sample to last for exactly the specified number of beats. Please note - this does *not* keep the pitch constant and is essentially the same as modifying the rate directly.",
            "pitch_stretch": "Stretch (or shrink) the sample to last for exactly the specified number of beats. This attempts to keep the pitch constant using the `pitch:` opt. Note, it's very likely you'll need to experiment with the `window_size:`, `pitch_dis:` and `time_dis:` opts depending on the sample and the amount you'd like to stretch/shrink from original size.",
            "attack": "Time to reach full volume. Default is 0.",
            "sustain": "Time to stay at full volume. Default is to stretch to length of sample (minus attack and release times).",
            "release": "Time (from the end of the sample) to go from full amplitude to 0. Default is 0.",
            "start": "Position in sample as a fraction between 0 and 1 to start playback. Default is 0.",
            "finish": "Position in sample as a fraction between 0 and 1 to end playback. Default is 1.",
            "pan": "Stereo position of audio. -1 is left ear only, 1 is right ear only, and values in between position the sound accordingly. Default is 0.",
            "amp": "Amplitude of playback.",
            "pre_amp": "Amplitude multiplier which takes place immediately before any internal FX such as the low pass filter, compressor or pitch modification. Use this opt if you want to overload the compressor.",
            "onset": "Analyse the sample with an onset detection algorithm and automatically set or override the `start:` and `finish:` opts to play the nth onset only. Allows you to treat a rhythm sample as a palette of individual drum/synth hits. If `start:` or `finish:` opts are used in addition to `onset:` then they will work within the onset rather than the whole sample. Floats are rounded to the nearest whole number.",
            "on": "If specified and false/nil/0 will stop the sample from being played. Ensures all opts are evaluated.",
            "slice": "Divides the sample duration evenly into `num_slices:` sections (defaults to 16) and set the `start:` and `finish:` opts to play the nth slice only. If `start:` or `finish:` opts are used in addition to `slice:` then they will work within the slice rather than the whole sample. Use the envelope opts to remove any clicks introduced if the slice boundary is in the middle of a sound. Also consider `onset:` as an alternative to `slice:`. If `onset:` is also used then the slices will be within the onset rather than the whole sample. Floats are rounded to the nearest whole number.",
            "num_slices": "Number of slices to divide the sample into when using the `slice:` opt. Defaults to 16. Floats are rounded to the nearest whole number.",
            "norm": "Normalise the audio (make quieter parts of the sample louder and louder parts quieter) - this is similar to the normaliser FX. This may emphasise any clicks caused by clipping.",
            "lpf": "Cutoff value of the built-in low pass filter (lpf) in MIDI notes. Unless specified, the lpf is *not* added to the signal chain.",
            "lpf_init_level": "The initial low pass filter envelope value as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf_min:` opt.",
            "lpf_attack_level": "The peak lpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `lpf_decay_level:` opt.",
            "lpf_decay_level": "The level of lpf cutoff after the decay phase as a MIDI note. Default value is to match the `lpf_sustain_level:` opt.",
            "lpf_sustain_level": "The sustain cutoff (value of lpf cutoff at sustain time) as a MIDI note. Default value is to match the `lpf_release_level:` opt.",
            "lpf_release_level": "The final value of the low pass filter envelope as a MIDI note. This envelope is bypassed if no lpf env opts are specified. Default value is to match the `lpf:` opt.",
            "lpf_attack": "Attack time for lpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value.",
            "lpf_decay": "Decay time for lpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value.",
            "lpf_sustain": "Amount of time for lpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.",
            "lpf_release": "Amount of time (in beats) for sound to move from lpf cutoff sustain value to lpf cutoff min value. Default value is set to match amp envelope's release value.",
            "lpf_min": "Starting value of the lpf cutoff envelope. Default is 30.",
            "lpf_env_curve": "Select the shape of the curve between levels in the lpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.",
            "hpf": "Cutoff value of the built-in high pass filter (hpf) in MIDI notes. Unless specified, the hpf is *not* added to the signal chain.",
            "hpf_init_level": "The initial high pass filter envelope value as a MIDI note. This envelope is bypassed if no hpf env opts are specified. Default value is set to 130.",
            "hpf_attack_level": "The peak hpf cutoff (value of cutoff at peak of attack) as a MIDI note. Default value is to match the `hpf_decay_level:` opt.",
            "hpf_decay_level": "The level of hpf cutoff after the decay phase as a MIDI note. Default value is to match the `hpf_sustain_level:` opt.",
            "hpf_sustain_level": "The sustain cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf_release_level:` opt.",
            "hpf_release_level": "The sustain hpf cutoff (value of hpf cutoff at sustain time) as a MIDI note. Default value is to match the `hpf:` opt.",
            "hpf_attack": "Attack time for hpf cutoff filter. Amount of time (in beats) for sound to reach full cutoff value. Default value is set to match amp envelope's attack value.",
            "hpf_decay": "Decay time for hpf cutoff filter. Amount of time (in beats) for sound to move from full cutoff value (cutoff attack level) to the cutoff sustain level. Default value is set to match amp envelope's decay value.",
            "hpf_sustain": "Amount of time for hpf cutoff value to remain at sustain level in beats. When -1 (the default) will auto-stretch.",
            "hpf_release": "Amount of time (in beats) for sound to move from hpf cutoff sustain value to hpf cutoff min value. Default value is set to match amp envelope's release value.",
            "hpf_env_curve": "Select the shape of the curve between levels in the hpf cutoff envelope. 1=linear, 2=exponential, 3=sine, 4=welch, 6=squared, 7=cubed.",
            "hpf_max": "Maximum value of the high pass filter envelope. Default is 200.",
            "rpitch": "Rate modified pitch. Multiplies the rate by the appropriate ratio to shift up or down the specified amount in MIDI notes. Please note - this does *not* keep the duration and rhythmical rate constant and is essentially the same as modifying the rate directly.",
            "pitch": "Pitch adjustment in semitones. 1 is up a semitone, 12 is up an octave, -12 is down an octave etc. Maximum upper limit of 24 (up 2 octaves). Lower limit of -72 (down 6 octaves). Decimal numbers can be used for fine tuning.",
            "window_size": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch shift works by chopping the input into tiny slices, then playing these slices at a higher or lower rate. If we make the slices small enough and overlap them, it sounds like the original sound with the pitch changed. The window_size is the length of the slices and is measured in seconds. It needs to be around 0.2 (200ms) or greater for pitched sounds like guitar or bass, and needs to be around 0.02 (20ms) or lower for percussive sounds like drum loops. You can experiment with this to get the best sound for your input.",
            "pitch_dis": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Pitch dispersion - how much random variation in pitch to add. Using a low value like 0.001 can help to \"soften up\" the metallic sounds, especially on drum loops. To be really technical, pitch_dispersion is the maximum random deviation of the pitch from the pitch ratio (which is set by the `pitch:` opt).",
            "time_dis": "Pitch shift-specific opt - only honoured if the `pitch:` opt is used. Time dispersion - how much random delay before playing each grain (measured in seconds). Again, low values here like 0.001 can help to soften up metallic sounds introduced by the effect. Large values are also fun as they can make soundscapes and textures from the input, although you will most likely lose the rhythm of the original. NB - This won't have an effect if it's larger than window_size.",
            "compress": "Enable the compressor. This sits at the end of the internal FX chain immediately before the `amp:` opt. Therefore to drive the compressor use the `pre_amp:` opt which will amplify the signal before it hits any internal FX. The compressor compresses the dynamic range of the incoming signal. Equivalent to automatically turning the amp down when the signal gets too loud and then back up again when it's quiet. Useful for ensuring the containing signal doesn't overwhelm other aspects of the sound. Also a general purpose hard-knee dynamic range processor which can be tuned via the opts to both expand and compress the signal.",
            "threshold": "Threshold value determining the break point between slope_below and slope_above. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slope_below": "Slope of the amplitude curve below the threshold. A value of 1 means that the output of signals with amplitude below the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slope_above": "Slope of the amplitude curve above the threshold. A value of 1 means that the output of signals with amplitude above the threshold will be unaffected. Greater values will magnify and smaller values will attenuate the signal. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "clamp_time": "Time taken for the amplitude adjustments to kick in fully (in seconds). This is usually pretty small (not much more than 10 milliseconds). Also known as the time of the attack phase. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "relax_time": "Time taken for the amplitude adjustments to be released. Usually a little longer than clamp_time. If both times are too short, you can get some (possibly unwanted) artefacts. Also known as the time of the release phase. Only valid if the compressor is enabled by turning on the `compress:` opt.",
            "slide": "Default slide time in beats for all slide opts. Individually specified slide opts will override this value.",
            "path": "Path of the sample to play. Typically this opt is rarely used instead of the more powerful source/filter system. However it can be useful when working with pre-made opt maps."
          },
          "block?": "Optional"
        }
      ],
      [
        "status",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "control",
        {
          "arguments": [
            [
              "node",
              "synth_node"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "kill",
        {
          "arguments": [
            [
              "node",
              "synth_node"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "sample_names",
        {
          "arguments": [
            [
              "group",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "all_sample_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sample_groups",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "synth_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "fx_names",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_synthdefs",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set",
        {
          "arguments": [
            [
              "time_state_key",
              "default"
            ],
            [
              "value",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "cue",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
            "your_key": "Your value",
            "another_key": "Another value",
            "key": "All these opts are passed through to the thread which syncs"
          },
          "block?": "None"
        }
      ],
      [
        "get",
        {
          "arguments": [
            [
              "time_state_key",
              "default"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_swing",
        {
          "arguments": [
            [
              "shift",
              "beats"
            ],
            [
              "pulse",
              "number"
            ],
            [
              "tick",
              "symbol"
            ]
          ],
          "options": {
            "shift": "How much time to delay/forward the block. Greater values produce more emphasised swing. Defaults to 0.1 beats.",
            "pulse": "How often to apply the swing. Defaults to 4.",
            "tick": "A key for the tick with which to count pulses. Override this if you have more than one `with_swing` block in your `live_loop` or thread to stop them interfering with each other.",
            "offset": "Count offset - before modding the count with the pulse size - integer offset to add to the result of calling `tick` with the specified tick key (via the `tick:` opt)"
          },
          "block?": "None"
        }
      ],
      [
        "run_file",
        {
          "arguments": [
            [
              "filename",
              "path"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "run_code",
        {
          "arguments": [
            [
              "code",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "eval_file",
        {
          "arguments": [
            [
              "filename",
              "path"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_osc_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_osc_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_osc",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_osc",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "osc_send",
        {
          "arguments": [
            [
              "hostname",
              "string"
            ],
            [
              "port",
              "number"
            ],
            [
              "path",
              "osc_path"
            ],
            [
              "args",
              "list"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "osc",
        {
          "arguments": [
            [
              "path",
              "arguments"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "reset",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "clear",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "time_warp",
        {
          "arguments": [
            [
              "delta_time",
              "number"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "tick_set",
        {
          "arguments": [
            [
              "value",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick_reset",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick_reset_all",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "tick",
        {
          "arguments": [
            [
              "key",
              "symbol"
            ]
          ],
          "options": {
            "step": "The amount to tick up by. Default is 1.",
            "offset": "Offset to add to index returned. Useful when calling tick on lists, rings and vectors to offset the returned value. Default is 0."
          },
          "block?": "None"
        }
      ],
      [
        "look",
        {
          "arguments": [

          ],
          "options": {
            "offset": "Offset to add to index returned. Useful when calling look on lists, rings and vectors to offset the returned value"
          },
          "block?": "None"
        }
      ],
      [
        "stop",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "on",
        {
          "arguments": [
            [
              "condition",
              "truthy"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "bools",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "stretch",
        {
          "arguments": [
            [
              "list",
              "anything"
            ],
            [
              "count",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "knit",
        {
          "arguments": [
            [
              "value",
              "anything"
            ],
            [
              "count",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spread",
        {
          "arguments": [
            [
              "num_accents",
              "number"
            ],
            [
              "size",
              "number"
            ]
          ],
          "options": {
            "rotate": "rotate to the next strong beat allowing for easy permutations of the original rhythmic grouping (see example)"
          },
          "block?": "None"
        }
      ],
      [
        "range",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "finish",
              "number"
            ],
            [
              "step_size",
              "number"
            ]
          ],
          "options": {
            "step": "Size of increment between steps; step size.",
            "inclusive": "If set to true, range is inclusive of finish value"
          },
          "block?": "None"
        }
      ],
      [
        "line",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "finish",
              "number"
            ]
          ],
          "options": {
            "steps": "number of slices or segments along the line",
            "inclusive": "boolean value representing whether or not to include finish value in line"
          },
          "block?": "None"
        }
      ],
      [
        "halves",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "num_halves",
              "int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "doubles",
        {
          "arguments": [
            [
              "start",
              "number"
            ],
            [
              "num_doubles",
              "int"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "vector",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ring",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "map",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "ramp",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "choose",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "pick",
        {
          "arguments": [
            [
              "list",
              "array"
            ],
            [
              "n",
              "number_or_nil"
            ]
          ],
          "options": {
            "skip": "Number of rands to skip over with each successive pick"
          },
          "block?": "None"
        }
      ],
      [
        "inc",
        {
          "arguments": [
            [
              "n",
              "number"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "dec",
        {
          "arguments": [
            [
              "n",
              "number"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "loop",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "live_loop",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "init": "initial value for optional block arg",
            "auto_cue": "enable or disable automatic cue (default is true)",
            "delay": "Initial delay in beats before the live_loop starts. Default is 0.",
            "sync": "Initial sync symbol. Will sync with this symbol before the live_loop starts.",
            "sync_bpm": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol.",
            "seed": "override initial random generator seed before starting loop."
          },
          "block?": "Required"
        }
      ],
      [
        "block_duration",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "block_slept?",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "at",
        {
          "arguments": [
            [
              "times",
              "list"
            ],
            [
              "params",
              "list"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "version",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spark_graph",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "spark",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "defonce",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": {
            "override": "If set to true, re-definitions are allowed and this acts like define"
          },
          "block?": "Required"
        }
      ],
      [
        "ndefine",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "define",
        {
          "arguments": [
            [
              "name",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "comment",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "uncomment",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "print",
        {
          "arguments": [
            [
              "output",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "puts",
        {
          "arguments": [
            [
              "output",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "vt",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "factor?",
        {
          "arguments": [
            [
              "val",
              "number"
            ],
            [
              "factor",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "quantise",
        {
          "arguments": [
            [
              "n",
              "number"
            ],
            [
              "step",
              "positive_number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "dice",
        {
          "arguments": [
            [
              "num_sides",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "one_in",
        {
          "arguments": [
            [
              "num",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rdist",
        {
          "arguments": [
            [
              "width",
              "number"
            ],
            [
              "centre",
              "number"
            ]
          ],
          "options": {
            "step": "Step size of value to quantise to."
          },
          "block?": "None"
        }
      ],
      [
        "rrand",
        {
          "arguments": [
            [
              "min",
              "number"
            ],
            [
              "max",
              "number"
            ]
          ],
          "options": {
            "step": "Step size of value to quantise to."
          },
          "block?": "None"
        }
      ],
      [
        "rrand_i",
        {
          "arguments": [
            [
              "min",
              "number"
            ],
            [
              "max",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_i",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_look",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_i_look",
        {
          "arguments": [
            [
              "max",
              "number_or_range"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_back",
        {
          "arguments": [
            [
              "amount",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_skip",
        {
          "arguments": [
            [
              "amount",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rand_reset",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "shuffle",
        {
          "arguments": [
            [
              "list",
              "array"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_random_seed",
        {
          "arguments": [
            [
              "seed",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_random_seed",
        {
          "arguments": [
            [
              "seed",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_random_stream",
        {
          "arguments": [
            [
              "noise_type",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_random_stream",
        {
          "arguments": [
            [
              "noise_type",
              "symbol"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_cue_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_cue_logging",
        {
          "arguments": [
            [
              "true_or_false",
              "boolean"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_bpm",
        {
          "arguments": [
            [
              "bpm",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_bpm",
        {
          "arguments": [
            [
              "bpm",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "with_bpm_mul",
        {
          "arguments": [
            [
              "mul",
              "number"
            ]
          ],
          "options": null,
          "block?": "Required"
        }
      ],
      [
        "use_bpm_mul",
        {
          "arguments": [
            [
              "mul",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "density",
        {
          "arguments": [
            [
              "d",
              "density"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "current_time",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_random_seed",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_bpm",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_beat_duration",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "beat",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "rt",
        {
          "arguments": [
            [
              "seconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "bt",
        {
          "arguments": [
            [
              "seconds",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "set_sched_ahead_time!",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_sched_ahead_time",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "use_real_time",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_real_time",
        {
          "arguments": [
            [

            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "with_sched_ahead_time",
        {
          "arguments": [
            [
              "time",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "current_sched_ahead_time",
        {
          "arguments": [

          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sleep",
        {
          "arguments": [
            [
              "beats",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "wait",
        {
          "arguments": [
            [
              "beats",
              "number"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "sync_bpm",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
          },
          "block?": "None"
        }
      ],
      [
        "sync",
        {
          "arguments": [
            [
              "cue_id",
              "symbol"
            ]
          ],
          "options": {
            "bpm_sync": "Inherit the BPM of the cueing thread. Default is false"
          },
          "block?": "None"
        }
      ],
      [
        "in_thread",
        {
          "arguments": [

          ],
          "options": {
            "name": "Make this thread a named thread with name. If a thread with this name already exists, a new thread will not be created.",
            "delay": "Initial delay in beats before the thread starts. Default is 0.",
            "sync": "Initial sync symbol. Will sync with this symbol before the thread starts.",
            "sync_bpm": "Initial sync symbol. Will sync with this symbol before the live_loop starts. Live loop will also inherit the BPM of the thread which cued the symbol."
          },
          "block?": "Required"
        }
      ],
      [
        "assert_error",
        {
          "arguments": [
            [
              "class",
              "Exception"
            ]
          ],
          "options": null,
          "block?": "Optional"
        }
      ],
      [
        "assert_not",
        {
          "arguments": [
            [
              "arg",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert",
        {
          "arguments": [
            [
              "arg",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_not_equal",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_equal",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "assert_similar",
        {
          "arguments": [
            [
              "arg1",
              "anything"
            ],
            [
              "arg2",
              "anything"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_buffer",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ],
      [
        "load_example",
        {
          "arguments": [
            [
              "path",
              "string"
            ]
          ],
          "options": null,
          "block?": "None"
        }
      ]
    ]
  }
}
